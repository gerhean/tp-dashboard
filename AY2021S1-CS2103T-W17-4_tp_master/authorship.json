[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "# IntelliJournal"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "* **IntelliJournal** is a **desktop app for managing journals as well as contacts, optimised for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "* If you can type fast, IntelliJournal can help you record down journal entries with contacts as well as location information faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "## Product Websites"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "* [About Us](/docs/AboutUs.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "* [User Guide](/docs/UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "* [Developer Guide](/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 13,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.2\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.10\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    archiveName \u003d \u0027IntelliJournal.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 11,
      "zhXchD": 1,
      "Nauw1010": 2,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "You can reach us through [GitHub](https://github.com/AY2021S1-CS2103T-W17-4)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Zhu Xiaochen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cimg src\u003d\"images/zhxchd.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[[github](https://github.com/zhXchD)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Role: Team lead"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Code integration"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Lin Geyu"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cimg src\u003d\"images/lingy12.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[[github](https://github.com/Lingy12)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Role: developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Deliverables and deadlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Scheduling and tracking"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Lin Zhengyang"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cimg src\u003d\"images/nauw1010.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[[github](https://github.com/Nauw1010)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Role: developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * UI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Jazer Ler"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cimg src\u003d\"images/jazerler.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[[github](https://github.com/jazerler)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Role: developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Code integration"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Joshua Liang"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cimg src\u003d\"images/joshualiangxy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[[github](https://github.com/joshualiangxy)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Role: developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Documentation/testing/code quality"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Storage"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 34,
      "-": 29
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/Main.java)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "and [`MainApp`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "1. `Logic` uses the `CommandParser` class to parse the user command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* stores the journal data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cEntry\u003e` that can be \u0027observed\u0027, e.g. the UI"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": " can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* does not depend on any of the other four components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Similarly, an alternative model for the Journal is given below. Like the model above, it has a `Tag` list in the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": " `Journal`, which `Entry` references, allowing `Journal` to only require one `Tag` object per unique `Tag`, instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "  of each `Entry` needing their own `Tag` object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": "![BetterModelEntryClassDiagram](images/BetterModelEntryClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W17-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* can save the journal data in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* has a need to keep track of his meetings with contacts"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "**Value proposition**: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a…​ | I want to…​                       | So that I can…​                                                   |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| :---:    | :---        | :---                                   | :---                                                                   |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user    | see usage instructions                 | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user        | add a new person                       |                                                                        |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user        | delete a person                        | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user        | find a person by name                  | locate details of persons without having to go through the entire list |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "| `* * *`  | user        | add a journal entry                    | record an events                                                       |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "| `* * *`  | user        | delete a journal                       | remove an event that is not important from journal                     |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "| `* * *`  | user        | list all journal entries               |                                                                        |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| `* * *`  | user        | list all contacts in the contacts list |                                                                        |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "| `* * *`  | user        | search journal entries                 | navigate to the entry that I am interested                             |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "(For all use cases below, the **System** is the `intelliJournal` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: Delete a person**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "2.  IntelliJournal shows a list of persons"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    * 3a1. IntelliJournal shows an error message."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**Use case: Delete a journal entry**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "1. User request to list persons"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "2. IntelliJournal shows a list of journal entry"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "3. User request to delte a specific journal entry in the list"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "4. IntelliJournal deletes the entry"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "* 2a. The journal is empty (No entry in journal)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "* 3a.  The given index is invalid"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    * 3a1. IntelliJournal shows an error message."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**Use case: Search for a journal entry (by entry name)**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "1. User request to list entries"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "2. User search the entry/entries with given name"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "3. Intellij journal display a list of filtered entries"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "* 2a. The journal is empty (No entry in journal)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "* 3a.  The given name is not in journal"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    * 3a1. IntelliJournal shows an error message."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "2.  Should be able to hold up to 1000 persons and journals without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, MacOS"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   1. Prerequisites: List all persons using the `listc` command. Multiple persons in the list."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   1. Test case: `deletec 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   1. Test case: `deletec 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   1. Other incorrect delete commands to try: `deletec`, `deletec x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "jazerler": 15,
      "Lingy12": 45,
      "-": 325
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "IntelliJournal is a **desktop app for managing journals as well as contacts,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "optimised for use via a Command Line Interface** (CLI) while still having the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "benefits of a Graphical User Interface (GUI). If you can type fast,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "IntelliJournal can help you record down journal entries with contacts as well"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "as location information faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "1. Download the latest `intellijournal.jar` from"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "   [here](https://github.com/AY2021S1-CS2103T-W17-4/tp/releases)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "   IntelliJournal."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "   appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "1. Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "   e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "   * **`addc`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     123, #01-01` : Adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "   * **`deletec`**`3` : deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  `add n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  times.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  `t/friend t/family` etc."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "       is also acceptable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "### Viewing help menu: `help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Gives the explanation and format of commands in the system and does not change"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "the current displaying tab."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* The `COMMAND` argument supplied will indicate which command explanation to"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "show."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* If no `COMMAND` argument is supplied, all commands will be shown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Adding a contact: `addc`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Adds a contact to the address book and switches to the address book tab."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "format: `addc n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [at/DATE_AND_TIME]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         [t/TAG]…​`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "A contact can have any number of tags (including 0)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `addc n/John Doe` Adds a contact with the name of `Robert`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `addc n/Betsy Crowe t/client t/important` Adds a contact with the name of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "`Robert` and tags of `client` and `important`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Adding a journal entry: `addj`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Adds a journal entry to the journal and switches to the journal tab."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "format: `addj n/NAME [at/DATE_AND_TIME] [d/DESCRIPTION] [with/CONTACT_NAMES] [t/TAG]…​`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "A journal entry can have any number of contacts or tags (including 0)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "`CONTACT_NAME` must be an existing name in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `addj n/Meeting with client` Adds a journal entry with the name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "`Meeting with client`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "* `addj n/Meeting with client at/2020-9-20 14:00 d/Tea` Adds a journal"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "entry with the name `Meeting with client`, a date and time of `2020-9-20 14:00`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "and content `Tea`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "### Listing all contacts: `listc`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Lists all the contacts in the address book and switches to the address book tab."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "Format: `listc`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "### Listing all journal entries: `listj`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Lists all journal entries in the journal and switches to the journal tab."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "Format: `listj`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Viewing a contact or journal entry: `view`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Opens up a contact or journal entry to show further details and switches to the corresponding tab."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Format `view in/SCOPE index/INDEX`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* `INDEX` refers to the index number of the contact shown in the list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `SCOPE` must be `c` (refers to contact) or `j` (refers to journal entry)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `view in/c index/4` Views the 4th contact in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `view in/c index/8` Views the 8th contact in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `view in/j index/4` Views the 4th journal entry in the journal."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* `view in/j index/8` Views the 8th journal entry in the journal."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Deleting a contact: `deletec`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Deletes a contact from the address book and switches to the address book tab."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Format `deletec INDEX`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* `INDEX` refers to the index number of the contact in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* `deletec 4` Deletes the 4th contact in the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* `deletec 8` Deletes the 8th contact in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Deleting a journal entry: `deletej`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Deletes a journal entry from the journal and switches to the journal tab."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Format `deletej INDEX`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "* `INDEX` refers to the index number of the journal shown in the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* `deletej 4` Deletes the 4th journal entry in the journal."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazerler"
        },
        "content": "* `deletej 8` Deletes the 8th journal entry in the journal."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Deleting the address book: `clearc`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Clears all contacts in the addressbook and switches to the address book tab."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Format: `clearc`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Deleting the journal: `clearj`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Clears all journal entries in the journal and switches to the journal tab."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Format: `clearj`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "### Switch the displaying tab: `switch`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Switches the current displaying tab to the other tab."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "Format: `switch`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "IntelliJournal data is saved in the hard disk automatically after any command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "       it creates with the file that contains the data of your previous"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "       IntelliJournal home folder."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| Command                         | Format                                                                                 |"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| :---                            | :---                                                                                   |"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| **Viewing help menu**           | `help [COMMAND]`                                                                       |"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| **Adding a contact**            | `addc n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [at/DATE_AND_TIME] [t/TAG]…​` |"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "| **Adding a journal entry**      | `addj n/NAME [at/DATE_AND_TIME] [d/DESCRIPTION] [with/CONTACT_NAME] [t/TAG]…​`                        |"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| **Listing all contacts**        | `listc`                                                                                |"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| **Listing all journal entries** | `listj`                                                                                |"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "| **Viewing a contact or journal entry**           | `view in/SCOPE INDEX`                                                                          |"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jazerler"
        },
        "content": "| **Removing a contact**          | `deletec INDEX`                                                                        |"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jazerler"
        },
        "content": "| **Removing a journal entry**    | `deletej INDEX`                                                                        |"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "| **Clear the address book** | `clearc`|"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "| **Clear the journal** | `clearj`|"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "| **Switch the displaying tab** | `switch`|"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "| **Exiting the program**         | `exit`                                                                                 |"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 58,
      "zhXchD": 44,
      "jazerler": 10,
      "Lingy12": 2,
      "-": 105
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "title: IntelliJournal"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W17-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W17-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "**IntelliJournal is a desktop application for businesspersons for managing your contact and meeting details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* If you are interested in using IntelliJournal, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "* If you are interested about developing IntelliJournal, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.storage.JournalStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.storage.JsonJournalStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        JournalStorage journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                userPrefs.getJournalFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        storage \u003d new StorageManager("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                addressBookStorage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                journalStorage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                userPrefsStorage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * address book and {@code userPrefs}. \u003cbr\u003eThe data from the sample address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * or an empty address book will be used instead if errors occur when"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Optional\u003cReadOnlyJournal\u003e journalOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ReadOnlyAddressBook initialAddressBook;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ReadOnlyJournal initialJournal;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                logger.info(\"AddressBook data file not found. Will be \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        + \"starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialAddressBook \u003d addressBookOptional"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"AddressBook data file not in the correct \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Problem while reading from the AddressBook \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            journalOptional \u003d storage.readJournal(initialAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (journalOptional.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                logger.info(\"Journal data file not found. Will be \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        + \"starting with a sample Journal\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialJournal \u003d journalOptional"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleJournal);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Journal data file not in the correct \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"format. Will be starting with an empty Journal\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialJournal \u003d new Journal();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Problem while reading from the Journal \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"file. Will be starting with an empty Journal\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            initialJournal \u003d new Journal();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new ModelManager(initialAddressBook, initialJournal, userPrefs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Failed to save config file : \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * prefs file path, or a new {@code UserPrefs} with default configuration"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * if errors occur when reading from the file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Failed to save config file : \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"[ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.severe(\"Failed to save preferences \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 79,
      "zhXchD": 1,
      "Nauw1010": 1,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format!\\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@link Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void writeToFile(Path file, String content)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 8,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .configure("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .setVisibility("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    PropertyAccessor.FIELD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonAutoDetect.Visibility.ANY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .addDeserializer("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Level.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new LevelDeserializer(Level.class)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path jsonFile,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            T objectToSerialize"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path jsonFile,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Class\u003cT\u003e classOfObjectToDeserialize"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return fromJsonString("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * object if the file is not found. If any values are missing from the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * file, default values will be used, as long as the file is a valid json"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                                   structure in the class given here."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path filePath,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Class\u003cT\u003e classOfObjectToDeserialize"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + filePath + \": \" + e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts a given instance of a class into its JSON data string"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * representation."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .writeValueAsString(instance);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static class LevelDeserializer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Gets the logging level that matches loggingLevelString."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @return null if there are no matches"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 51,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *   Ignores case, but a full word match is required.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *   examples:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *   \u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *     containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *     containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *     // Not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *     containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 11,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Storage} and {@code UUID}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public LogicManager(Model model, Storage storage, UUID uuid) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        addressBookParser \u003d new AddressBookParser(uuid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            storage.saveJournal(model.getJournal());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return model.getFilteredEntryList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "zhXchD": 1,
      "Nauw1010": 6,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)).setAddressBookTab();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 4,
      "zhXchD": 7,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddJournalEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddJournalEntryCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addj\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a journal entry to the journal.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_NAME + \"TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_DATE_AND_TIME + \"DATE_AND_TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \" [\" + PREFIX_CONTACT + \"CONTACT_NAME] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \" [\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_NAME + \"Meet with client John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_DATE_AND_TIME + \"2020-10-10 10:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Discussed about his demands \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_CONTACT + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + PREFIX_TAG + \"Meeting\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New journal entry added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the journal\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Creates an AddJournalEntryCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public AddJournalEntryCommand(Entry entry) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        for (Person person : toAdd.getContactList()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Optional\u003cPerson\u003e personInList \u003d model.getAddressBook().getPersonList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .filter(p -\u003e p.getName().equals(person.getName()))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (personInList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new CommandException(\"Person named \" + person.getName() + \" does not exist in the address book!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                uniquePersonList.add(personInList.get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Entry validToAdd \u003d new Entry("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                toAdd.getTitle(), toAdd.getDate(), toAdd.getDescription(), uniquePersonList, toAdd.getTags()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (model.hasEntry(validToAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.addEntry(validToAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, validToAdd)).setJournalTab();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                || (other instanceof AddJournalEntryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddJournalEntryCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearAddressBookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ClearAddressBookCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).setAddressBookTab();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "zhXchD": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearJournalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ClearJournalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearj\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \"Journal has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.setJournal(new Journal());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).setJournalTab();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 1,
      "zhXchD": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private boolean isAddressBookTab \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private boolean isSameTab \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private boolean isSwitchingTab \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private boolean isViewingJournal \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private boolean isCleaningJournalView \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String feedbackToUser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            boolean showHelp,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            boolean exit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code feedbackToUser}, and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isAddressBookTab() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return isAddressBookTab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult setAddressBookTab() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.isAddressBookTab \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult setJournalTab() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.isAddressBookTab \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult setSwitch() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.isSwitchingTab \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult setSameTab() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.isSameTab \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public CommandResult setViewingJournal() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.isViewingJournal \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public CommandResult setCleaningJournalView(boolean isCleaningJournalView) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.isCleaningJournalView \u003d isCleaningJournalView;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isSwitch() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return isSwitchingTab;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isSameTab() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return isSameTab;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public boolean isViewingJournal() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return isViewingJournal;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public boolean isCleaningJournalView() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return isCleaningJournalView;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 7,
      "zhXchD": 35,
      "Nauw1010": 20,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletec\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \": Deletes the person identified by the index number used in the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \"displayed person list.\\nParameters: INDEX (must be a positive \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \"integer)\\nExample: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \"Deleted Person: %1$s\\nwith associate journals:%2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        List\u003cEntry\u003e entriesListToDelete \u003d model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .getJournal()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .getEntryList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .filter(entry -\u003e entry.getContactList().contains(personToDelete))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        String entriesToDelete \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        for (Entry entry : entriesListToDelete) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            entriesToDelete \u003d new StringBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .append(entriesToDelete)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .append(entry.getTitle()).toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (entriesToDelete \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            entriesToDelete \u003d \" None\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete, entriesToDelete)).setAddressBookTab();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return other \u003d\u003d this || (other instanceof DeleteContactCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \u0026\u0026 ((DeleteContactCommand) other).targetIndex.equals(targetIndex));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 7,
      "zhXchD": 28,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteJournalEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteJournalEntryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletej\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        + \": Deletes the entry identified by the index number used in the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        + \"displayed entries list.\\nParameters: INDEX (must be a positive \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        + \"integer)\\nExample: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public DeleteJournalEntryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        boolean isEmptyList \u003d (lastShownList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            .setJournalTab().setCleaningJournalView(isEmptyList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return other \u003d\u003d this || (other instanceof DeleteJournalEntryCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \u0026\u0026 ((DeleteJournalEntryCommand) other).targetIndex.equals(targetIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 53,
      "Nauw1010": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Person editedPerson \u003d createEditedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates and returns a {@code Person} with the details of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static Person createEditedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person personToEdit,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getPhone()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getEmail()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getAddress()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        UUID uuid \u003d personToEdit.getUuid();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                updatedPhone,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                updatedEmail,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                updatedAddress,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                uuid"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * will replace the corresponding field value of the person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return CollectionUtil.isAnyNonNull("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    name, phone, email, address, tags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return tags !\u003d null"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 57,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * argument keywords. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \" list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        model.getFilteredPersonList().size()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                )"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return other \u003d\u003d this || (other instanceof FindCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 13,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false).setSameTab();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "zhXchD": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ListContactCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).setAddressBookTab();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListJournalEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ListJournalEntryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listj\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all journal entries\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.updateFilteredEntryList(entry -\u003e true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).setJournalTab();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switch to the other tab.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).setSwitch();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"View %1$s: %2$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the person or entry by the \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \"index number used in the displayed list.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \"\\nParameters: in/SCOPE (must be \\\"c\\\" or  \\\"j\\\") index/INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" in/c\" + \" index/1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public ViewCommand(Index index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewJournalEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Views journal entry at specified index of the list currently displayed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ViewJournalEntryCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public ViewJournalEntryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Entry entryToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.updateFilteredEntryList(entry -\u003e entry.isSameEntry(entryToView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_SUCCESS, \"entry\", entryToView.toString()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                .setJournalTab().setViewingJournal();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return other \u003d\u003d this || (other instanceof ViewJournalEntryCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \u0026\u0026 ((ViewJournalEntryCommand) other).targetIndex.equals(targetIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 43,
      "Nauw1010": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Views a person at specified index in the current list displayed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ViewPersonCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public ViewPersonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Person personToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.updateFilteredPersonList(person -\u003e person.isSamePerson(personToView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_SUCCESS, \"person\", personToView.toString()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .setAddressBookTab();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return other \u003d\u003d this || (other instanceof ViewPersonCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \u0026\u0026 ((ViewPersonCommand) other).targetIndex.equals(targetIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final UUID uuid;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates an AddContactCommandParser instance with a random uuid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddContactCommandParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates an AddContactCommandParser instance with a given uuid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param uuid that is used for Person."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddContactCommandParser(UUID uuid) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, uuid);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new AddContactCommand(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 18,
      "zhXchD": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddJournalEntryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddJournalEntryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddJournalEntryCommandParser implements Parser\u003cAddJournalEntryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public AddJournalEntryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        PREFIX_DATE_AND_TIME,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        PREFIX_TAG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        PREFIX_CONTACT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJournalEntryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // TODO: Use ParserUtil to parse these values"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Title title \u003d new Title(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_AND_TIME).orElse(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        UniquePersonList personList \u003d ParserUtil.parseContacts(argMultimap.getAllValues(PREFIX_CONTACT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Entry entry \u003d new Entry(title, date, description, personList, tagList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new AddJournalEntryCommand(entry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 1,
      "zhXchD": 61,
      "jazerler": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddJournalEntryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ClearAddressBookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ClearJournalCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteJournalEntryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ListJournalEntryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private UUID uuid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates a default instance of AddressBookParser."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddressBookParser() { }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates an instance of AddressBookParser with a given uuid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param uuid used in parsing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddressBookParser(UUID uuid) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (uuid \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                return new AddContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                return new AddContactCommandParser(uuid).parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case AddJournalEntryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new AddJournalEntryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new DeleteContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case DeleteJournalEntryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new DeleteJournalEntryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case ClearAddressBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ClearAddressBookCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case ClearJournalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ClearJournalCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case ListContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case ListJournalEntryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ListJournalEntryCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new SwitchCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 20,
      "zhXchD": 34,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Tokenizes arguments string of the form:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " *     where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " *    discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " *    the value of {@code t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * object that maps prefixes to their respective argument values. Only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                   {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                   arguments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static ArgumentMultimap tokenize("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                   {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return           List of zero-based prefix positions in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                   arguments string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .flatMap(prefix -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        int prefixPosition \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            PrefixPosition extendedPrefix \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            prefixPosition \u003d findPrefixPosition("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argsString,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    prefix.getPrefix(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    prefixPosition"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static int findPrefixPosition("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code ArgumentMultimap} object that maps the extracted prefixes to their"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * respective arguments. Prefixes are extracted based on their zero-based"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * positions in {@code argsString}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param argsString      Arguments string of the form:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        {@code argsString}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        their arguments"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        PrefixPosition endPositionMarker \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argValue \u003d extractArgumentValue("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argsString,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    prefixPositions.get(i),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    prefixPositions.get(i + 1)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            PrefixPosition nextPrefixPosition"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String value \u003d argsString.substring("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 73,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Prefix PREFIX_DATE_AND_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Prefix PREFIX_SCOPE \u003d new Prefix(\"in/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"with/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"index/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 5,
      "Lingy12": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteContactCommandParser implements Parser\u003cDeleteContactCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * DeleteContactCommand and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public DeleteContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            DeleteContactCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    pe"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 8,
      "zhXchD": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteJournalEntryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteJournalEntryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteJournalEntryCommandParser implements Parser\u003cDeleteJournalEntryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * DeleteContactCommand and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public DeleteJournalEntryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new DeleteJournalEntryCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            DeleteJournalEntryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    pe"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 8,
      "zhXchD": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws ParseException if the specified index is invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *                        (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Phone}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the given {@code phone} is present but invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static Phone parsePhone(Optional\u003cString\u003e phone) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (phone.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return Phone.EMPTY_PHONE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return parsePhone(phone.get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Address}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the given {@code address} is present but invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static Address parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (address.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return Address.EMPTY_ADDRESS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return parseAddress(address.get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Email}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the given {@code email} is present but invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static Email parseEmail(Optional\u003cString\u003e email) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (email.isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return Email.EMPTY_EMAIL;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return parseEmail(email.get());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code UniquePersonList}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static UniquePersonList parseContacts(Collection\u003cString\u003e contacts)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(contacts);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        final UniquePersonList personList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        for (String name : contacts) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Person person \u003d new Person("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    parseName(name), null, null, null, new HashSet\u003c\u003e(), UUID.randomUUID()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            personList.add(person);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param date a {@String} to be parsed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return {@code Date} specified the string or current time if the string is null"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the sting is present but invalid"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (date !\u003d null \u0026\u0026 !Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new Date(date);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses description string into Description."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param description the string to parse"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return a new Description specified by the string"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the string is present by invalid"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (description !\u003d null \u0026\u0026 !Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Parses string into scope."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param scope a string specified a certain scope"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return \"c\" if it\u0027s address book scope or \"j\" for journal scope"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws ParseException if the string is not \"c\" or \"j\" throws exception"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static String parseScope(String scope) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(scope);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        String trimmedScope \u003d scope.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (trimmedScope.equals(\"c\") || trimmedScope.equals(\"j\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return trimmedScope;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(\"Scope can only be \\\"c\\\" or \\\"j\\\".\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 12,
      "zhXchD": 105,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCOPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ViewJournalEntryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ViewPersonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SCOPE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SCOPE, PREFIX_INDEX) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Index targetIndex \u003d parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        String scope \u003d ParserUtil.parseScope(argMultimap.getValue(PREFIX_SCOPE).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        switch (scope) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ViewPersonCommand(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        case \"j\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new ViewJournalEntryCommand(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private Index parseIndex(String arg) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return ParserUtil.parseIndex(arg);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    pe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Journal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.UniqueEntryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class Journal implements ReadOnlyJournal {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final UniqueEntryList entryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Journal() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.entryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Overwrite the original journal with given data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param newData Journal to overwrite."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Journal(ReadOnlyJournal newData) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        resetData(newData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    // operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Adds an entry to the existing journal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param newEntry Entry to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void addEntry(Entry newEntry) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(newEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.entryList.add(newEntry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Removes a certain entry inside the journal."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param target Target entry to be removed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void removeEntry(Entry target) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.entryList.remove(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    //TODO: Add dependency between Journal and Person in DG UML diagram"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Removes entry that associate with certain person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param person Target person to be removed from {@code AddressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void removeAssociateEntryContact(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        HashSet\u003cEntry\u003e toDeleteEntry \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        for (Entry entry: entryList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            if (entry.isRelatedTo(person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                toDeleteEntry.add(entry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        for (Entry entry: toDeleteEntry) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            entry.removeContact(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Checks whether there is a certain entry in journal."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param toCheck Entry that needs to be checked."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @return True if the entry is inside the journal, false otherwise."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean hasEntry(Entry toCheck) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this.entryList.contains(toCheck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Resets the current journal with new data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param newData Journal that is used to overwrite."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void resetData(ReadOnlyJournal newData) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        setEntries(newData.getEntryList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.entryList.setEntries(entryList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Clear contact list for each entry."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void clearContacts() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        for (Entry entry: entryList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            for (Person person: entry.getContactList()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                entry.removeContact(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return entryList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                || (other instanceof Journal"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 entryList.equals(((Journal) other).entryList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 7,
      "Lingy12": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Update journal regarding to a {@code addressbook}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    void clearJournalContacts();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Replaces journal book data with the data in {@code journal}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    void setJournal(ReadOnlyJournal journal);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Returns the Journal"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    ReadOnlyJournal getJournal();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Returns true if a journal entry with the same identity as {@code entry} exists in the journal."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * {@code entry} must not already exist in the journal."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Delete given entry."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param entry Target entry to delete."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    void deleteEntry(Entry entry);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Returns an unmodifiable view of the filtered journal list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 13,
      "Lingy12": 11,
      "Nauw1010": 26,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private final Journal journal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyJournal journal, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        requireAllNonNull(addressBook, journal, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.journal \u003d new Journal(journal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        filteredEntries \u003d new FilteredList\u003c\u003e(this.journal.getEntryList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this(new AddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        clearJournalContacts();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void clearJournalContacts() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        journal.clearContacts();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public void setJournal(ReadOnlyJournal journal) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.journal.resetData(journal);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public ReadOnlyJournal getJournal() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        journal.removeAssociateEntryContact(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return journal.hasEntry(entry);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        journal.addEntry(entry);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void deleteEntry(Entry entry) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        journal.removeEntry(entry);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Journal} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            \u0026\u0026 filteredEntries.equals(other.filteredEntries);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 18,
      "Lingy12": 15,
      "Nauw1010": 27,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyJournal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public interface ReadOnlyJournal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns an unmodifiable list of the entries."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    ObservableList\u003cEntry\u003e getEntryList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Path getJournalFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Path journalFilePath \u003d Paths.get(\"data\", \"journal.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        setJournalFilePath(newUserPrefs.getJournalFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Path getJournalFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return journalFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void setJournalFilePath(Path journalFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        requireNonNull(journalFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.journalFilePath \u003d journalFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 15,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": " * Represents date for journal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            \"Dates should be in the format such as \\\"2011-12-03 10:15\\\"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String VALID_DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final DateTimeFormatter VALID_FORMATTER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DateTimeFormatter.ofPattern(VALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Creates an instance of date to represent the date of the entry."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param date Event date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Date(LocalDateTime date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.value \u003d date.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates an instance of date from a string to represent the date of the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * entry."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param date Event date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            date \u003d LocalDateTime.now().format(VALID_FORMATTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, VALID_FORMATTER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true if a given string is a parsable date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param test String to be tested on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true if the given string is a parsable date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            LocalDateTime.parse(test, VALID_FORMATTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                || (other instanceof Date \u0026\u0026 ((Date) other).date.equals(date));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return date.format(VALID_FORMATTER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 32,
      "zhXchD": 8,
      "Lingy12": 33,
      "Nauw1010": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * The first character of the address must not be a whitespace and non-letter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-z].*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"This is not a valid description!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static final String EMPTY_MESSAGE \u003d \"No description found!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Creates an instance of description for entry."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param description Description of an entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.description \u003d EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.equals(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \u0026\u0026 ((Description) other).description.equals(description));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 1,
      "zhXchD": 12,
      "Lingy12": 28,
      "Nauw1010": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.ContactNotInListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    // Represents a contact list for a certain event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final UniquePersonList contactList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Creates a new entry."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Entry(Title title, Date date, Description description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                 UniquePersonList contactList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public ObservableList\u003cPerson\u003e getContactList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return contactList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns true if the given entry is the same as the current one."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean isSameEntry(Entry toCheck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        if (toCheck \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return toCheck !\u003d null \u0026\u0026 toCheck.title.equals(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Remove certain contacts from entry (i.e. The contacts list)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void removeContact(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        if (!contactList.contains(person)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new ContactNotInListException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        contactList.remove(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns true if the person is related to this entry."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param person Person needs to check."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @return True if person is in {@code contactList}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean isRelatedTo(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return contactList.contains(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (obj instanceof Entry) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Entry e \u003d (Entry) obj;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            List\u003cPerson\u003e contactListOne \u003d getContactList().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .sorted((personOne, personTwo) -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            personOne.getUuid().toString()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    .compareTo(personTwo.getUuid().toString()))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            List\u003cPerson\u003e contactListTwo \u003d e.getContactList()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .sorted((personOne, personTwo) -\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            personOne.getUuid().toString()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    .compareTo(personTwo.getUuid().toString()))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return e.title.equals(title)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \u0026\u0026 e.date.equals(date)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \u0026\u0026 e.description.equals(description)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \u0026\u0026 contactListOne.equals(contactListTwo)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \u0026\u0026 tags.equals(e.tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .append(\" Date and time: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                .append(\" Contacts: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 20,
      "jazerler": 17,
      "zhXchD": 22,
      "Lingy12": 62,
      "Nauw1010": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * The first character of the address must not be a whitespace and non-letter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-z].*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Creates an instance of title for entry."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param title Title of the entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Title"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 ((Title) other).title.equals(title));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "zhXchD": 4,
      "Lingy12": 32,
      "Nauw1010": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getTitle().toString(), keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/UniqueEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns true if there is a same entry in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns an observable and unmodified list of the entries."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Adds an entry to the entry list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param entry Entry that will be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void add(Entry entry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        if (contains(entry)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        internalList.add(entry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Removes an entry from entry list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param entry Entry that will be removed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void remove(Entry entry) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        if (!internalList.remove(entry)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e replacement) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.internalList.setAll(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                || (other instanceof UniqueEntryList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \u0026\u0026 ((UniqueEntryList) other).internalList.equals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                internalList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 10,
      "Lingy12": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/exceptions/ContactNotInListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class ContactNotInListException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public ContactNotInListException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        super(\"This contact is not inside the contact list\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        super(\"You can not add a duplicate entry\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/journal/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        super(\"Cannot find the entry\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Address EMPTY_ADDRESS \u003d new Address();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private Address() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        value \u003d \"No address information found!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 6,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static final String EMPTY_MESSAGE \u003d \"No email found!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Email EMPTY_EMAIL \u003d new Email(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.equals(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final UUID uuid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates an instance of Person object with a predefined UUID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name of the Person."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param phone of the Person."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param email of the Person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param address of the Person."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tags of the Person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param uuid of the Person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                  Set\u003cTag\u003e tags, UUID uuid) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        requireAllNonNull(name, uuid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public UUID getUuid() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return uuid;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \u0026\u0026 otherPerson.getUuid().equals(getUuid());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 21,
      "Lingy12": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final Phone EMPTY_PHONE \u003d new Phone(Phone.EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static final String EMPTY_MESSAGE \u003d \"No phone number found!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.equals(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \u0026\u0026 ((UniquePersonList) other).internalList.equals("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 4,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"friends\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"e26616c9-c740-4d86-861e-733a4d377a3e\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"f73eaee6-a320-4005-b09c-98450d1ef661\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"neighbours\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"623afedd-5f71-4130-8ed3-7ebc0969d776\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(\"David Li\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"family\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"5f5df00a-60f6-43ad-aad5-77b17847c20a\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"classmates\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"3f40a181-8153-4616-a69a-3362664f5a50\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Person("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTagSet(\"colleagues\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UUID.fromString(\"bfac8b18-3103-43a3-bd98-3de9d3375655\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public static Entry[] getSampleEntries() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Title(\"Sample Journal 1\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Date(LocalDateTime.of(2020, 10, 10, 10, 10)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Description(\"Sample Journal 1\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    new UniquePersonList(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    getTagSet(\"10\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Title(\"Sample Journal 2\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Date(LocalDateTime.of(1990, 1, 1, 0, 0)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Description(\"Sample Journal 2\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    new UniquePersonList(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    getTagSet(\"11\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Title(\"A Big Event\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Date(LocalDateTime.of(2000, 1, 1, 0, 0)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Description(\"A Big Event\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    new UniquePersonList(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    getTagSet(\"event\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Title(\"Meeting\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Date(LocalDateTime.of(2500, 12, 31, 23, 59)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    new Description(\"I need to meet someone.\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    new UniquePersonList(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    getTagSet(\"meeting\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public static ReadOnlyJournal getSampleJournal() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        Journal sampleJournal \u003d new Journal();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        for (Entry sampleEntry : getSampleEntries()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            sampleJournal.addEntry(sampleEntry);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return sampleJournal;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 54,
      "jazerler": 8,
      "Nauw1010": 29,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the file path of the address book data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 11,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JournalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public interface JournalStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the file path of the journal data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Path getJournalFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns Journal data as a {@link ReadOnlyJournal}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param addressBook the address book of the journal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyJournal\u003e readJournal(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @see #getJournalFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyJournal\u003e readJournal("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path filePath"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Saves the given {@link ReadOnlyJournal} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param journal cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    void saveJournal(ReadOnlyJournal journal) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @see #saveJournal(ReadOnlyJournal)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    void saveJournal(ReadOnlyJournal journal, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Jackson-friendly version of {@link Entry}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final List\u003cString\u003e contactList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    // TODO: Add representation of UniquePersonList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // TODO: Add tags to tagList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonAdaptedEntry("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"contactList\") List\u003cString\u003e contactList,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (Person person : source.getContactList()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            contactList.add(person.getUuid().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Entry} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param addressBook to create contact lists."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * in the adapted person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Entry toModelType(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Title.class.getSimpleName()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Date.class.getSimpleName()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Description.class.getSimpleName()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        UniquePersonList modelPersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        addressBook.getPersonList()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .filter("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        person -\u003e contactList.stream()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                .map(UUID::fromString)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                .anyMatch(uuid -\u003e person.getUuid().equals(uuid))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .forEach(modelPersonList::add);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Entry("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelTitle,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelDate,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelDescription,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                modelPersonList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelTags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 139,
      "jazerler": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String uuid;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonAdaptedPerson("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"uuid\") String uuid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        uuid \u003d source.getUuid().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Person} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * in the adapted person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Name.class.getSimpleName()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Phone.class.getSimpleName()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Email.class.getSimpleName()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Address.class.getSimpleName()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final UUID modelUuid \u003d UUID.fromString(uuid);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelName,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelPhone,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelEmail,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelAddress,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelTags,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                modelUuid"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 52,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Logger logger \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.info("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Illegal values found in \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + filePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \": \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ive.getMessage()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 16,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonJournalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * A class to access Journal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class JsonJournalStorage implements JournalStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Logger logger \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            LogsCenter.getLogger(JsonJournalStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonJournalStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Path getJournalFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyJournal\u003e readJournal("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook addressBook) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return readJournal(addressBook, filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Similar to {@link #readJournal(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyJournal\u003e readJournal("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path filePath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Optional\u003cJsonSerializableJournal\u003e jsonJournal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                filePath, JsonSerializableJournal.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (jsonJournal.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return Optional.of(jsonJournal.get().toModelType(addressBook));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logger.info("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Illegal values found in \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + filePath"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \": \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ive.getMessage()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveJournal(ReadOnlyJournal journal) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        saveJournal(journal, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Similar to {@link #saveJournal(ReadOnlyJournal)}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveJournal(ReadOnlyJournal journal, Path filePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        requireNonNull(journal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableJournal(journal), filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonSerializableAddressBook("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        persons.addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                source"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .getPersonList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 14,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableJournal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * An Immutable Journal that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "@JsonRootName(value \u003d \"journal\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class JsonSerializableJournal {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"Entries list contains duplicate entry/entries.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a {@code JsonSerializableJournal} with the given persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonSerializableJournal("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            @JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.entries.addAll(entries);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts a given {@code ReadOnlyJournal} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code JsonSerializableJournal}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public JsonSerializableJournal(ReadOnlyJournal source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        entries.addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                source"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .getEntryList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .map(JsonAdaptedEntry::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Journal} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param addressBook to create contact lists."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Journal toModelType(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Journal journal \u003d new Journal();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (JsonAdaptedEntry jsonAdaptedEntry : entries) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Entry entry \u003d jsonAdaptedEntry.toModelType(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (journal.hasEntry(entry)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            journal.addEntry(entry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public interface Storage extends"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AddressBookStorage, JournalStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Path getJournalFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    Optional\u003cReadOnlyJournal\u003e readJournal(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    void saveJournal(ReadOnlyJournal journal) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Logger logger \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final JournalStorage journalStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Creates a {@code StorageManager} with the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code AddressBookStorage}, {@code UserPrefStorage} and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code JournalStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public StorageManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JournalStorage journalStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UserPrefsStorage userPrefsStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.journalStorage \u003d journalStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.fine(\"Attempting to read addressBook data from file: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        saveAddressBook(addressBook,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.fine(\"Attempting to write to addressBook data file: \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Journal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Path getJournalFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return journalStorage.getJournalFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyJournal\u003e readJournal("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook addressBook"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return readJournal(addressBook, journalStorage.getJournalFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Optional\u003cReadOnlyJournal\u003e readJournal("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path filePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.fine(\"Attempting to read journal data from file: \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return journalStorage.readJournal(addressBook, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveJournal(ReadOnlyJournal journal) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        saveJournal(journal, journalStorage.getJournalFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void saveJournal(ReadOnlyJournal journal, Path filePath)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        logger.fine(\"Attempting to write to journal data file: \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        journalStorage.saveJournal(journal, filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 68,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " * An UI component that displays information of a {@code Entry} briefly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "public class EntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Creates a {@code JournalCard} with the given {@code Entry} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        title.setText(entry.getTitle().title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        date.setText(entry.getDate().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        entry.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 8,
      "Nauw1010": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryContent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import com.jfoenix.controls.JFXTextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " * An UI component that displays information of a {@code Entry} in detail."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "public class EntryContent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private static final String FXML \u003d \"EntryContent.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Entry entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private VBox entryPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private StackPane titlePane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Text title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private JFXTextArea description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Creates a {@code EntryContent} containing no {@code Entry} temporarily."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public EntryContent() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.entry \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        setDefaultContent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private void setDefaultContent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        title.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        description.setText(\"Please select a Journal Entry...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private void setContent(Entry entry) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        title.setText(entry.getTitle().title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        description.setText(entry.getDescription().description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Updates the information of a nullable {@code Entry}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * If entry is null, the content will be reset to default."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * @param entry the new entry"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public void setEntryContentToUser(Entry entry) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        if (entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            setDefaultContent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            setContent(entry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public Entry getEntry() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "public class EntryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private static final String FXML \u003d \"EntryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Creates a {@code EntryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public EntryListPanel(ObservableList\u003cEntry\u003e journalList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListView.setItems(journalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    class EntryListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Sets up the listener listen to the changes of selected entry cell and pass the new entry"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * to the {@code EntryContent}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * @param entryContent the EntryContent"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    public void setListenToSelectedChangesAndPassToEntryContent(EntryContent entryContent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListView.getSelectionModel().selectedItemProperty().addListener((observableValue, prev, curr) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            entryContent.setEntryContentToUser(curr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w17-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private EntryListPanel entryListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private EntryContent entryContent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Tab addressBookTab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private Tab journalTab;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private StackPane entryListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private StackPane entryContentPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListPanel \u003d new EntryListPanel(logic.getFilteredEntryList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryContent \u003d new EntryContent();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryContentPlaceholder.getChildren().add(entryContent.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     * Configures all the listeners."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    void configureListener() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryListPanel.setListenToSelectedChangesAndPassToEntryContent(entryContent);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (!commandResult.isSameTab()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                if (commandResult.isSwitch()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    handleSwapTabs();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                } else if (commandResult.isAddressBookTab()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    handleSwitchToAddressbookTab();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    handleSwitchToJournalTab();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            if (commandResult.isViewingJournal()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                handleViewingJournal();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            if (commandResult.isCleaningJournalView()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                handleCleaningJournalView();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private void handleSwitchToAddressbookTab() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        selectionModel.select(addressBookTab);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private void handleSwitchToJournalTab() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        selectionModel.select(journalTab);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private void handleSwapTabs() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        int selected \u003d selectionModel.getSelectedIndex();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        selectionModel.select(1 - selected);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private void handleViewingJournal() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryContent.setEntryContentToUser(logic.getFilteredEntryList().get(0));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    private void handleCleaningJournalView() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        entryContent.setEntryContentToUser(null);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 29,
      "Nauw1010": 46,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            mainWindow.configureListener();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 1,
      "-": 89
    }
  },
  {
    "path": "src/main/resources/view/EntryContent.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003cVBox fx:id\u003d\"entryPane\" prefWidth\u003d\"500.0\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cStackPane fx:id\u003d\"titlePane\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003cText fx:id\u003d\"title\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-title\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cJFXTextArea fx:id\u003d\"description\" editable\u003d\"false\" styleClass\u003d\"label-bright\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003c/JFXTextArea\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 28
    }
  },
  {
    "path": "src/main/resources/view/EntryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 34
    }
  },
  {
    "path": "src/main/resources/view/EntryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nauw1010": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"IntelliJournal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003cJFXTabPane fx:id\u003d\"tabPane\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003cTab fx:id\u003d\"addressBookTab\" text\u003d\"AddressBook\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003cTab fx:id\u003d\"journalTab\" text\u003d\"Journal\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                                \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" prefWidth\u003d\"250.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"entryContentPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003c/JFXTabPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 1,
      "Nauw1010": 31,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should parse successfully if config path is valid\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return AppParameters without config path if \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"config path is null\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return AppParameters with config path as null if\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" config path is invalid\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            expected.setConfigPath(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 11,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Config defaultConfig;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Config otherConfig;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private void beforeEach() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        otherConfig \u003d new Config();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toString method\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToString {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return string of default config\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(defaultConfigAsString, defaultConfig.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return string of alternate config\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toString_altObject_stringReturned() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String otherConfigAsString \u003d \"Current log level : FINE\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"Preference file Location : different.json\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setUserPrefsFilePath(Paths.get(\"different.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(otherConfigAsString, otherConfig.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should equals itself\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_self_true() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should equals config with same log level and userprefs \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"filepath\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameLogLevelAndUserPrefsFilePath_true() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(defaultConfig.equals(otherConfig));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not equal config with different log level\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentLogLevel_true() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(defaultConfig.equals(otherConfig));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not equal config with different userprefs \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"filepath\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentUserPrefsFilePath_true() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            otherConfig.setUserPrefsFilePath(Paths.get(\"different.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(defaultConfig.equals(otherConfig));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 61,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parsing string to version\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class VersionParse {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should parse correctly\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException when not a version \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"string\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String versionString,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                int major,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                int minor,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                int patch,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                boolean isEarlyAccess"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(new Version(major, minor, patch, isEarlyAccess),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Version.fromString(versionString));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"Version constructor\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should construct Version with correct parameters\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(version.isEarlyAccess());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toString method\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToString {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return valid string representations\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            // boundary at 0"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // normal values"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // big numbers"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"compareTo method\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Compare {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Version one;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Version another;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have earlier patch come first\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void versionComparable_differentPatches_compareToIsCorrect() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003e 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have earlier minor come first\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void compareTo_differentMinors_compareToIsCorrect() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003e 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have earlier major come first\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void compareTo_differentMajors_compareToIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003c 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have earlier major versions come first regardless \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"of minor versions\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void compareTo_differentMajorAndMinors_compareToIsCorrect() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003c 0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have earlier minor versions come first regardless \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"of patch versions\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void compareTo_differentMinorAndPatches_compareToIsCorrect() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003e 0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should have early access versions come first\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void compareTo_differentEarlyAccessState_compareToIsCorrect() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(another.compareTo(one) \u003e 0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should be equal if versions are equal\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void versionComparable_equalVersions_compareToIsCorrect() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"hashCode method\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class HashCode {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate correct hashcode\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void hashCode_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Version one \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(100100100, one.hashCode());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            one \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(1010010010, one.hashCode());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should be equal if version is same\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Version one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Version another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 97,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"one based index\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class OneBased {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IndexOutOfBoundsException if index out of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"bounds\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromOneBased_invalidIndex_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Index.fromOneBased(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Index.fromOneBased(-4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should be equal if same base used\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromOneBased_sameBase_sameInteger() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should convert from one-based index to zero-based index\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromOneBased_convert_oneLessInteger() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"zero based index\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ZeroBased {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IndexOutOfBoundsException if index out of \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"bounds\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromZeroBased_invalidIndex_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Index.fromOneBased(-4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should be equal if same base used\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromZeroBased_sameBase_sameInteger() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(1, Index.fromZeroBased(1).getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should convert from zero-based index to one-based index\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void fromZeroBased_convert_oneLessInteger() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(2, Index.fromZeroBased(1).getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for same value\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValue_true() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if object is not Index\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_notIndex_false() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different index\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentIndex_false() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(fifthPersonIndex.equals(Index.fromOneBased(3)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if object is null\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 66,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getImage method\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetImage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate Image object\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if image not found\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            AppUtil.getImage(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"checkArgument method\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class CheckArgument {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not do anything if arguments are valid\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if arguments are \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                \"should throw IllegalArgumentException with error message if\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        + \" arguments are invalid\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 24,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"requireAllNonNull method\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class RequireAllNonNull {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not throw NullPointerException if arguments not \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void requireAllNonNull_nonNullArgs_nothing() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            // no arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            // any non-empty argument list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if any argument has \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void requireAllNonNull_nullArgs_throwNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            // null reference"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not throw NullPointerException if only \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"collection not containing null is passed as argument\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void requireAllNonNull_collectionWithoutNull_nothing() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionNotThrown(Arrays.asList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"ham\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Integer.valueOf(1)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionNotThrown(Arrays.asList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    containingNull,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if only collection \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"containing null is passed as argument\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void requireAllNonNull_collectionWithNull_throwNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // lists containing nulls in the front"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // lists containing nulls in the middle"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"spam\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"spam\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"eggs\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // lists containing nulls at the end"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"spam\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Object(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            // null reference"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isAnyNonNull method\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsAnyNonNull {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if any element is not null\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isAnyNonNull_anyNotNull_true() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(CollectionUtil.isAnyNonNull(null, new Object()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if all elements are null\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isAnyNonNull_allNull_false() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(CollectionUtil.isAnyNonNull(null, null, null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 82,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"readConfig method\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ReadConfig {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if path is null\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return empty Optional if file does not exist in \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"path\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void read_missingFile_emptyResult()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if json is not in \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"proper format\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should read config successfully\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void read_fileInOrder_successfullyRead()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should use default config if config found is empty\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void read_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should ignore extra values found in config\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void read_extraValuesInFile_extraValuesIgnored()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Optional\u003cConfig\u003e read(String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path configFilePath \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"saveConfig method\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SaveConfig {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path tempDir;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if config is null\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if config filepath is \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    save(new Config(), null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should save config in proper order\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveConfig_allInOrder_success()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            //Try saving when the file exists"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, readBack);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void save(Config config, String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path configFilePath \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 51,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidPath method\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidPath {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if path is valid\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPath_validPath_true() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if path is invalid\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPath_invalidPath_false() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if argument is null\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPath_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"serializeObjectToJsonFile method\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SerializeObjectToJsonFile {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should create a proper json file\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void serializeObjectToJsonFile_noExceptionThrown()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new SerializableTestClass();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonUtil.serializeObjectToJsonFile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SerializableTestClass.JSON_STRING_REPRESENTATION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"deserializeObjectFromJsonFile method\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class DeserializeObjectFromJsonFile {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should deserialize object from json file\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void deserializeObjectFromJsonFile_noExceptionThrown()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            FileUtil.writeToFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SerializableTestClass.JSON_STRING_REPRESENTATION"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            SerializableTestClass.class"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    serializableTestClass.getName(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SerializableTestClass.getNameTestValue()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SerializableTestClass.getListTestValues()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SerializableTestClass.getHashMapTestValues()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 46,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isNonZeroUnsignedInteger method\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsNonZeroUnsignedInteger {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for non numbers\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_nonNumber_false() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for 0\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_zero_false() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for signed numbers\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_signedNumbers_false() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for number larger than \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"Integer.MAX_VALUE\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_numberLargerThanMaxValue_false() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for numbers with white space\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_whiteSpaceNumbers_false() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for empty strings\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_emptyStrings_false() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for valid numbers\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_validNumbers_true() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for valid numbers with zero prefix\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isNonZeroUnsignedInteger_zeroPrefixValidNumbers_true() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.isNonZeroUnsignedInteger(\"09123\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"containsWordIgnoreCase method\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ContainsWordIgnoreCase {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if word is null\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(\"typical sentence\", null)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if no word passed\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" in\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalArgumentException.class,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Word parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if multiple words\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" are passed in\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalArgumentException.class,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Word parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"typical sentence\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"aaa BBB\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            ));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if sentence is null\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - any word"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - empty string"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - one word"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - multiple words"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - sentence with extra spaces"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Possible scenarios returning true:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - matches first word in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - last word in sentence"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - middle word in sentence"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - matches multiple words"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Possible scenarios returning false:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * The test method below tries to verify all above with a reasonably"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * low number of test cases."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if empty string\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void containsWordIgnoreCase_emptyString_false() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"abc\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Boundary case"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if partial word included\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void containsWordIgnoreCase_partialWord_false() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            // Matches a partial word only"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa bbb ccc\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"bb\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa bbb ccc\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"bbbb\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if word found regardless of case\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void containsWordIgnoreCase_differentCaseWord_true() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa bBb ccc\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Bbb\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // First word (boundary case)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa bBb ccc@1\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"CCc@1\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Last word (boundary case)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"  AAA   bBb   ccc  \","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Sentence has extra spaces"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Aaa\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aaa bbb ccc\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"  ccc  \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )); // Leading/trailing spaces"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // Matches multiple words in sentence"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"AAA bBb ccc  bbb\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"bbB\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getDetails method\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetDetails {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should get string representation of exception\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void getDetails_exceptionGiven_stringRepresentation() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    StringUtil.getDetails("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new FileNotFoundException(\"file not found\")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .contains(\"java.io.FileNotFoundException: \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    + \"file not found\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if argument is null\")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 133,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.storage.JsonJournalStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path temporaryFolder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonAddressBookStorage("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonJournalStorage journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"journal.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBookStorage,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    journalStorage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefsStorage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Executes the command and confirms that"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertCommandSuccess("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String inputCommand,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String expectedMessage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Model expectedModel"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Executes the command, confirms that a ParseException is thrown and that"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * the result message is correct."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertParseException("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Executes the command, confirms that a CommandException is thrown and that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * the result message is correct."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertCommandException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Executes the command, confirms that the exception is thrown and that the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertCommandFailure("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String inputCommand,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String expectedMessage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    inputCommand,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedException,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Executes the command and confirms that"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertCommandFailure("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String inputCommand,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String expectedMessage,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Model expectedModel"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(expectedException, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if command format is invalid\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if index passed into command is \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            String deleteCommand \u003d \"deletec 9\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandException("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    deleteCommand,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_INVALID_PERSON_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should execute a valid command successfully\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            String listCommand \u003d ListContactCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    listCommand,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw command exception if storage throws an \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"IOException\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            temporaryFolder.resolve("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonJournalStorage journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"ioExceptionJournal.json\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBookStorage,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    journalStorage,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefsStorage"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logic \u003d new LogicManager(model, storage, uuid);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // Execute add command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String addCommand \u003d AddContactCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + NAME_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                    + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person expectedPerson \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(AMY).withTags().build(uuid);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addCommand,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    CommandException.class,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getFilteredPersonList method\")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetFilteredPersonList {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path temporaryFolder;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonAddressBookStorage("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonJournalStorage journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"journal.json\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBookStorage,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    journalStorage,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefsStorage"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException if the \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"readonly list is modified\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * called."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveAddressBook("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Path filePath"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) throws IOException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 172,
      "zhXchD": 5,
      "Nauw1010": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * {@code AddContactCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully add new person\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(validPerson),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw CommandException if a duplicate person is \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"added\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(personInList),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    AddContactCommand.MESSAGE_DUPLICATE_PERSON"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 26,
      "zhXchD": 1,
      "Nauw1010": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if null person is \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"passed into constructor\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should add person successfully if person is valid\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void execute_personAcceptedByModel_addSuccessful()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ModelStubAcceptingPersonAdded modelStub \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw CommandException if person is already in \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"the list\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddContactCommand addCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    CommandException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            addCommand.execute(modelStub)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different values\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentValues_false() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different person\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void clearJournalContacts() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        public void setJournal(ReadOnlyJournal newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        public ReadOnlyJournal getJournal() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void deleteEntry(Entry entry) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 60,
      "zhXchD": 17,
      "Lingy12": 10,
      "Nauw1010": 17,
      "-": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddJournalEntryCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OCTOBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * {@code AddJournalEntryCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddJournalEntryCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        model.addEntry("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                new EntryBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        .withTitle(VALID_TITLE_MEETING)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        .withDate(VALID_DATE_OCTOBER)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_STORY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @DisplayName(\"execute\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should successfully add new entry\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void execute_newEntry_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    model.getAddressBook(), model.getJournal(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            expectedModel.addEntry(validEntry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommand(validEntry),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String.format(AddJournalEntryCommand.MESSAGE_SUCCESS, validEntry),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should throw CommandException if a duplicate entry is \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \"added\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void execute_duplicateEntry_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Entry entryInList \u003d model.getJournal().getEntryList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommand(entryInList),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    AddJournalEntryCommand.MESSAGE_DUPLICATE_ENTRY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddJournalEntryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "class AddJournalEntryCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if null entry is \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \"passed into constructor\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should add entry successfully if entry is valid\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void execute_entryAcceptedByModel_addSuccessful()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddJournalEntryCommandTest.ModelStubAcceptingEntryAdded modelStub \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommandTest.ModelStubAcceptingEntryAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommand(validEntry).execute(modelStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String.format(AddJournalEntryCommand.MESSAGE_SUCCESS, validEntry),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertEquals(Arrays.asList(validEntry), modelStub.entriesAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should throw CommandException if entry is already in \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \"the list\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void execute_duplicateEntry_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddJournalEntryCommand addCommand \u003d new AddJournalEntryCommand(validEntry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddJournalEntryCommandTest.ModelStub modelStub \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommandTest.ModelStubWithEntry(validEntry);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    CommandException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    AddJournalEntryCommand.MESSAGE_DUPLICATE_ENTRY, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            addCommand.execute(modelStub)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private Entry meeting \u003d new EntryBuilder().withTitle(\"Meeting\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private Entry discussion \u003d new EntryBuilder().withTitle(\"Discussion\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private AddJournalEntryCommand addMeetingCommand \u003d new AddJournalEntryCommand(meeting);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private AddJournalEntryCommand addDiscussionCommand \u003d new AddJournalEntryCommand(discussion);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddJournalEntryCommand addMeetingCommandCopy \u003d new AddJournalEntryCommand(meeting);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should return false if different values\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void equals_differentValues_false() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should return false if different entry\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertFalse(addMeetingCommand.equals(addDiscussionCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void clearJournalContacts() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setJournal(ReadOnlyJournal newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ReadOnlyJournal getJournal() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void deleteEntry(Entry entry) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * A Model stub that contains a single entry."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private class ModelStubWithEntry extends AddJournalEntryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private final Entry entry;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ModelStubWithEntry(Entry entry) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.entry \u003d entry;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return this.entry.isSameEntry(entry);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * A Model stub that always accept the entry being added."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private class ModelStubAcceptingEntryAdded extends AddJournalEntryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        final ArrayList\u003cEntry\u003e entriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return entriesAdded.stream().anyMatch(entry::isSameEntry);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            entriesAdded.add(entry);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 267,
      "Lingy12": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearAddressBookCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ClearAddressBookCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully clear empty address book\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new ClearAddressBookCommand(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ClearAddressBookCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully clear non-empty address book\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTypicalAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new UserPrefs()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTypicalAddressBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new UserPrefs()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new ClearAddressBookCommand(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ClearAddressBookCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 26,
      "zhXchD": 5,
      "Nauw1010": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for the same values\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.equals("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new CommandResult("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"feedback\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for same object\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for null\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different type object\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for command result with different \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"values\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentValues_false() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different help value\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentHelpValue_false() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.equals("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new CommandResult("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"feedback\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    true,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different exit value\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentExitValue_false() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.equals("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new CommandResult("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"feedback\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"hashCode method\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class HashCode {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return same hashcode if values are same\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void hashCode_sameValues_sameHashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.hashCode(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new CommandResult(\"feedback\").hashCode()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return different hashcode if values are different\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void hashCode_differentValues_differentHashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNotEquals("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.hashCode(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new CommandResult(\"different\").hashCode()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return different hashcode if help values are \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"different\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void hashCode_differentHelpValue_differentHashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNotEquals("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.hashCode(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new CommandResult(\"feedback\", true, false).hashCode()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return different hashcode if exit values are \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"different\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void hashCode_differentExitValue_differentHashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNotEquals("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    commandResult.hashCode(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new CommandResult(\"feedback\", false, true).hashCode()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 97,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String VALID_DATE_OCTOBER \u003d \"2020-10-10 10:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String VALID_TITLE_MEETING \u003d \"Meeting\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String VALID_DESCRIPTION_STORY \u003d \"Brainstorm user stories\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String DATE_DESC_OCTOBER \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \" \" + PREFIX_DATE_AND_TIME + VALID_DATE_OCTOBER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String TITLE_DESC_MEETING \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \" \" + PREFIX_NAME + VALID_TITLE_MEETING;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String DESCRIPTION_DESC_STORY \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_STORY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            \" \" + PREFIX_DATE_AND_TIME + \"2020/10/10 10:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * - the returned {@link CommandResult} matches"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * - the address book, filtered person list and selected person in"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        // we can only do so by copying its components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                actualModel.getAddressBook());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                command.execute(actualModel));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * given {@code targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                targetIndex.getZeroBased()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \u003c model.getFilteredPersonList().size()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Person person \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        final String[] splitName \u003d person.getName()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        model.updateFilteredPersonList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 91,
      "zhXchD": 13,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * RedoCommand) and unit tests for {@code DeleteContactCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should delete successfully from an unfiltered list if \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"index is valid\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person personToDelete \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    personToDelete, \" None\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Journal(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new UserPrefs()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    deleteContactCommand,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw CommandException if the index given is \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid in the unfiltered list\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Index outOfBoundIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    deleteContactCommand,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should delete successfully from a filtered list if \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"index is valid\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person personToDelete \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    personToDelete,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    \" None\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new UserPrefs()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    deleteContactCommand,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw CommandException if index is invalid in a \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"filtered list\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \u003c model.getAddressBook()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .getPersonList()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .size()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    deleteContactCommand,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private final DeleteContactCommand deleteFirstCommand \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        private final DeleteContactCommand deleteSecondCommand \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                new DeleteContactCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different type\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different person\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 90,
      "zhXchD": 22,
      "Nauw1010": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new Journal(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should edit person successfully in unfiltered list\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person originalPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build(originalPerson.getUuid());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editedPerson"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Journal(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new UserPrefs()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            expectedModel.setPerson(originalPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit person with only certain \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"fields specified\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Index indexLastPerson \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person lastPerson \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build(lastPerson.getUuid());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editedPerson"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Journal(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new UserPrefs()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit person with no field specified\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" in unfiltered list\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptor()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedPerson \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editedPerson"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Journal(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new UserPrefs()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit a person in a filtered list\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person personInFilteredList \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedPerson \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build(personInFilteredList.getUuid());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editedPerson"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Model expectedModel \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Journal(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new UserPrefs()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            expectedModel.setPerson("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getFilteredPersonList().get(0),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editedPerson"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not edit a person if the person is a duplicate\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_DUPLICATE_PERSON"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not edit a person if the person is a duplicate \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"in a filtered list\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person personInList \u003d model.getAddressBook()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .getPersonList()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder(personInList).build()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.MESSAGE_DUPLICATE_PERSON"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not edit a person if the index is invalid in the\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" unfiltered list\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Index outOfBoundIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "         * but smaller than size of address book"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not edit a person if the index is invalid in the\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" filtered list\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .getPersonList()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .size());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    outOfBoundIndex,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build()"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandFailure("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    editCommand,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final EditCommand standardCommand \u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if values are equal\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValue_true() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different types\")"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentTypes_false() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertFalse(standardCommand.equals(new ClearAddressBookCommand()));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if index is different\")"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentIndex_false() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse("
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    standardCommand.equals("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new EditCommand("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    DESC_AMY"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if descriptor is different\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentDescriptor_false() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse("
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    standardCommand.equals("
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new EditCommand("
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    DESC_BOB"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 243,
      "zhXchD": 1,
      "Nauw1010": 1,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private EditPersonDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new EditPersonDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for same object\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for null\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different types\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different values\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentValues_false() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different name\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentName_false() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different phone\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPhone_false() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different email\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentEmail_false() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different address\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentAddress_false() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different tags\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentTags_false() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 57,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should execute exit successfully\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_exit_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ExitCommand(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedCommandResult,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 20,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final FindCommand findFirstCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final FindCommand findSecondCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different types\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentTypes_false() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different person\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not find any person without keywords\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    command,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Collections.emptyList(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getFilteredPersonList()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should find multiple persons with multiple keywords\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    command,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Arrays.asList(CARL, ELLE, FIONA),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model.getFilteredPersonList()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 78,
      "Nauw1010": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should execute help command successfully\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_help_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new HelpCommand(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedCommandResult,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * ListContactCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauw1010"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new Journal(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"execute method\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Execute {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should show same list if list is not filtered\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new ListContactCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should show full list if list is filtered\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertCommandSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new ListContactCommand(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedModel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "zhXchD": 6,
      "Nauw1010": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final AddContactCommandParser parser \u003d new AddContactCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should add person successfully if all required fields \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"are present\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddContactCommandParser parser \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommandParser(uuid);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person expectedPerson \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build(uuid);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // whitespace only preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple names - last name accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple emails - last email accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple tags - all accepted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            VALID_TAG_HUSBAND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build(uuid);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPersonMultipleTags)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should add person successfully even if optional fields \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"are missing\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddContactCommandParser parser \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommandParser(uuid);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            // zero tags"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person expectedPerson \u003d new PersonBuilder(AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build(uuid);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddContactCommand(expectedPerson)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should fail to add person if compulsory fields are \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"missing\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    AddContactCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            // missing name prefix"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // all prefixes missing"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // missing phone prefix"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // assertParseFailure(parser,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //                + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        expectedMessage"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            // missing email prefix"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // assertParseFailure(parser,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //                + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        expectedMessage"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // );"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // missing address prefix"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // assertParseFailure(parser,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //                + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            //        expectedMessage"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // );"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should no add person if there are invalid values in the\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" input\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid name"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid phone"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid email"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Email.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid address"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Address.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid tag"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // non-empty preamble"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            AddContactCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 147,
      "zhXchD": 22,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddJournalEntryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_OCTOBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OCTOBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STORY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddJournalEntryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class AddJournalEntryCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private AddJournalEntryCommandParser parser \u003d new AddJournalEntryCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should add entry successfully if all required fields \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \"are present\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Entry expectedEntry \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .withTitle(VALID_TITLE_MEETING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .withDate(VALID_DATE_OCTOBER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .withDescription(VALID_DESCRIPTION_STORY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    PREAMBLE_WHITESPACE + TITLE_DESC_MEETING"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            + DATE_DESC_OCTOBER + DESCRIPTION_DESC_STORY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new AddJournalEntryCommand(expectedEntry)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should fail to add entry if compulsory fields are \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \"missing\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    AddJournalEntryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // missing title prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    VALID_TITLE_MEETING + DATE_DESC_OCTOBER + DESCRIPTION_DESC_STORY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // missing date prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // assertParseFailure(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // TITLE_DESC_MEETING + VALID_DATE_OCTOBER + DESCRIPTION_DESC_STORY,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // expectedMessage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // missing description prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // assertParseFailure(parser,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // TITLE_DESC_MEETING + DATE_DESC_OCTOBER + VALID_DESCRIPTION_STORY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // expectedMessage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // all prefixes missing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    VALID_TITLE_MEETING + VALID_DATE_OCTOBER + VALID_DESCRIPTION_STORY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should no add person if there are invalid values in the\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \" input\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // invalid date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    TITLE_DESC_MEETING + INVALID_DATE_DESC + DESCRIPTION_DESC_STORY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    Date.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            // non-empty preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    PREAMBLE_NON_EMPTY + TITLE_DESC_MEETING + DATE_DESC_OCTOBER"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            + DESCRIPTION_DESC_STORY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            AddJournalEntryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ClearAddressBookCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseCommand method\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseCommand {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate AddContactCommand object from appropriate add \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"person input\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            AddressBookParser parser \u003d new AddressBookParser(uuid);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person person \u003d new PersonBuilder().build(uuid);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddContactCommand command \u003d (AddContactCommand) parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should generate ClearAddressBookCommand object from appropriate \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"clear input\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertTrue(parser.parseCommand(ClearAddressBookCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    instanceof ClearAddressBookCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ClearAddressBookCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    instanceof ClearAddressBookCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should generate DeleteContactCommand object from appropriate \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"delete person input\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    DeleteContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertEquals(new DeleteContactCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate EditCommand object from appropriate \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"edit person input\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand command \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + PersonUtil.getEditPersonDescriptorDetails("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            descriptor));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(INDEX_FIRST_PERSON, descriptor),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate ExitCommand object from appropriate \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"exit input\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ExitCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    instanceof ExitCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate FindCommand object from appropriate \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"find keyword input\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(new FindCommand(new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    keywords)), command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate HelpCommand object from appropriate \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"help input\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    HelpCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    instanceof HelpCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should generate ListContactCommand object from appropriate \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"list input\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    instanceof ListContactCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    ListContactCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    instanceof ListContactCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if input not recognised\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParseException.class,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ), () -\u003e parser.parseCommand(\"\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if input is an unknown \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"command\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 64,
      "zhXchD": 20,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"tokenize method\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Tokenize {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertPreamblePresent("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String expectedPreamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Asserts all the arguments in {@code argMultimap} with {@code prefix}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * match the {@code expectedValues} and only the last value is returned"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Prefix prefix,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String... expectedValues"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // Verify the last value is returned"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedValues[expectedValues.length - 1],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argMultimap.getValue(prefix).get()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedValues.length,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argMultimap.getAllValues(prefix).size()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                assertEquals("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        expectedValues[i],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        argMultimap.getAllValues(prefix).get(i)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void assertArgumentAbsent("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Prefix prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not return any prefixes\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return everything in string as preamble\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return one prefix and preamble\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            // Preamble present"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // No preamble"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return multiple prefixes\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            // Only two arguments are present"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            // All three arguments are present"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            argsString \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertPreamblePresent("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argMultimap,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argsString"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertArgumentPresent("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argMultimap,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    dashT,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"dashT-Value\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"another dashT value\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not return joined arguments as prefixes\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"-t not joined^Qjoined\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertPreamblePresent("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    argMultimap,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"SomePreambleStringp/ pSlash joined-tjoined\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for same object\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for same values\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValue_true() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different types\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false for different values\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentValue_false() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 107,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * successful and the command created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertParseSuccess("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * unsuccessful and the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertParseFailure("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 10,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * variations outside of the DeleteContactCommand code. For example, inputs \"1\" and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * \"1 abc\" take the same path through the DeleteContactCommand, and therefore we test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * only one of them. The path variation for those two cases occur inside the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final DeleteContactCommandParser parser \u003d new DeleteContactCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        @DisplayName(\"should generate DeleteContactCommand from valid user input\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    new DeleteContactCommand(INDEX_FIRST_PERSON)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException from invalid user input\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"a\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            DeleteContactCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 21,
      "zhXchD": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should fail to parse if there are missing fields\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should fail to parse if preamble passed in (the index \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"of the person in list) is invalid\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            // negative index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"-5\" + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // zero index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"0\" + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1 some random string\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should fail to parse if invalid values passed into each \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"field \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Email.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // invalid email"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Address.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ); // invalid tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            // invalid phone followed by valid email"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure(parser,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate EditCommand if all fields are specified\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" in the correct format\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate EditCommand if some fields are \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"specified with valid values\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String userInput \u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate EditCommand with one field specified \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"with a valid value\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // name"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // phone"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            descriptor \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // email"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            descriptor \u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            // address"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            descriptor \u003d new EditPersonDescriptorBuilder().withAddress("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // tags"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            descriptor \u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should accept the last field if there are multiple of \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"the same repeated fields\")"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should take the valid last field even if invalid field \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"is passed in first\")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            // no other valid values specified"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            // other valid values specified"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                    + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            descriptor \u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should reset all tags if just tag prefix is called \""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"without any tags\")"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 165,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parse method\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if no keywords\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseFailure("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"     \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate FindCommand object if arguments are \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"valid\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            FindCommand expectedFindCommand \u003d new FindCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Arrays.asList(\"Alice\", \"Bob\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertParseSuccess("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \" \\n Alice \\n \\t Bob  \\t\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedFindCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 28,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseIndex method\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseIndex {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if input is invalid\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if input is out of range\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully generate index if input is valid\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseName method\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseName {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if name is null\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if name is invalid\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return name if input is valid without whitespace\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseName_validValueWithoutWhitespace_returnsName()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return trimmed name if input is valid with \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"whitespace\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseName_validValueWithWhitespace_returnsTrimmedName()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedName,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseName(nameWithWhitespace)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parsePhone method\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParsePhone {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if phone is null\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if phone is invalid\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return valid phone without whitespace\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parsePhone_validValueWithoutWhitespace_returnsPhone()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return valid phone with whitespace trimmed\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedPhone,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parsePhone(phoneWithWhitespace)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseAddress method\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseAddress {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if address is null\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if value is invalid\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return address if value is valid without \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"whitespace\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseAddress_validValueWithoutWhitespace_returnsAddress()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedAddress,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseAddress(VALID_ADDRESS)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return trimmed address if value is valid with \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"whitespace\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String addressWithWhitespace \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedAddress,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseAddress(addressWithWhitespace)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseEmail method\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseEmail {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if email is null\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if value is invalid\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return email if value is valid without whitespace\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseEmail_validValueWithoutWhitespace_returnsEmail()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return email if value is valid with whitespace\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedEmail,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseEmail(emailWithWhitespace)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseTag method\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseTag {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if value is null\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if value is invalid\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return tag if value is valid without whitespace\")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseTag_validValueWithoutWhitespace_returnsTag()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return trimmed tag if value is valid with \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"whitespace\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseTag_validValueWithWhitespace_returnsTrimmedTag()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"parseTags method\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ParseTags {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if value is null\")"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw ParseException if values are invalid\")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    ParserUtil.parseTags("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Arrays.asList(VALID_TAG_1, INVALID_TAG)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return empty set of tags if collection is empty\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseTags_emptyCollection_returnsEmptySet()"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return tag set if collection has valid tags\")"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parseTags_collectionWithValidTags_returnsTagSet()"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Arrays.asList("
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            VALID_TAG_1,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            VALID_TAG_2"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e("
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Arrays.asList("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Tag(VALID_TAG_1),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Tag(VALID_TAG_2)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 148,
      "-": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should create an empty collection\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"resetData method\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ResetData {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should replace data if address book is valid\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DuplicatePersonException if duplicate \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"persons in list\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            // Two persons with the same identity fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedAlice \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook.resetData(newData));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"hasPerson method\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class HasPerson {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if person not in address book\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if person in address book\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if person with same identity fields \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"in address book\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getPersonList method\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetPersonList {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 41,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/JournalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DEFAULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntries;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalJournal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class JournalTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final Journal journal \u003d new Journal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should create an empty entry list\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void constructor_create_emptyList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(Collections.emptyList(), new Journal().getEntryList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should create journal according to given entry\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void constructor_create_givenData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Journal journal \u003d getTypicalJournal();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            List\u003cEntry\u003e entries \u003d getTypicalEntries();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            for (int i \u003d 0; i \u003c journal.getEntryList().size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                assertEquals(entries.get(i), journal.getEntryList().get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"hasEntry method\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class HasEntry {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw null pointer exception when pass null\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void hasEntry_throw_nullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e journal.hasEntry(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false when entry is not in the journal\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void hasEntry_false_entryNotInList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(journal.hasEntry(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true when the entry is in the journal\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void hasEntry_true_entryInList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(getTypicalJournal().hasEntry(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"getEntryList method\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class GetEntryList {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void getEntryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Assert.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                    journal.getEntryList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"removeAssociateEntryContact method\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class RemoveAssociateEntryContact {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if pass in a null\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void removeAssociateEntryContact_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e journal.removeAssociateEntryContact(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"should remove the entry that associate with the person\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void removeAssociateEntryContact_success_removeTheAssociateEntry() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniquePersonList contactList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            contactList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Entry test \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withContacts("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            contactList"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    .toArray(new Person[0])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            journal.addEntry(test);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            journal.removeAssociateEntryContact(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(test.isRelatedTo(ALICE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 15,
      "Lingy12": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new AddressBook(modelManager.getAddressBook())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setUserPrefs method\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetUserPrefs {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if user prefs is null\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should copy user prefs if user prefs is valid\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            userPrefs.setAddressBookFilePath(Paths.get("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setGuiSettings method\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetGuiSettings {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if gui settings is \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should set gui settings if gui settings is valid\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setAddressBookFilePath method\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetAddressBookFilePath {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if path is null\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should set file path if path is valid\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"hasPerson method\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class HasPerson {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if person is null\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if person not in address book\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if person in address book\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getFilteredPersonList method\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetFilteredPersonList {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException if list is \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"modified from getFilteredPersonList\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"getFilteredEntryList method\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class GetFilteredEntryList {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw UnsupportedOperationException when try to modify the list\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void getFilteredEntryList_modifyList_throwUnsupportedOperationException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                    modelManager.getFilteredEntryList().remove(0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withPerson(ALICE)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withPerson(BENSON)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void beforeEach() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            modelManager \u003d new ModelManager("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefs"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same value\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ModelManager modelManagerCopy \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new ModelManager(addressBook, new Journal(), userPrefs);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(modelManagerCopy, modelManager);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different type\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentTypes_false() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different address book\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentAddressBook_false() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            System.out.println(modelManager);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            System.out.println(new ModelManager(differentAddressBook,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(), userPrefs));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(new ModelManager("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    differentAddressBook,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefs"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            ), modelManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different filtered list\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentFilteredList_false() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            modelManager.updateFilteredPersonList("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(new ModelManager("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefs"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            ), modelManager);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different user prefs\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentUserPrefs_false() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            differentUserPrefs.setAddressBookFilePath(Paths.get("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"differentFilePath\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(new ModelManager("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBook,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Journal(),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    differentUserPrefs"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            ), modelManager);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"DeleteEntry method\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class DeleteEntry {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should delete entry in the list\")"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void deleteEntry_success_removeEntryInModel() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry testEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            modelManager.addEntry(testEntry);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(modelManager.hasEntry(testEntry));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            modelManager.deleteEntry(testEntry);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(modelManager.hasEntry(testEntry));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 115,
      "Lingy12": 35,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setGuiSettings method\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetGuiSettings {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if gui settings is \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setAddressBookFilePath method\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetAddressBookFilePath {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if path is null\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/journal/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        private final Date expectedDate \u003d new Date(LocalDateTime.of(2020, 12, 20, 12, 0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerException for null input\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Create Date instance given a local date time\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_create_fromLocalDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            LocalDateTime localDateTime \u003d LocalDateTime.of(2020, 12, 20, 12, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(expectedDate, new Date(localDateTime));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Create Date instance given a string\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_create_fromString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(expectedDate, new Date(\"2020-12-20 12:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    //TODO: Modify after changing the definition of the valid date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"isValidDate\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class IsValidDate {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerException for null input\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDate_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            //null date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true when enter valid date\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDate_valid_returnTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            //valid date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Date.isValidDate(\"2011-12-03 10:15\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Date.isValidDate(\"2020-12-29 10:15\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false when enter invalid date\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDate_invalid_returnFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            //invalid date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Date.isValidDate(\"2020 12 29 16:00\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Date.isValidDate(\"2020 12 20-19:00\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"toString\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class ToString {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return the string representation of a Date\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void toString_date_stringRepresentation() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Date date \u003d new Date(\"2020-12-29 10:15\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            assertEquals(\"2020-12-29 10:15\", date.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true for the same object\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_sameObj_true() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Date testDate \u003d new Date(\"2020-12-29 10:15\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(testDate.equals(testDate));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 1,
      "Lingy12": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/journal/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public class Constructor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        private Description sampleDescription \u003d new Description(\"Team meeting\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // @DisplayName(\"Should throw nullpointerexception for null input\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // public void constructor_null_thrownullpointerexception() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should create an instance of description\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_success_createDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Description description \u003d new Description(\"Team meeting\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(\"Team meeting\", description.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(sampleDescription, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"isValidDescription\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public class IsValidDescription {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerException for null input\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDescription_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false for empty string\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDescription_empty_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Description.isValidDescription(\"\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Description.isValidDescription(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false if the input do not start with letter\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDescription_notLetter_false() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Description.isValidDescription(\"1team meeting\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Description.isValidDescription(\".interview with google\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true if the input is valid\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidDescription_valid_true() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Description.isValidDescription(\"team meeting\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Description.isValidDescription(\"interview with google\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true for the same object\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_sameObj_true() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Description testDescription \u003d new Description(\"interview with google\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(testDescription.equals(testDescription));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhXchD": 5,
      "Lingy12": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/journal/EntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DEFAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.ContactNotInListException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException if tags are \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                + \"attempted to be removed\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                    entry.getContactList().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"isSameEntry\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class IsSameEntry {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should be true if the same entry\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isSameEntry_sameEntry_true() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(TEST_ENTRY_DEFAULT.isSameEntry(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false if the entry is null\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isSameEntry_null_false() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(TEST_ENTRY_DEFAULT.isSameEntry(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true if the same instance of entry\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_sameInstance_true() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(TEST_ENTRY_DEFAULT.equals(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true if the Entry content is the same\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_sameContent_true() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry testEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(TEST_ENTRY_DEFAULT, testEntry);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false if the content is differnet\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_diffContent_false() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry testEntry \u003d new EntryBuilder().withTitle(\"Decide the product\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertNotEquals(TEST_ENTRY_DEFAULT, testEntry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"removeContact test\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class RemoveContact {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw ContactNotInListException\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void removeContact_notInList_throwContactNotInListException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry testEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(ContactNotInListException.class, () -\u003e testEntry.removeContact(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should remove the contact inside the entry\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void removeContact_success_removeCotactInList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Entry testEntry \u003d new EntryBuilder().withContacts(ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(testEntry.isRelatedTo(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            testEntry.removeContact(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(testEntry.isRelatedTo(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 4,
      "Lingy12": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/journal/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public class Constructor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        private final Title title \u003d new Title(\"Title 1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw nullpointerexception for null input\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_null_thrownullpointerexception() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should create a title instance given a string\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void constructor_success_createsInstance() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(title, new Title(\"Title 1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(\"Title 1\", new Title(\"Title 1\").toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"isValidDescription\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public class IsValidTitle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerException for null input\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidTitle_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false for empty string\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidTitle_empty_false() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Title.isValidTitle(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Title.isValidTitle(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return false if the input do not start with letter\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidTitle_notLetter_false() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Title.isValidTitle(\"1team meeting\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(Title.isValidTitle(\".interview with google\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true if the input is valid\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void isValidTitle_valid_true() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Title.isValidTitle(\"team meeting\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(Title.isValidTitle(\"interview with google\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true for the same object\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        public void equals_sameObj_true() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            Title testTitle \u003d new Title(\"Title 1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(testTitle.equals(testTitle));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lingy12": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/journal/UniqueEntryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.model.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DEFAULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DIFF_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DIFF_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    //TODO: Update UniqueEntryTest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private final UniqueEntryList list \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"contains method\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Contains {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Throw NullPointerException when pass in an null entry\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void contains_nullInput_throwNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e list.contains(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Return true when the entry is in the list\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void contains_containsEntry_returnTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniqueEntryList modifiedList \u003d list;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            modifiedList.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(modifiedList.contains(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Return false when the entry is not in the list\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void contains_notInList_returnFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(list.contains(TEST_ENTRY_DIFF_DESCRIPTION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"asUnmodifiableList method\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class AsUnmodifiableList {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw unsupportedOperationException when modify the list\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void asUnmodifiableList_modify_throwUnsupportedOpertationException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    list.asUnmodifiableObservableList().add(TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"add method\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Add {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw DuplicateEntryException if add a duplicate entry\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void add_addDuplicate_throwDuplicateEntryException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(DuplicateEntryException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                UniqueEntryList list \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerException if try to add a null\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void add_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e list.add(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"remove method\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Remove {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw NullPointerExeption if try to remove a null\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void remove_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e list.remove(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should throw EntryNotFoundException if the entry is not in the list\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void remove_notInList_throwEntryNotFoundException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(EntryNotFoundException.class, () -\u003e list.remove("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    TEST_ENTRY_DEFAULT));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should remove the entry if the entry is in the list\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void remove_inList_removeEntry() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniqueEntryList expectedList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.remove(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(expectedList, list);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"setEntries method\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class SetEntries {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"throw nullPointerException if pass in a null list\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void setEntries_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e list.setEntries(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"set entry according to the list given\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void setEntries_validList_setEntriesSuccess() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            List\u003cEntry\u003e testList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            testList.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            testList.add(TEST_ENTRY_DIFF_TITLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            list.setEntries(testList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniqueEntryList expectedList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            expectedList.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            expectedList.add(TEST_ENTRY_DIFF_TITLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertEquals(expectedList, list);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"iterator method\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Iterator {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Return a interator contains all element in the lsit\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void iterator_contains_allElementsInList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DIFF_DESCRIPTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            for (java.util.Iterator\u003cEntry\u003e it \u003d list.iterator(); it.hasNext(); ) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                Entry e \u003d it.next();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                assertTrue(list.contains(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    @DisplayName(\"Equals method\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        private final UniqueEntryList list \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true when the same object\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void equals_sameObject_true() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(list.equals(list));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"Should return true when the content is the same\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void equals_true_sameContent() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DIFF_DESCRIPTION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniqueEntryList testList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            testList.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            testList.add(TEST_ENTRY_DIFF_DESCRIPTION);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertTrue(testList.equals(list));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        @DisplayName(\"SHould return false when the content is not the same\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        void equals_diffContent_false() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.add(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            UniqueEntryList testList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            assertFalse(testList.equals(list));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 24,
      "Lingy12": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if null is passed in\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Address(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if address is \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Address(invalidAddress));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidAddress method\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidAddress {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if value is null\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // null address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Address.isValidAddress(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if address is invalid\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidAddress_invalidAddress_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if address is valid\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidAddress_validAddress_true() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \"San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 31,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if null is passed \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"into the constructor\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if email is \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Email(invalidEmail));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidEmail method\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidEmail {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if email is null\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Email.isValidEmail(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if email is blank\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidEmail_blank_false() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if parts of email missing\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidEmail_missingParts_false() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if parts of email invalid\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidEmail_invalidParts_false() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true for valid input\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidEmail_validInput_true() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(Email.isValidEmail("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(Email.isValidEmail("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 40,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final List\u003cString\u003e firstPredicateKeywordList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final List\u003cString\u003e secondPredicateKeywordList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same value\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValue_true() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different type\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different person\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"test method\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class TestMethod {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if name contains keywords\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            // One keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            \"Alice\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            // Multiple keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Alice\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Bob\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            // Only one matching keyword"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Bob\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Carol\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    predicate.test("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new PersonBuilder().withName(\"Alice Carol\").build()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            // Mixed-case keywords"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"aLIce\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"bOB\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if name does not contain keywords\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // Zero keywords"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // Non-matching keyword"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            predicate \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"alice@email.com\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Main\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    \"Street\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withPhone(\"12345\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 84,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if null\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if name is invalid\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Name(invalidName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidName method\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidName {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if name is null\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.isValidName(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if name is invalid\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidName_invalidName_false() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if name is valid\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidName_validName_true() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 25,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException if tags are \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"attempted to be removed\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isSamePerson method\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsSamePerson {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isSamePerson_sameObject_true() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isSamePerson_null_false() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different phone and email\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isSamePerson_differentPhoneAndEmail_false() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different name\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isSamePerson_differentName_false() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same name, phone, email but \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"different attributes\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isSamePerson_differentAttributes_true() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"equals method\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Equals {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private final Person aliceCopy \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new PersonBuilder(ALICE).build(ALICE.getUuid());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .withName(VALID_NAME_BOB).build(ALICE.getUuid());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same values\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameValues_true() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if same object\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_sameObject_true() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if null\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_null_false() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different type\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentType_false() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different person\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPerson_false() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different name\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentName_false() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different phone\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentPhone_false() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different email\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentEmail_false() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different address\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentAddress_false() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if different tags\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void equals_differentTags_false() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 105,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if phone is null\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if phone is \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Phone(invalidPhone));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidPhone method\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidPhone {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if phone is null\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if phone is invalid\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPhone_invalidPhone_false() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if phone is valid\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void isValidPhone_validPhone_true() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // valid phone numbers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 26,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"contains method\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Contains {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return false if person not in list\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if person in list\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return true if person is same identity\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedAlice \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"add method\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Add {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if person is null\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DuplicatePersonException if person is \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"already in the list\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setPerson method\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetPerson {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if target is null\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if edited person is \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw PersonNotFoundException if person does not\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" exist in the list\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit person if the edited person is\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" the same person\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit person if edited person has \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"the same identity\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Person editedAlice \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully edit person if edited person has \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"different identity\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DuplicatePersonException if edited person \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"has non unique identity\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"remove method\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Remove {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if person is null\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw PersonNotFoundException if person does not\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" exist in the list\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully remove person if person exists in \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"the list\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if list is null\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"setPersons method\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SetPersons {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should replace list with provided UniquePersonList\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if the provided list \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"is null\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should replace list with provided list\")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DuplicatePersonException if provided list \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"has duplicate persons\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw UnsupportedOperationException if \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"uniquePersonList is modified\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    uniquePersonList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .remove(0));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 93,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if tag is null\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalArgumentException if tag is invalid\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new Tag(invalidTagName));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"isValidTagName method\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class IsValidTagName {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if tag is null\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public void isValidTagName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 17,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DIFF_CONTACTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.journal.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final ReadOnlyAddressBook addressBook \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"Te@ with the Qu33n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String INVALID_DATE \u003d \"1922-12-23 4123\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@-+/1234567890\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_TITLE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_ENTRY_DIFF_CONTACTS.getTitle().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_DATE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_ENTRY_DIFF_CONTACTS.getDate().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_ENTRY_DIFF_CONTACTS.getDescription().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_ENTRY_DIFF_CONTACTS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .getTags()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final List\u003cString\u003e VALID_CONTACTS \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_ENTRY_DIFF_CONTACTS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .getContactList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .map(person -\u003e person.getUuid().toString())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toModelType method\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToModelType {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return a valid entry if details are valid\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_validEntry_returnsEntry()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonAdaptedEntry(TEST_ENTRY_DIFF_CONTACTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    TEST_ENTRY_DIFF_CONTACTS, entry.toModelType(addressBook));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if title is null\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_nullTitle_throwIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DATE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_CONTACTS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Title.class.getSimpleName()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            entry.toModelType(addressBook),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if date is null\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_nullDate_throwIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TITLE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_CONTACTS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Date.class.getSimpleName()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            entry.toModelType(addressBook),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if date is in \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid format\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_invalidDate_throwIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TITLE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_DATE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_CONTACTS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            entry.toModelType(addressBook),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if description is \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_nullDescription_throwIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TITLE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DATE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_CONTACTS,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Description.class.getSimpleName()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            entry.toModelType(addressBook),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if there are \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid tags\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_invalidTags_throwIllegalValueException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TITLE,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DATE,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_CONTACTS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    invalidTags"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    entry.toModelType(addressBook));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_UUID \u003d BENSON.getUuid().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toModelType method\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToModelType {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return person if details are valid\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_validPersonDetails_returnsPerson()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if name is invalid\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if name is null\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Name.class.getSimpleName()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if phone is invalid\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_PHONE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if phone is null\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Phone.class.getSimpleName()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if email is invalid\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_EMAIL,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if email is null\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Email.class.getSimpleName()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if address is invalid\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_ADDRESS,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if address is null\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_TAGS,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Address.class.getSimpleName()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    person::toModelType"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if tags are invalid\")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_NAME,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_PHONE,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_EMAIL,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_ADDRESS,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    invalidTags,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_UUID"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 148,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "class JsonAdaptedTagTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getTagName method\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetTagName {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return name of tag\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void getTagName_validTag_name() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedName \u003d \"expectedName\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedTag tag \u003d new JsonAdaptedTag(expectedName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(expectedName, tag.getTagName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toModelType method\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToModelType {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return valid tag if name is valid\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_validName_returnsTag()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String validName \u003d \"abc123\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Tag expectedTag \u003d new Tag(validName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedTag tag \u003d new JsonAdaptedTag(validName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(expectedTag, tag.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if name is invalid\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAdaptedTag tag \u003d new JsonAdaptedTag(\"!@*\u0026^%#\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    tag::toModelType,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    expectedMessage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"src\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"test\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"data\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"JsonAddressBookStorageTest\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"readAddressBook method\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ReadAddressBook {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readAddressBook(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return empty result if file is missing\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readAddressBook_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if file is not in \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"json format\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readAddressBook_notJsonFormat_throwsDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if address book has\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" invalid persons\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if address book \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"has both valid and invalid persons\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            readAddressBook("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                    \"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"saveAddressBook method\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SaveAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void saveAddressBook("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String filePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        new JsonAddressBookStorage(Paths.get(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                addressBookStorage.saveAddressBook("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        addressBook,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        addToTestDataPathIfNotNull(filePath)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new AssertionError("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \"There should not be an error writing to the file.\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        ioe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if address book is \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"null\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should read and then save address book successfully\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readAndSaveAddressBook_allInOrder_success()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            // Save in new file and read back"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook readBack \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            original.addPerson(HOON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            original.removePerson(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            // Save and read without specifying file path"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            original.addPerson(IDA);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            readBack \u003d jsonAddressBookStorage"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .readAddressBook()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get(); // file path not specified"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 90,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonJournalStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DEFAULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DIFF_CONTACTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.TEST_ENTRY_DIFF_TAGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalJournal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.ReadOnlyJournal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "class JsonJournalStorageTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"src\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"test\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"data\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"JsonJournalStorageTest\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Optional\u003cReadOnlyJournal\u003e readJournal(String filePath)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new JsonJournalStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .readJournal(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"readJournal method\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ReadJournal {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readJournal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readJournal(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should return empty result if file is missing\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readJournal_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(readJournal(\"NonExistingFile.json\").isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if file is not in \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"json format\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readJournal_notJsonFormat_throwsDataConversionException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readJournal(\"notJsonFormatJournal.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if journal has \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid entries\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readJournal_invalidEntryJournal_throwsDataConversionException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readJournal(\"invalidEntryJournal.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if journal has \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"both valid and invalid entries\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readJournal_invalidAndValidEntryJournal_throwsDataConversionException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readJournal(\"invalidAndValidEntryJournal.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"saveJournal method\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SaveJournal {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void saveJournal(ReadOnlyJournal journal, String filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                JsonJournalStorage journalStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        new JsonJournalStorage(Paths.get(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                journalStorage.saveJournal(journal,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new AssertionError("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \"There should not be an error writing to the file.\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        ioe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if journal is null\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveJournal_nullJournal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveJournal(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveJournal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveJournal(new Journal(), null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should read and then save journal successfully\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readAndSaveJournal_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path filePath \u003d testFolder.resolve(\"TempJournal.json\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Journal original \u003d getTypicalJournal();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonJournalStorage jsonJournalStorage \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonJournalStorage(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // Save in new file and then read back"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            jsonJournalStorage.saveJournal(original, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyJournal readBack \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    jsonJournalStorage.readJournal("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            getTypicalAddressBook(), filePath).get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(original, new Journal(readBack));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // Modifying data, overwrite existing file, and read back"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            original.addEntry(TEST_ENTRY_DIFF_CONTACTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            original.removeEntry(TEST_ENTRY_DEFAULT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            jsonJournalStorage.saveJournal(original, filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            readBack \u003d jsonJournalStorage.readJournal("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTypicalAddressBook(), filePath).get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(original, new Journal(readBack));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            // Save and read without specifying file path"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            original.addEntry(TEST_ENTRY_DIFF_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            jsonJournalStorage.saveJournal(original);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            readBack \u003d jsonJournalStorage"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .readJournal(getTypicalAddressBook())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(original, new Journal(readBack));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"src\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"test\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"data\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"JsonSerializableAddressBookTest\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toModelType method\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToModelType {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully return an AddressBook object from a\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \" json file with valid persons\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableAddressBook.class"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddressBook typicalPersonsAddressBook \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if person file is \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"invalid\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_invalidPersonFile_throwsIllegalValueException()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableAddressBook.class"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    IllegalValueException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    dataFromFile::toModelType"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if there are \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"duplicate persons in the file\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_duplicatePersons_throwsIllegalValueException()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableAddressBook.class"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    dataFromFile::toModelType"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 50,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableJournalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalJournal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "class JsonSerializableJournalTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"src\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"test\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"JsonSerializableJournalTest\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TYPICAL_ENTRIES_FILE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalEntriesJournal.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path INVALID_ENTRY_FILE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidEntryJournal.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path DUPLICATE_ENTRY_FILE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateEntryJournal.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"toModelType method\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ToModelType {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should successfully return a Journal object from a \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"json file with valid entries\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_typicalEntriesFile_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableJournal dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    TYPICAL_ENTRIES_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableJournal.class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Journal journalFromFile \u003d dataFromFile"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .toModelType(getTypicalAddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Journal typicalEntriesJournal \u003d getTypicalJournal();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(typicalEntriesJournal, journalFromFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if there is invalid \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"entry in the file\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_invalidEntryFile_throwsIllegalValueException()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableJournal dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    INVALID_ENTRY_FILE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableJournal.class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    dataFromFile.toModelType(getTypicalAddressBook()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw IllegalValueException if there is duplicate \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"entries in the file\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void toModelType_duplicateEntries_throwsIllegalValueException()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonSerializableJournal dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    DUPLICATE_ENTRY_FILE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    JsonSerializableJournal.class"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    dataFromFile.toModelType(getTypicalAddressBook()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"src\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"data\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"JsonUserPrefsStorageTest\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"readUserPrefs method\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class ReadUserPrefs {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Optional\u003cUserPrefs\u003e readUserPrefs("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path prefsFilePath \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    prefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_missingFile_emptyResult()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw DataConversionException if user prefs not \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"in json format\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_notJsonFormat_throwsDataConversionException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should read file successfully if file path is valid\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_fileInOrder_successfullyRead()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should use default user prefs if values are missing \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"from file\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should ignore extra values in file\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void readUserPrefs_extraValuesInFile_extraValuesIgnored()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"saveUserPrefs method\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class SaveUserPrefs {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * Saves {@code userPrefs} at the specified {@code"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "         * prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private void saveUserPrefs("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                UserPrefs userPrefs,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                String prefsFileInTestDataFolder"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                new JsonUserPrefsStorage(addToTestDataPathIfNotNull("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new AssertionError("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        \"There should not be an error writing to the file\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        ioe"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if user prefs is null\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file path is null\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should save user prefs successfully\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void saveUserPrefs_allInOrder_success()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            JsonUserPrefsStorage jsonUserPrefsStorage \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, readBack);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            //Try saving when the file exists"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, readBack);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 79,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private JsonAddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private JsonUserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private JsonJournalStorage journalStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"miscellaneous operations\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Misc {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"journals\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBookStorage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    journalStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefsStorage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should save user prefs successfully\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * Note: This is an integration test that verifies the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * StorageManager is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * properly wired to the {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should save address book successfully\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * Note: This is an integration test that verifies the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * StorageManager is"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * properly wired to the {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "             * {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            ReadOnlyAddressBook retrieved \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"getAddressBookFilePath method\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class GetAddressBookFilePath {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            journalStorage \u003d new JsonJournalStorage("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTempFilePath(\"journals\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    addressBookStorage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    journalStorage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    userPrefsStorage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should not be null\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void getAddressBookFilePath_noArgs_notNull() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 60,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Exception. This is a wrapper method that invokes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * consistency with our custom"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * To standardize API calls in this project, users should use this method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * instead of {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Executable executable"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Throwable thrownException \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 20,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 16,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Team Meeting\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Team Meeting for CS2103T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-12-20 18:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    // Represents a contact list for a certain event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final UniquePersonList contactList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Initialize the Entry with default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        contactList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Initializes the Entry with a given entry."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        title \u003d entryToCopy.getTitle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        date \u003d entryToCopy.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        description \u003d entryToCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        contactList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        entryToCopy.getContactList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .forEach(contactList::add);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tags.addAll(entryToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Builds an entry with a title."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param title Title of the entry."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @return Entry with a new title."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Builds an entry with description."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param description Description of the entry."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @return Entry with a new description."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Builds an entry with a date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @param date Date of the entry."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * @return Entry with a new date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public EntryBuilder withDate(String date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public EntryBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Adds person to the contact list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public EntryBuilder withContacts(Person... persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Arrays.stream(persons).forEach(contactList::add);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Entry(title, date, description, contactList, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 22,
      "jazerler": 4,
      "Lingy12": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_AND_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class EntryUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static String getAddEntryCommand(Entry entry) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static String getEntryDetails(Entry entry) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        //TODO: change when support contact list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return PREFIX_TITLE + entry.getTitle().title + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "               + PREFIX_DATE_AND_TIME + entry.getDate().value + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "                + PREFIX_DESCRIPTION + entry.getDescription().description + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/JournalBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": " * A utility class to build the journal."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class JournalBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    private Journal journal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Initializes the builder with a new journal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public JournalBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        journal \u003d new Journal();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Initializes the builder with a given journal."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public JournalBuilder(Journal journal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.journal \u003d journal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Add new entry to the journal"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public JournalBuilder withEntry(Entry entryToAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        this.journal.addEntry(entryToAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public Journal build() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lingy12": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Person(name, phone, email, address, tags, UUID.randomUUID());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Person build(UUID uuid) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new Person(name, phone, email, address, tags, uuid);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 8,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the part of command string for the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static String getEditPersonDescriptorDetails("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                tags.forEach(s -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 16,
      "zhXchD": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            + \"\\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * resulting path. Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 6,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.Journal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "import seedu.address.model.journal.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DEFAULT \u003d new EntryBuilder().build(); //Default"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DIFF_DATE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTitle(\"Product Design\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withDate(\"2020-12-21 19:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DIFF_DESCRIPTION \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTitle(\"Sample 1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withDescription(\"Meet with boss\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DIFF_TITLE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTitle(\"Board Meeting\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DIFF_CONTACTS \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTitle(\"Fish and chips\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withContacts("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    getTypicalAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .getPersonList()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            .toArray(new Person[0])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            )"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Entry TEST_ENTRY_DIFF_TAGS \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTitle(\"Tea and biscuits\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(\"queen\", \"tea\", \"biscuits\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     * Returns an {@code Journal} with all the typical entries."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    public static Journal getTypicalJournal() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        Journal journal \u003d new Journal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (Entry entry: getTypicalEntries()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "            journal.addEntry(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lingy12"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static List\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        TEST_ENTRY_DEFAULT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        TEST_ENTRY_DIFF_DATE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        TEST_ENTRY_DIFF_DESCRIPTION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        TEST_ENTRY_DIFF_TITLE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                )"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lingy12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 37,
      "Lingy12": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"e26616c9-c740-4d86-861e-733a4d377a3e\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"f73eaee6-a320-4005-b09c-98450d1ef661\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"623afedd-5f71-4130-8ed3-7ebc0969d776\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"5f5df00a-60f6-43ad-aad5-77b17847c20a\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"3f40a181-8153-4616-a69a-3362664f5a50\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"bfac8b18-3103-43a3-bd98-3de9d3375655\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build(UUID.fromString(\"6d07561e-3230-49a1-85e8-226e588fffdf\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 73,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * toolkit being initialized."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"constructor\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Constructor {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path testFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file url is null\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw AssertionError if file url is missing\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void constructor_missingFileUrl_throwsAssertionError()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            URL missingFileUrl \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw AssertionError if file url is invalid\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should load file if file url is valid\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_FILE_ROOT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should load file if file with fx root url is valid\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    VALID_FILE_ROOT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file name is null\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw NullPointerException if file name is \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"missing\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            MISSING_FILE_PATH,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Object()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw AssertionError if file name is invalid\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new TestUiPart\u003cObject\u003e("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            INVALID_FILE_PATH,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            new Object()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 73,
      "-": 87
    }
  }
]
