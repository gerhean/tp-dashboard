[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T11-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "# StonksBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "StonksBook is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). This brownfield project is adapted and evolved from the CS2103T sample project **AddressBook Level 3**."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "For a detailed documentation of StonksBook, visit **[our product website](https://ay2021s1-cs2103t-t11-1.github.io/tp/)**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU Initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "jmleong666": 5,
      "hakujitsu": 2,
      "sebastiantoh": 1,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    compile \u0027org.kordamp.ikonli:ikonli-javafx:11.5.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    compile \u0027org.kordamp.ikonli:ikonli-fontawesome5-pack:11.5.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    archiveName \u003d \u0027stonksbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    mergeServiceFiles()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "run {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "sebastiantoh": 7
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "### Aaron Seah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003cimg src\u003d\"images/aaronnseah.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "[[github](http://github.com/aaronnseah)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "[[portfolio](team/aaronnseah.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Responsibilities: Overall Project Coordination"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Sebastian Toh"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/sebastiantoh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[[github](http://github.com/sebastiantoh)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[[portfolio](team/sebastiantoh.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "### Kwek Min Yih"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003cimg src\u003d\"images/hakujitsu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "[[github](http://github.com/hakujitsu)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "[[portfolio](team/hakujitsu.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "### Wang Luo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "\u003cimg src\u003d\"images/asthenosphere.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "[[github](https://github.com/Asthenosphere)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "[[portfolio](team/asthenosphere.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "### Leong Jin Ming"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cimg src\u003d\"images/jmleong666.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[[github](https://github.com/jmleong666)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[[portfolio](team/jmleong666.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Responsibilities: Integration"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "jmleong666": 3,
      "Asthenosphere": 5,
      "hakujitsu": 5,
      "-": 35,
      "sebastiantoh": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Software overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook is a sales-optimised contact management application. It is targeted at salesmen who are seeking an all-in-one application that can empower them to effectively curate their contact list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook also provides many tools that can boost one\u0027s sales peformance through the use of sophisticated data analysis techniques."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Purpose \u0026 scope"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "This document describes the software architecture and software design decisions for the implementation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "of StonksBook. The intended audience of this document is the developers, designers, and software testers of StonksBook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `contact delete 1`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. `Logic` uses the `StonksBookParser` class to parse the user command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"contact delete 1\")` API call."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![Interactions Inside the Logic Component for the `contact delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* exposes the following unmodifiable lists that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    1. `ObservableList\u003cPerson\u003e`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    2. `ObservableList\u003cMeeting\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    3. `ObservableList\u003cReminder\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    3. `ObservableList\u003cSale\u003e`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `StonksBook`, which `Person` references. This allows `StonksBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T11-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Classes used by multiple components are in the `seedu.StonksBook.commons` package."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Meetings feature \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The meetings feature allows the user to add, delete, or update meetings in StonksBook."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Meetings are displayed in increasing order based on the start date of the meeting."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The feature consists of the following commands:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `meeting add` - Adds a meeting to the meeting list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `meeting delete` - Delete a meeting from the meeting list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `meeting edit` - Edit a meeting from the meeting list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `meeting list` - Display the list of all meetings in the user interface."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Parsing of commands within the `Logic` component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The parsing of commands begins once the `LogicManager` receives and tries to execute the user input."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "In order to handle the many commands in our application, we introduced an intermediate layer between `AddressBookParser` and the relevant command parsers, e.g. `AddCommandParser`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The intermediate layer will first determine which model type the command corresponds to, before dispatching it to the corresponding command parser."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "For all meeting-related commands, we have the `MeetingCommandsParser` which serves as the intermediate class."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "These are the steps that will be taken when parsing a meeting-related user command:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. An `AddressBookParser` will check if the command is meetings-related. The `AddressBookParser` will then create a `MeetingCommandsParser`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. The `MeetingCommandsParser` will check what type of command it is and create the corresponding parsers as follows:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `meeting add` command: `AddCommandParser`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `meeting delete` command: `DeleteCommandParser`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `meeting edit` command: `EditCommandParser`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `meeting list` command: `ListCommandParser`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. The respective parsers all implement the `Parser` interface, and the `Parser#parse` method will then be called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. Within `Parser#parse`, static methods in `ParserUtil` may be called to parse the arguments."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Given below is a sequence diagram for interactions inside the `Logic` component for the `execute(meeting add \u003cargs\u003e)` API call."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- Note that the command is truncated for brevity and `\u003cargs\u003e` is used as a placeholder to encapsulate the remaining arguments supplied by the user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- For example, if the full command was `meeting add c/2 m/Lunch with Alice d/2020-10-30 10:10`, then `\u003cargs\u003e` is equivalent to `c/2 m/Lunch with Alice d/2020-10-30 10:10`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![Interactions Inside the Logic Component for the `meeting add \u003cargs\u003e` Command](images/MeetingAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `MeetingCommandsParser` and `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Execution of commands within the `Logic` component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "After the user input has been parsed into a `Command`, it is executed with `model` passed in as a parameter."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "First, relevant methods in `model` are called to retrieve related objects or check for the existence of the sale."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "In this case, `getSortedPersonList()` is called to retrieve the `id` of the contact that is to be associated with the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "meeting and `hasMeeting(newMeeting)` is called to ensure that `newMeeting` to be added does not already exist."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Second, objects to be added or edited are created. For `AddCommand`, the new `Meeting` object to be added is created."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Next, relevant `model` methods are called to edit the lists of `Meeting` objects. For `AddCommand`, `addMeeting` is"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " called to add the newly created meeting to the `model`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Lastly, a `CommandResult` object containing the message to be displayed to the user is returned to `LogicManager`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The sequence diagram below illustrates how the `AddCommand` that is created from parsing `meeting add \u003cargs\u003e` is"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " executed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " ![MeetingExecuteAddSequenceDiagram](images/MeetingExecuteAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Error handling within the `Logic` component"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The below activity diagram shows the overall process of the execution of `meeting add \u003cargs\u003e`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "In order to ensure data cleanliness and that the inputs by the users are valid, errors are thrown at various stages if:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- Incorrect command format is used (e.g. missing/incorrect prefixes)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- Invalid index/values provided (e.g. non-positive and non-integer values are provided as index, non-alphanumeric"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " character included in message, unrecognised date formats, etc.)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![The different outcomes of the program that can occur from the `meeting add \u003cargs\u003e` Command](images/MeetingAddActivityDiagram.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Modelling `Meeting`s"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Meetings are modelled according to the class diagram below."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![Class diagram used to model meetings](images/MeetingClassDiagram.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "`LocalDateTime` and `Duration` are classes from Java\u0027s `java.time` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "We enforce a composition relationship between `Meeting` and its attribute as we do not want `Meeting` to exist when either of its attributes no longer exist."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "With that, whenever a `Person` is deleted, all associated `Meeting`s are deleted as well. Similarly, we also enforce that all `Meeting`s must be associated with a non-empty `Message`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "##### Aspect: Whether it should be necessary to enforce a `message` field in a `Meeting` object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 1 (current choice):**: Create a `Message` class which enforces a non-empty message association to a `Meeting` object."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Easier implementation of meeting commands since every field is necessary."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Better data cleanliness."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Have to implement a separate class as well as implement validation of inputs."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                      "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 2:** Set the `Meeting` object to be associated to a `String` which acts as the message of a meeting."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * No need to implement validation of inputs for this `message` field."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Will need to implement some kind of placeholder text for `Meeting`s without a message when displaying meetings in the user interface."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Will have to be more careful in implementation of meeting commands to allow for an optional field."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Alternative 1 is chosen as we found that the importance of enforcing data cleanliness far outweighs the associated"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " cost that is required to implement this enforcement."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "##### Aspect: What fields should be stored to represent a `Meeting`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 1 (current choice):** Store just the start date of a meeting, along with its duration."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * More user-friendly since users tend to schedule meetings based on a start date and its duration."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * May have slight performance dip since the end date of a meeting may have to be computed repeatedly for display in the user interface."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 2:** Store both start and end date of the meeting."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * May have slightly improved performance since there is no need to compute the end date."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * User will have to input both start and end date, which can be tedious."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 3:** Store start date, end date, and duration of the meeting."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * More user-friendly since users can schedule meetings using just the start date and its duration."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * More performant since the end date need not be re-computed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * There is the possibility that the three fields may no longer be in sync. Extra emphasis must be taken to ensure that these fields remain synchronised whenever either of these fields changes."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Alternative 1 is chosen as it is the most user-friendly option. It also makes maintaining the data easy."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Because only future meetings are displayed by default, the slight performance dip associated with alternative 1 may"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " not actually be an issue as we do not foresee the list of future meetings to be very large."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "##### Aspect: How to serialize the start date and duration of a `Meeting`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 1 (current choice):** Deserialize them according to ISO-8601 format."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Unambiguous and well-defined method of representing dates and times"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Easier integration with other date and time libraries should such an integration be necessary."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Should the user decide to open the data file, the ISO-8601 format may not be very familiar or readable. This"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      increases the likelihood of corruption of data."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 2:** Serialize them in a format that is human readable. e.g. storing dates in dd-MM-yyyy format and"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " durations as an integer representing number of minutes"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Should the user decide to open the data file, he can easily understand and make relevant modifications without"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      corrupting the data format."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parsing and deserializing the data may pose some difficulties."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Alternative 1 is chosen as it is a well-established international standard which would facilitate the integration of"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " other libraries if necessary."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Reminders feature \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The reminders feature allows the user to add, delete, or update reminders in StonksBook."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Reminders are displayed in increasing order based on the scheduled date of the reminder."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The feature consists of the following commands:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `reminder add` - Adds a reminder to the reminder list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `reminder delete` - Delete a reminder from the reminder list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `reminder edit` - Edit a reminder from the reminder list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "- `reminder list` - Display the list of all reminders in the user interface."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Parsing of commands within the `Logic` component"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The parsing of commands begins once the `LogicManager` receives and tries to execute the user input."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "In order to handle the many commands in our application, we introduced an intermediate layer between"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " `AddressBookParser` and the relevant command parsers, e.g. `DeleteCommandParser`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The intermediate layer will first determine which model type the command corresponds to, before dispatching it to the corresponding command parser."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "For all reminder-related commands, we have the `ReminderCommandsParser` which serves as the intermediate class."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "These are the steps that will be taken when parsing a reminder-related user command:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. An `AddressBookParser` will check if the command is reminder-related. The `AddressBookParser` will then create a"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " `ReminderCommandsParser`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. The `ReminderCommandsParser` will check what type of command it is and create the corresponding parsers as follows:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `reminder add` command: `AddCommandParser`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `reminder delete` command: `DeleteCommandParser`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `reminder edit` command: `EditCommandParser`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    - `reminder list` command: `ListCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. The respective parsers all implement the `Parser` interface, and the `Parser#parse` method will then be called."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. Within `Parser#parse`, static methods in `ParserUtil` may be called to parse the arguments."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Given below is a sequence diagram for interactions inside the `Logic` component for the `execute(reminder delete 1)` API call."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![Interactions Inside the Logic Component for the `reminder delete 1` Command](images/ReminderDeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `ReminderCommandsParser` and `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " reaches the end of diagram."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Execution of commands within the `Logic` component"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "After the user input has been parsed into a `Command`, it is executed with `model` passed in as a parameter."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "First, relevant methods in `model` are called to retrieve related objects or check for the existence of the reminder."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "For the case of `DeleteCommand`, `getSortedReminder()` is called to retrieve the list of all reminders"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " that are currently displayed in the user interface."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Next, relevant model methods are called to edit the lists of `Reminder`objects. For `DeleteCommand`, `deleteReminder`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "is used to delete the reminder corresponding to the specified index."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Lastly, a `CommandResult` object containing the message to be displayed to the user is returned to `LogicManager`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The sequence diagram below illustrates how the `DeleteCommand` that is created from parsing `reminder delete 1` is"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " executed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![ReminderExecuteDeleteSequenceDiagram](images/ReminderExecuteDeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Error Handling within the `Logic` component"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "The below activity diagram shows the overall process of the execution of `reminder delete 1`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "In order to ensure data cleanliness and that the inputs by the users are valid, errors are thrown at various stages if:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Incorrect command format is used (e.g. missing/incorrect prefixes)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Invalid index/values provided (e.g. non-positive and non-integer values are provided as index)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![DeleteReminderActivityDiagram](images/ReminderDeleteActivityDiagram.png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Modelling `Reminder`s"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "`Reminder` is modelled according to the class diagram below."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "![ReminderClassDiagram](images/ReminderClassDiagram.png)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "`Reminder` objects are saved within a `UniqueReminderList` stored in `AddressBook`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "We enforce a composition relationship between `Reminder` and its attribute as we do not want `Reminder` to exist when"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " either of its attributes no longer exist. With that, whenever a `Person` is deleted, all associated `Reminder`s are"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  deleted as well. Similarly, we also enforce that all `Reminder`s must be associated with a non-empty `Message`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "##### Aspect: Whether it should be necessary to enforce a `message` field in a `Reminder` object"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 1 (current choice):**: Create a `Message` class which enforces a non-empty message association to a"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " `Reminder` object."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Easier implementation of reminder commands since every field is necessary."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Better data cleanliness."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Have to implement a separate class as well as implement validation of inputs."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 2:** Set the `Reminder` object to be associated to a `String` which acts as the message of a reminder."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * No need to implement validation of inputs for this `message` field."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Will need to implement some kind of placeholder text for `Reminder`s without a message when displaying"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     reminders in the user interface."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * Will have to be more careful in implementation of reminder commands to allow for an optional field."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "A similar consideration was made when implementing [`Meeting`s](#aspect-whether-it-should-be-necessary-to-enforce-a-message-field-in-a-meeting-object)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "This further strengthened our choice to go for Alternative 1 given that the cost of having to validate the inputs"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " would be spread over multiple features."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "##### Aspect: How to serialize the scheduled date of a `Reminder`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 1 (current choice):** Deserialize the date according to ISO-8601 format."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Unambiguous and well-defined method of representing dates and times"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Easier integration with other date and time libraries should such an integration be necessary."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Should the user decide to open the data file, the ISO-8601 format may not be very familiar or readable. This"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      increases the likelihood of corruption of data."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Alternative 2:** Serialize them in a format that is human readable. e.g. storing dates in dd-MM-yyyy format and"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " durations as an integer representing number of minutes"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Should the user decide to open the data file, he can easily understand and make relevant modifications without"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      corrupting the data format."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parsing and deserializing the data may pose some difficulties."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "A similar consideration was made when implementing [`Meeting`s](#aspect-how-to-serialize-the-start-date-and-duration"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "-of-a-meeting)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Alternative 1 was chosen so as to have a consistent and standardised way of handling date and time handled within our code base."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "### Sale Feature [Kwek Min Yih]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "The Sales feature allows users to add and manage Sales made to contacts in StonksBook. Sales are ordered from most to least recently made."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "This feature consists of the following commands:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale add` – Adds a sale to the sale list."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale delete` – Deletes a sale to the sale list."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale edit` – Edits a sale to the sale list."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale list` – Display the list of all sales in the user interface."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Parsing of commands within the `Logic` component"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "The parsing of commands begins once the `LogicManager` receives and tries to execute the user input."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "In order to handle the many commands in our application, we introduced an intermediate layer between `AddressBookParser` and the relevant command parsers, e.g. `AddCommandParser`."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "The intermediate layer will first determine which model type the command corresponds to, before dispatching it to the corresponding command parser."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "For all sale-related commands, we have the `SaleCommandsParser` which serves as the intermediate class."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "These are the steps that will be taken when parsing a sale-related user command:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1. An `AddressBookParser` will check if the command is sale-related. The `AddressBookParser` will then create a `SaleCommandsParser`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "3. The `SaleCommandsParser` will check what type of command it is and create the corresponding parsers as follows:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    - `sale add` command: `AddCommandParser`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    - `sale delete` command: `DeleteCommandParser`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    - `sale edit` command: `EditCommandParser`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    - `sale list` command: `ListCommandParser`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "4. The respective parsers all implement the `Parser` interface, and the `Parser#parse` method will then be called."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "5. Within the `Parser#parse`, static methods in `ParserUtil` may be called to parse the arguments."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Given below is a sequence diagram for interactions inside the `Logic` component for the `execute(sale add \u003cargs\u003e)` API call."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "- Note that the command is truncated for brevity and `\u003cargs\u003e` is used as a placeholder to encapsulate the remaining arguments supplied by the user."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "- For example, if the full command was `sale add c/4 n/Notebook d/2020-10-30 15:00 p/6.00 q/2 t/stationery`, then `\u003cargs\u003e` is equivalent to `c/4 n/Notebook d/2020-10-30 15:00 p/6.00 q/2 t/stationery`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "![SaleAddSequenceDiagram](images/SaleAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Execution of commands within the `Logic` component"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "After command has been parsed into an `AddCommand`, it is executed with `model` passed in as a parameter."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "First, relevant methods in `model` are called to retrieve related objects or check for the existence of the sale."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "In this case, `getSortedPersonList()` is called to retrieve the `id` of the buyer and `hasSale(newSale)` is called to ensure that the `sale` to be added does not already exist."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Second, objects to be added or edited are created."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "For `AddCommand`, the new `Sale` object to be added is created, and a new `editedPerson` object is created containing an updated `totalSalesAmount` variable."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Next, relevant `model` methods are called to edit the lists of `Sale` and `Person` objects,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "with `setPerson()` and `addSale()` being used to replace an existing `Person` object and add a new `Sale` object respectively."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Lastly, a `CommandResult` object containing the message to be displayed to the user is returned to `LogicManager`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "![SaleExecuteAddSequenceDiagram](images/SaleExecuteAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Error Handling within the `Logic` component"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "The below activity diagram shows the overall process of execution of `sale add \u003cargs\u003e`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "In order to ensure data cleanliness and that the inputs by the users are valid, errors are thrown at various stages if:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Incorrect command format is used (e.g. missing/incorrect prefixes)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Invalid index/values provided (e.g. alphabetical characters provided for numerical fields such as `Quantity`)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Sale object provided already exists"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "![AddSaleActivityDiagram](images/AddSaleActivityDiagram.png)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Modelling `Sale`s"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "`Sale` is modelled according to the class diagram below."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "![SaleClassDiagram](images/SaleClassDiagram.png)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "`Sale` objects are saved within a `UniqueSaleList` stored in `AddressBook`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "There is a composition relationship between `Sale` and its attributes, as we want the attributes (e.g. `ItemName`, `UnitPrice`) to exist dependently on the `Sale` object it belongs to."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "The attributes are abstracted out into different classes, instead of being stored as values within Sale, to allow for greater input validation and attribute specific functionality."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Design Consideration:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "##### Aspect: How to implement currency related fields"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* **Alternative 1 (current choice):**: Use BigDecimal to store currency related fields."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * Accurate currency calculations are possible."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * Need to import the BigDecimal package."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* **Alternative 2:** Use Float variables to store currency variables."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * No need to import any packages."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * Will likely result in accurate currency calculations due to float rounding errors."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* **Alternative 3:** Store dollars and cents independently as integers"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * Accurate currency calculations are possible."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * Cumbersome currency calculations due to converting every hundred cents to dollars."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "### Archive feature \\[Leong Jin Ming\\]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "The Archive feature allows users to archive contacts who are no longer active."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "This feature consists of the following commands:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `archive add` — Adds a contact to the archive."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `archive list` — Lists all contacts in the archive."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `archive remove` — Removes a contact from the archive."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Parsing of commands within the `Logic` component"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Much like other core features, we introduced an intermediate layer between the `AddressBookParser` and the archive command parsers, which in this case is the `ArchiveCommandsParser`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "These are the steps that will be taken when parsing an archive-related user command:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. The `AddressBookParser` checks if the user command is archive-related. Then, it creates an `ArchiveCommandsParser`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. The `ArchiveCommandsParser` checks what type of command it is and creates the corresponding parsers/commands as follows:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    - `archive add` command: `AddCommandParser`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    - `archive list` command: `ListCommand`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    - `archive remove` command: `RemoveCommandParser`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. The relevant parser, which implements the `Parser` interface, parses the command via `Parser#parse`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. If the user command is valid, the parser creates the corresponding `Command` object for execution."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Given below is a sequence diagram for interactions inside the Logic component for the `execute(\"archive add 1\")` API call."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "![ArchiveAddSequenceDiagram](images/ArchiveAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Execution of commands within the `Logic` component"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Since the execution of the `RemoveCommand` is similar to the `AddCommand`, we shall only look at the execution of the latter."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "When an `AddCommand` is created by the `AddCommandParser`, it is executed with `model` passed in as the parameter."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Firstly, relevant methods in `model` are called to retrieve related objects or check for the existence of the contact. Here, `getSortedPersonList()` is called to get the list of contacts currently being displayed in the UI."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Secondly, objects to be added or edited are created. In this case, a new `archivedPerson` is created with the `archived` flag set to `true`."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Next, relevant `model` methods are called to edit the list of `Person` objects, with `setPerson()` used to replace an existing Person object."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Finally, a `CommandResult` object containing the message to be displayed to the user is returned to `LogicManager`."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "![ArchiveExecuteAddSequenceDiagram](images/ArchiveExecuteAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Error Handling within the `Logic` component"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "The below activity diagram shows the overall process of execution of `archive add 1`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "In order to ensure data cleanliness and that the inputs by the users are valid, errors are thrown at various stages if:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "- Incorrect command format is used (i.e. missing index as argument)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "- Invalid index is provided"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "- The incorrect list is being displayed"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "![ArchiveAddActivityDiagram](images/ArchiveAddActivityDiagram.png)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedStonksBook`. It extends `StonksBook` with an undo/redo history, stored internally as an `StonksBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `VersionedStonksBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `VersionedStonksBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* `VersionedStonksBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitStonksBook()`, `Model#undoStonksBook()` and `Model#redoStonksBook()` respectively."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedStonksBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitStonksBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `StonksBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitStonksBook()`, causing another modified address book state to be saved into the `StonksBookStateList`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitStonksBook()`, so the address book state will not be saved into the `StonksBookStateList`."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoStonksBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial StonksBook state, then there are no previous StonksBook states to restore. The `undo` command uses `Model#canUndoStonksBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoStonksBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `StonksBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone StonksBook states to restore. The `redo` command uses `Model#canRedoStonksBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitStonksBook()`, `Model#undoStonksBook()` or `Model#redoStonksBook()`. Thus, the `StonksBookStateList` remains unchanged."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitStonksBook()`. Since the `currentStatePointer` is not pointing at the end of the `StonksBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Managing a large client base"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Values sales optimisation"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "*  Analytical"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "*  Performance-driven"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**Value proposition**: Effectively curate sales-optimised contact list and conveniently conduct data analysis to gain business insights and boost sales performance."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                        | I want to …​                                               | So that I can…​                                                                            |"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| -------- | --------------------------------- | ------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | well-connected salesman           | see a history of the number of contacts made with someone     | determine if this contact is worth investing more time to                                     |"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | forgetful salesman                | set reminders associated with contacts                        | keep track of crucial tasks to be done                                                        |"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | efficient salesman                | set meeting / call time with contacts                         | plan my meetings without another app                                                          |"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | new salesman                      | add contacts                                                  | expand my contact list                                                                        |"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | normal user who makes mistakes    | update contacts                                               | quickly and conveniently append any mistakes made.                                            |"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | careless user                     | delete contacts                                               | avoid having wrong data                                                                       |"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | visual salesman                   | have chatbot GUI                                              | visually keep track of my actions                                                             |"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | busy salesman                     | clear past interactions with the app                          | remove the clutter on the GUI                                                                 |"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | careless typer                    | be notified of an erroneous input                             | easily identify my mistakes                                                                   |"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "| `* *`    | well-connected salesman           | associate remarks to contacts                                 | remember key information about this contact and distinguish between contacts with same names  |"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | efficient salesman                | see the relevant sales information to the contact information | make sales decisions without referring to other app                                           |"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | well-connected salesman           | categorise my contacts                                        | navigate through a large list of contacts with ease.                                          |"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | efficient salesman                | search contacts who are in certain groups                     | identify contacts belong to a sales group easily                                              |"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | well-connected salesman           | search for contacts based on fuzzy match                      | easily find the contacts I am interested in                                                   |"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | forgetful salesman                | see the command list with a single command                    | easily recall how to use the app                                                              |"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | user                              | have my contact list sorted alphabetically be default         | easily find the contacts I am interested in manually                                          |"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | careless user                     | be suggested the right command when I input wrongly           | correct my mistakes easily                                                                    |"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | efficient user                    | sort my contact list by certain attributes                    | easily find people of interest according the sorted result                                    |"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* *`    | forgetful user                    | see the command list with a single command                    | recall how to use quickly                                                                     |"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | efficient salesman                | add sales to contacts                                         | make better sales decisions to my clients                                                     |"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | salesman                          | delete sales belonging to contacts                            | ensure updated and correct sales information                                                  |"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "| `* * *`  | efficient salesman                | list all sales of a contact                                   | see all sales made to a contact easily                                                        |"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "| `* *`    | careless user                     | be notified if a similar record already exists                | ensure no duplicate records are created                                                       |"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "| `* *`    | visual user                       | quickly identify overdue reminders                            | work on it without further delay                                                              |"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "| `* *`    | efficient salesman                | be notified when I attempt to schedule a clashing meeting     | schedule meetings without worrying for accidental clashes                          |"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "| `* *`    | well-connected salesman           | archive contacts who are no longer active                     | I can focus on contacts that are more likely to respond                                       |"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "(For all use cases below, the **System** is the `StonksBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Delete a person"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook shows a list of persons"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "4.  StonksBook deletes the person"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Add a tag"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "1.  User requests to add a new tag."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "2.  StonksBook adds the provided tag."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 2a. The provided tag already exists in the tag list."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: View all tags"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "1.  User requests to list all tags."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "2.  StonksBook displays a list of all tags."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 2a. The list of tags is empty."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Update a tag"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "1.  User requests to list tags."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "2.  StonksBook shows a list of tags."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "3.  User requests to update a specific tag in the list."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "4.  StonksBook updates the tag and updates all items associated with this tag."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 2a. The list of tags is empty."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Delete a tag"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "1.  User requests to list tags."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "2.  StonksBook shows a list of tags."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "3.  User requests to delete a specific tag in the list."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "4.  StonksBook deletes the tag and updates all items associated with this tag."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 2a. The list of tags is empty."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Retrieve entries by tag"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "1.  User requests to list tags."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "2.  StonksBook shows a list of tags."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "3.  User requests to search for items under a specific tag in the list."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "4.  StonksBook displays all entries under the given tag."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 2a. The list of tags is empty."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* 3b. The user specifies a different model to search for."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * 3b1. StonksBook displays items of the specified model under the given tag."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Clear past interactions"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1.  User enters the clear command."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook clears the chatbox GUI."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Clear all data"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1.  User enters the purge command."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook clears all saved data."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* 1a. StonksBook requests for confirmation."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * 1a1. User confirms."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Find a contact"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "1.  User requests to find a contact by giving keyword(s)."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "2.  StonksBook outputs a contact list."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* 2b. There is no given keyword."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Add a meeting"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list contacts"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of contacts"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. User requests to add a meeting associated with a specific contact in the list"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. StonksBook adds a meeting associated with the contact"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of contacts is empty."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3b. The given meeting date is invalid."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3b1. StonksBook shows an error message."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3c. The given meeting duration is invalid."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3b1. StonksBook shows an error message."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3d. The given meeting message is invalid."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3b1. StonksBook shows an error message."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: View all meetings"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list all meetings"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of all meetings"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 1a. A index is specified, but the given index is invalid"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 1a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of meetings is empty."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Delete a meeting"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list meetings"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of meetings"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. User requests to delete a specific meeting in the list"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. StonksBook deletes the meeting"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of meetings is empty."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Add a reminder"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list contacts"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of contacts"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. User requests to add a reminder associated with a specific contact in the list"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. StonksBook adds a reminder associated with the contact"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of contacts is empty."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3b. The given reminder date is invalid."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3b1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 3c. The given reminder message is invalid."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3b1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Use case: Edit a reminder"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "This use case is similar to `Add a reminder` except that the user has the additional option to update the status of the reminder to indicate whether the reminder is completed."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: View all reminders"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list all reminders"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of all reminders"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of reminders is empty."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Delete a reminder"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. User requests to list reminders"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "2. StonksBook shows a list of reminders"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "3. User requests to delete a specific reminder in the list"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "4. StonksBook deletes the reminder"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* 2a. The list of reminders is empty."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Get help on available commands"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "1.  User requests for help on the available commands."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook lists the available commands, command description and example usage as well as the link to the User Guide."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Get help for a command"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "1.  User requests for help for a command."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook lists the command description and example usage."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: Add a sale to a contact"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1.  User requests to list contacts."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "2.  StonksBook shows a list of contacts."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "3.  User requests to add a sale to a specific contact in the list."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "4.  StonksBook adds a sale to the specific contact."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 2a. The list of contacts is empty."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 3a. The given contact index is invalid."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 3b. The given sale already exists"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * 3b1. StonksBook shows an error message stating that the given sale already exists."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 3c. The given parameters (e.g. unit price, quantity) are not in the correct format."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * 3c1. StonksBook shows an error message, reminding the user of the correct format."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Use case: List all sales"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1.  User requests to list all sales."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "2.  StonksBook shows all sales."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Use case: List all sales belonging to a contact"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1.  User requests to list contacts."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "2.  StonksBook shows a list of contacts."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "3.  User requests to view all sales belonging to a specific contact in the list."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "4.  StonksBook shows all sales belonging to the specific contact."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 2a. The list of contacts is empty."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 3a. The given contact index is invalid."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Use case: Delete a sale"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1.  User requests to list sales."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "2.  StonksBook shows a list of sales."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "3.  User requests to delete a sale of a specified index."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "4.  StonksBook deletes the specified sale."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 2a. The list of sales is empty."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* 4a. The given sale index is invalid."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    * 4a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Use case: Add contact to archive"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1.  User requests to list contacts."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "2.  StonksBook shows a list of contacts."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "3.  User requests to add a specific person in the list to archive."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "4.  StonksBook adds the person to archive."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * 3a1. StonksBook shows an error message."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "4.  The size of the application should not exceed 100Mb."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "5.  The features of the application should be easily testable."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "6.  The application, along with all my existing data, should be portable."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "7.  Should be able to function without having to rely on being connected to a network."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "8.  The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Prerequisites: List all persons using the `contact list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `contact delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `contact delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Other incorrect delete commands to try: `contact delete`, `contact delete x`, `...` (where x is larger than the"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    list"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Adding a meeting"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. Adding a meeting while all persons are being shown"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Prerequisites: List all persons using the `contact list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `meeting add c/1 m/Lunch with Bob d/2020-10-30 12:00 du/60`\u003cbr\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: A new meeting is created that is associated with the first contact in the currently displayed list of"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      persons, has message \"Lunch with Bob\", and is scheduled from 30 October 2020, 12pm to 1pm. The meeting list"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      should remain sorted in ascending order based on the scheduled date."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `meeting add`\u003cbr\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: No meeting is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Other incorrect delete commands to try: `meeting add c/-1 m/Lunch with Bob d/2020-10-30 12:00 du/60`, `meeting"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    add c/1 m/ d/2020-10-30 12:00 du/60`, `meeting add c/1 m/Lunch with Bob d/30/10/2020 12pm du/60`, `meeting add c"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /1 m/Lunch with Bob d/2020-10-30 12:00 du/30min`\u003cbr\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Deleting a meeting"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. Deleting a meeting while all meetings are being shown"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Prerequisites: List all meetings using the `meeting list` command. Multiple meetings in the list."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `meeting delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: First meeting is deleted from the list. Details of the deleted meeting shown in the status message."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `meeting delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: No meeting is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Other incorrect delete commands to try: `meeting delete`, `meeting delete x`, `...` (where x is larger than the"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Adding a reminder"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. Adding a reminder while all persons are being shown"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Prerequisites: List all persons using the `contact list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `reminder add c/1 m/Follow up with Bob d/2020-10-30 12:00`\u003cbr\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: A new reminder is created that is associated with the first contact in the currently displayed list of"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      persons, has message \"Follow up with Bob\", and is scheduled on 30 October 2020, 12pm. The reminder list"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      should remain sorted in ascending order based on the scheduled date."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `reminder add`\u003cbr\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: No meeting is reminder. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Other incorrect delete commands to try: `reminder add c/-1 m/Follow up with Bob d/2020-10-30 12:00`, `reminder"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    add c/1 m/ d/2020-10-30 12:00`, `reminder add c/1 m/Follow up with Bob d/30/10/2020 12pm`\u003cbr\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Deleting a reminder"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. Deleting a reminder while all reminder are being shown"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Prerequisites: List all reminder using the `reminder list` command. Multiple reminder in the list."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `reminder delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: First reminder is deleted from the list. Details of the deleted reminder shown in the status message."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Test case: `reminder delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: No reminder is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   1. Other incorrect delete commands to try: `reminder delete`, `reminder delete x`, `...` (where x is larger than the"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      Expected: Similar to previous."
      }
    ],
    "authorContributionMap": {
      "jmleong666": 126,
      "AaronnSeah": 51,
      "Asthenosphere": 102,
      "hakujitsu": 185,
      "-": 317,
      "sebastiantoh": 555
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook is a contact management application that is created for salesmen."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Many salesmen waste their time manually managing their contacts and sales data. They often require"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " several different applications to carry out these tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " StonksBook aims to integrate the key tools used by salesmen into an all-in-one application that can empower them to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  effectively curate their contact list. StonksBook also provides many tools that can boost one\u0027s sales peformance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  through the use of sophisticated data analysis techniques."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "This section will provide a quick guide to get StonksBook up and running on your computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "1. Download the latest `stonksbook.jar` from [here](https://github.com/AY2021S1-CS2103T-T11-1/tp/releases)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for StonksBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "   \u003cimg src\u003d\"images/Ui.png\" alt\u003d\"Ui\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "   * **`contact list`** : Lists all contacts."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "   * **`contact add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to StonksBook."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "   * **`contact delete`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "   * **`purge`** : Deletes all contacts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Contacts"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Adding a contact: `contact add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Adds a contact to StonksBook."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `contact add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]… [r/REMARK]…​`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ":bulb: Tip: A contact can have any number of tags (including 0)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The contact tags provided must exist in StonksBook before you can associate this contact with them."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal r/blacklisted`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Editing a contact: `contact edit`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Edits an existing contact in StonksBook."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Format: `contact edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [r/REMARK]`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Edits the contact at the specified `INDEX`. The index refers to the index number shown in the displayed contact list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* When editing a contact\u0027s tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* When editing a contact\u0027s remark, the previous remark will also be removed/overwritten."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* You can remove all the contact’s tags/remark by typing `t/` or  `r/` respectively without specifying any tags/remark after it."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The contact tags provided must exist in StonksBook before you can associate this contact with them."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact edit 1 p/91234567 e/johndoe@example.com` edits the phone number and email address of the 1st contact to be 91234567 and johndoe@example.com respectively."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact edit 2 n/Betsy Crower t/` edits the name of the 2nd contact to be Betsy Crower and clears all existing tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Listing all contacts: `contact list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Shows a list of all contacts in StonksBook."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format:`contact list`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Locating contacts by name: `contact find`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Finds contacts whose names exactly match or is similar to any of the given keywords."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `contact find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The search is case-insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The order of the keywords does not matter. e.g. Hans Bo will match Bo Hans"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* You can only search based on the contact name."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Contacts matching at least one keyword will be returned (i.e. OR search). e.g. Hans Bo will return Hans Gruber, Bo Yang"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* keyword does not have to exactly match a contact name. e.g. alx will return Alex Yeoh"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The contact list is ordered by non-ascending similarity."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Exact matches (if exist) will appear as the first few results."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/contactFindMockup.png\" alt\u003d\"result for \u0027contact find keyword\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact find alex david` returns Alex Yeoh, David Li"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact find alx` returns Alex Yeoh"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact find alx david` returns David Li, Alex Yeoh"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "#### Sorting contacts: `contact sort`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Sorts contacts based on the name, email address or the total sale amount associated to the contact."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `contact sort KEYWORD [ORDER]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `KEYWORD` must exactly match to one of the following:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    * `n/` for name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    * `e/` for email address"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    * `s/` for total sales amount"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If `ORDER` is present, `ORDER` must exactly match `desc`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If `ORDER` is absent, contacts will be sorted in non-descending order. Otherwise, contacts will be sorted in non-ascending order."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The sorted result will last until other contact commands (except `contact delete`) are executed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact sort e/ desc` sorts the contact list based on the email address in non-ascending order"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact find n/`  sorts the contact list based on the contact name in non-descending order"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contact find s/ desc` sorts the contact list based on the total sales amount in non-ascending order"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Deleting a contact: `contact delete`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Deletes the specified contact from StonksBook. All associated reminders and meetings will be deleted as well."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `contact delete INDEX`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* Deletes the contact at the specified `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "`contact list` followed by `contact delete 2` deletes the 2nd contact in StonksBook."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "`contact find Betsy` followed by `contact delete 1` deletes the 1st contact in the results of the find command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Adding a tag: `tag add` \\[Wang Luo\\]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Adds a new customised tag of the specified name to either the contact tags or sales tags. If there is an existing tag with this name, this command will not result in any change in state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `tag add c/ (or s/) t/TAG`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* Adds a tag with the specified `TAG` as the tag name to the contact tag list or sales tag list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* If this tag name already exists in the tag list, there will be no change in the program state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The type of tag is specified by the empty prefix `c/` or `s/`, where `c/` adds the tag to the contact tag list, whilst `s/` adds the tag to the sales tag list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `TAG` field must be provided."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag add s/ t/electronics` adds the tag `electronics` to the sales tag list in StonksBook."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Listing all tags: `tag list` \\[Wang Luo\\]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Displays a list of all tags created so far."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/tagListMockup.png\" alt\u003d\"result for \u0027tag list\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `tag list`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag list` displays all tags available in StonksBook."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Editing a tag: `tag edit` \\[Wang Luo\\]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Edits an existing tag in StonksBook to the specified tag name. All entries previously associated with this tag will be updated to associated with the updated tag."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `tag edit INDEX t/NAME`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* Edits the name of the tag at the specified `INDEX` to be the specified `NAME`. The `INDEX` refers to the index number shown in the list displayed by the `tag list` command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `INDEX` must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `NAME` and `INDEX` fields must be provided."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* All contacts or sales that have been previously associated with this tag will be updated automatically to be associated with the updated tag."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag edit 1 n/friends` updates the name of the first tag to `close friends`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Deleting a tag: `tag delete` \\[Wang Luo\\]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Deletes the specified tag from the tag list. The tag information in all entries previously associated with this tag will also be cleared."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `tag delete INDEX`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* Deletes the name of the tag at the specified `INDEX`. The `INDEX` refers to the index number shown in the list displayed by the `tag list` command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `INDEX` must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `INDEX` field must be provided."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* All contacts that have been previously associated with this tag will be updated so that their associations with this tag will be cleared."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag delete 1` deletes the first tag from the tag list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Retrieving entries by tag: `tag find` \\[Wang Luo\\]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Displays all entries (including contacts, items, etc.) that are associated with the specified tag."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/tagFindMockup.png\" alt\u003d\"result for \u0027tag find\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `tag find INDEX [c/]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* Displays all entries of associated with the tag at `INDEX`. The `INDEX` refers to the index number shown in the list displayed by the `tag list` command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `INDEX` must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The `INDEX` field must be provided."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* An additional `c/` field can be provided when performing searching on sales tags. This field results in all contacts who purchased sales items associated with this tag to be displayed. Adding this field will have no effect on the search results for contact tags."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag find 1` displays all contacts associated with the first tag displayed by the `tag list` command, assuming there are more than one contact tags."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag find 5` displays all sales associated with the seventh tag displayed by the `tag list` command, assuming there are less than five contact tags."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `tag find 5 c/` displays all contacts who have purchased items associated with the tenth tag, assuming there are less than five contact tags."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Sales"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Adding a sale to a customer: `sale add`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Adds a sale of specified name, unit price and quantity, to the specified contact."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `sale add c/CONTACT_INDEX n/ITEM_NAME d/DATETIME_OF_PURCHASE p/UNIT_PRICE q/QUANTITY t/TAG…`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Adds a sale made to the contact at the specified `CONTACT_INDEX`, with details such as the name of item sold, the unit price, and the quantity."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* The `CONTACT_INDEX` refers to the index number shown in the displayed contact list. The contact index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* The `DATETIME_OF_PURCHASE` must be in the format `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* The `UNIT_PRICE` must be a positive number with 2 decimal places, in format `DOLLARS.CENTS`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* The `QUANTITY` must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* It is compulsory to have a tag for the sales item. This is to ensure the ease of data analytics."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* The tags provided must exist in StonksBook first before you can associate the sales item to them."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `sale add c/4 n/Notebook d/2020-10-30 15:00 p/6.00 q/2 t/stationery` Adds a sale made to the contact that is ordered 4th on the displayed contact list. This is a sale of 2 Notebooks, each of price $6.00, made on 30 October at 3.00, with the tag \"stationery\"."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Editing an existing sale: `sale edit`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Edits an existing sale in StonksBook."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Format: `sale edit SALE_INDEX [c/CONTACT_INDEX] [n/ITEM_NAME] [d/DATETIME_OF_PURCHASE] [p/UNIT_PRICE] [q/QUANTITY] [t/TAG]…`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Edits the sale at the specified `SALE_INDEX`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* When editing a sale\u0027s tags, the existing tags of the sale will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* You can remove all the sale’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale edit 2 n/B5 Notebook p/4.00 q/10` edits the name of the 2nd sale to be B5 Notebook, and assigns it a quantity of 10 with unit price $4.00."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale edit 3 t/` clears the tags of the 3rd sale."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "#### Listing all sales: `sale list`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Shows a list of sales."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/saleListMockup.png\" alt\u003d\"result for \u0027sale list\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `sale list [c/CONTACT_INDEX] [m/MONTH y/YEAR]`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* At most one optional parameter can be present."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `CONTACT_INDEX` refers to the index number"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "  shown in the displayed contact list and"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "  must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `MONTH` must be an integer between 1 and 12 inclusive."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `YEAR` must be an integer greater than 0."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If no optional parameter is present:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * all sales are listed."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If optional parameter `CONTACT_INDEX` is present:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * all sales made to a contact with the specified index are listed."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If optional parameter `[m/MONTH y/YEAR]` is present:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * all sales whose associated date is in the specified `MONTH` and `YEAR` are listed."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale list` lists all sales."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale list c/5` lists all sales made to the 5th contact in the contact list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `sale list m/6 y/2020` lists all sales whose associated date is within June 2020."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Deleting a sales item: `sale delete`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Deletes a sales item of specified index."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Format: `sale delete s/SALE_INDEX`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* In the list of sales, the sale of `SALE_INDEX` is deleted."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* The  `SALE_INDEX` refers to the index number shown in the displayed sale list, and must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "* `sale delete s/4` deletes the 4th sale made in the list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Scheduled Meetings"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook allows you to manage your scheduled meetings within the application."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Adding a scheduled meeting: `meeting add` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Adds a scheduled meeting with the specified contact in StonksBook."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `meeting add c/CONTACT_INDEX m/MESSAGE d/START_DATETIME du/DURATION`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Adds a scheduled meeting with the contact at the specified `CONTACT_INDEX`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The start datetime must be in the format `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The duration is specified in minutes and must be a positive integer."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `meeting add c/2 m/Follow-up meeting d/2020-10-30 15:00 du/60` Adds a 1-hour long meeting titled `Follow-up meeting` with the 2nd contact in StonksBook that is scheduled for 30th October 2020 at 3PM."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `meeting add c/3 m/Call to finalise details d/2020-10-30 08:00 du/30` Adds a 30-minute long meeting titled `Call to finalise details` with the 3rd contact in StonksBook that is scheduled for 30th October 2020 at 8AM."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Listing all meetings: `meeting list` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Shows a list of all meetings. By default, the list only shows upcoming meetings. This list is sorted in increasing order based on the date the meeting is scheduled."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/meetingListMockup.png\" alt\u003d\"result for \u0027meeting list\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `meeting list [c/CONTACT_INDEX] [a/]`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* When an index is specified, the list will only show meetings associated with the contact at the specified index."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* You can show all meetings, including those that have passed, by typing `a/`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Deleting a meeting: `meeting delete` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Deletes the specified meeting from StonksBook."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `meeting delete INDEX`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Deletes the schedule at the specified `INDEX`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index refers to the index number shown in the displayed meetings list."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `meeting list 5` followed by `meeting delete 2` deletes the 2nd meeting that is associated with the 5th contact in StonksBook."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "#### Analysing meetings: `meeting stats`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Analyses the meeting data and visualises the statistical result."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `meeting stats [NUMBER_OF_MONTHS] [m/MONTH y/YEAR]`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* At most one optional parameter can be present."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `NUMBER_OF_MONTHS` refers to the number of months to be included in the result."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `NUMBER_OF_MONTHS` must be an integer between 2 and 6 inclusive."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `MONTH` must be an integer between 1 and 12 inclusive."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `YEAR` must be an integer greater than 0."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If no optional parameter is present:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * The result is the number of meetings whose start date is in the current month and year"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If optional parameter `[m/MONTH y/YEAR]` is present:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * The result is the number of meetings whose start date is in the specified `MONTH` and `YEAR`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* If optional parameter `[NUMBER_OF_MONTHS]` is present:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * The result is a bar chart on the number of meetings"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     whose start date is within each of the previous `NUMBER_OF_MONTHS` - 1 months and"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     the current month and year."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `meeting stats` will return the number of meetings whose start date is in the October 2020"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   if the current month is October and the current year is 2020."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `meeting stats m/8 y/2020` will return the number of meetings whose start date is in August 2020."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `meeting stats 3` will return a bar chart containing the number of meetings whose start date is within"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   June 2020, July 2020 and August 2020 respectively if the current month is August and the current year is 2020."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Reminders"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook allows you to manage your reminders within the application."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Adding reminders: `reminder add` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Adds a reminder scheduled on a particular date that is associated with the specified contact to StonksBook."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `reminder add c/CONTACT_INDEX m/MESSAGE d/DATETIME`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Adds a reminder associated with the contact at the specified `CONTACT_INDEX`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The datetime must be in the format `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `reminder add c/2 m/Send follow-up email d/2020-10-30 15:00` Adds a reminder associated with the 2nd contact that is scheduled for 30th October 2020 3PM, with the message `Send follow-up email`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "#### Editing a reminder: `reminder edit` \\[Sebastian Toh Shi Jian\\] and \\[Wang Luo\\]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Edits an existing reminder in StonksBook."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Format: `reminder edit INDEX [c/CONTACT_INDEX] [m/MESSAGE] [d/DATETIME] [st/STATUS]`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Edits the reminder at the specified `INDEX`. The index refers to the index number shown in the displayed reminder list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* `STATUS` can be either `pending` or `completed`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `reminder edit 1 c/2` edits the 1st reminder to be associated with the second contact in the displayed contact list."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `reminder edit 3 m/Follow up call d/2020-11-28 13:00` edits the message and scheduled date of the 3rd reminder to be \"Follow up call\" and \"28th November 2020, 1PM\" respectively."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Listing all reminders: `reminder list` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Shows a list of all reminders created, sorted in increasing order based on the date the reminder is scheduled."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/reminderListMockup.png\" alt\u003d\"result for \u0027reminder list\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `reminder list`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Deleting a reminder: `reminder delete` \\[Sebastian Toh Shi Jian\\]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Deletes the specified reminder from StonksBook."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Format: `reminder delete INDEX`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Deletes the reminder at the specified `INDEX`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index refers to the index number shown in the displayed reminders list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* `reminder list` followed by `reminder delete 2` deletes the 2nd reminder in StonksBook."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "### Archive"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "StonksBook allows you to archive contacts who are no longer active so that you can focus on contacts who can bring you the Stonks."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Adding a contact to the archive: `archive add`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Adds the specified contact to the archive."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Format: `archive add INDEX`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Adds the contact at the specified `INDEX` to the archive."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Can only be used when the contacts list is displayed."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* When the contact list is displayed on your StonksBook, entering `archive add 3` adds the third contact on your list to the archive."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Listing contacts in the archive: `archive list`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Shows the list of your archived contacts."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Format: `archive list`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* When entered, if the contacts list is displayed it will be replaced with the archived contacts list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* You can edit and delete contacts in the archive using `contact edit` and `contact delete` when the archived contacts list is displayed."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Entering `archive list` displays all your archived contacts."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Entering `archive list` followed by `contact delete 2` deletes the second contact on your archived contacts list from StonksBook."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Removing contacts from the archive: `archive remove`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Removes the specified contact from the archive. The specified contact will appear on your contact list again."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Format: `archive remove INDEX`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Removes the contact at the specified `INDEX` from the archive."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Does not delete the contact from StonksBook. To delete the contact use `contact delete`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Can only be used when the archived contacts list is displayed."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* When the archived contacts list is displayed on your StonksBook, entering `archive remove 2` removes the fourth contact on your list from the archive back to your contacts list."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "### Miscellaneous"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "#### Error resolution suggestion:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Gives an approximate match (if exists) of the most similar command to an unknown user input."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contac add` will return a suggestion of `contact add`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contt ad` will return a suggestion of `contact add`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "* `contacta ` will return a suggestion of `contact add`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "#### Navigate between previous inputs within the session:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Pressing the up and down keys retrieves the previous and next input respectively, if there is one."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Viewing help: `help`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Lists the command word, command description and example"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "usage for each available command as well as the link to the User Guide."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cimg src\u003d\"images/helpAllMockup.png\" alt\u003d\"result for \u0027help\u0027\" width\u003d\"400px\"\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Clearing all past interactions: `clear`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Clears all past interactions with the StonksBook GUI within the session."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Removing all data: `purge`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Clears all data from StonksBook."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Format: `purge`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "#### Exiting the program: `exit`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous StonksBook home folder."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Contact Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​[r/REMARK]…` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague r/birthday: 20 August`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Contact Delete** | `contact delete INDEX` \u003cbr\u003e e.g., `contact delete 3`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Contact Edit** | `contact edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​[r/REMARK]…` \u003cbr\u003e e.g., `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**Contact Find** | `contact find KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g., `contact find James Jake`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**Contact Sort** | `contact sort KEYWORD [ORDER]` \u003cbr\u003e e.g., `contact sort n/ desc`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Contact List** | `contact list`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Sale Add** | `sale add c/CONTACT_INDEX d/DATETIME_OF_PURCHASE n/ITEM_NAME p/UNIT_PRICE q/QUANTITY [t/TAG]…` \u003cbr\u003e e.g., `sale add c/4 n/Notebook d/2020-10-30 15:00 p/6.00 q/2 t/stationery`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Sale Edit** | `sale edit SALE_INDEX [c/CONTACT_INDEX] [n/ITEM_NAME] [d/DATETIME_OF_PURCHASE] [p/UNIT_PRICE] [q/QUANTITY] [t/TAG]…`  \u003cbr\u003e e.g., `sale edit 2 n/B5 Notebook p/4.00 q/10`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**Sale List** | `sale list [c/CONTACT_INDEX] [m/MONTH y/YEAR]`  \u003cbr\u003e e.g., `sale delete c/3`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "**Sale Delete** | `sale delete s/SALE_INDEX` \u003cbr\u003e e.g., `sale delete s/4`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Tag Add** | `tag add c/ (or s/) t/TAG` \u003cbr\u003e e.g., `tag add c/ t/important`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Tag List** | `tag list`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Tag Edit** | `tag edit INDEX n/NAME` \u003cbr\u003e e.g., `tag edit 1 n/family`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Tag Delete** | `tag delete INDEX` \u003cbr\u003e e.g., `tag delete 1`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "**Tag Find** | `tag find INDEX [MODEL]` \u003cbr\u003e e.g., `tag find 1 c/`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Meeting Add** | `meeting add c/CONTACT_INDEX m/TITLE d/START_DATETIME du/DURATION` \u003cbr\u003e e.g., `meeting add 2 m/Follow-up meeting d/2020-10-30 15:00 du/60`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Meeting List** | `meeting list [c/CONTACT_INDEX] [a/]`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Meeting Delete** | `meeting delete INDEX` \u003cbr\u003e e.g., `meeting delete 3`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "**Meeting Stats** | `meeting stats [NUMBER_OF_MONTHS] [m/MONTH y/YEAR]` \u003cbr\u003e e.g., `meeting stats 3`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Reminder Add** | `reminder add c/CONTACT_INDEX m/MESSAGE d/DATETIME` \u003cbr\u003e e.g., `reminder add 2 m/Send follow-up email d/2020-10-30 15:00`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Reminder Edit** | `reminder edit INDEX [c/CONTACT_INDEX] [m/MESSAGE] [d/DATETIME]` \u003cbr\u003e e.g., `reminder edit 3 m/Follow up call d/2020-11-28 13:00`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Reminder List** | `reminder list`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "**Reminder Delete** | `reminder delete INDEX` \u003cbr\u003e e.g., `reminder delete 4`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Archive Add** | `archive add INDEX` \u003cbr\u003e e.g., `archive add 1`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Archive List** | `archive list`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Archive Remove** | `archive remove INDEX` \u003cbr\u003e e.g., `archive remove 2`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Clear Chatbox** | `clear`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Delete All Data Entries** | `purge`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**Exit Application** | `exit`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 131,
      "jmleong666": 60,
      "Asthenosphere": 78,
      "hakujitsu": 54,
      "-": 112,
      "sebastiantoh": 142
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "title: StonksBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T11-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T11-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T11-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "**StonksBook is a desktop application for managing your business contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* If you are interested in using StonksBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* If you are interested about developing StonksBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* Adapted and evolved from: [AddressBook Level-3](https://se-education.org/addressbook-level3/)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5), [Ikonli](https://github.com/kordamp/ikonli)"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 5,
      "-": 12,
      "sebastiantoh": 3
    }
  },
  {
    "path": "docs/team/aaronnseah.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " title: Aaron Seah\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " ---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " ## Project: StonksBook (WIP)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " StonksBook is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, StonksBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Enhancements to existing features**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Documentation**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * User Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   * Developer Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * **Tools**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 34
    }
  },
  {
    "path": "docs/team/asthenosphere.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "title: Wang Luo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "## Project: StonksBook (WIP)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "StonksBook is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, StonksBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 44
    }
  },
  {
    "path": "docs/team/hakujitsu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "title: Kwek Min Yih\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " ## Project: StonksBook (WIP)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " StonksBook is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, StonksBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Enhancements to existing features**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Documentation**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   * User Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   * Developer Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * **Tools**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "   *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 34
    }
  },
  {
    "path": "docs/team/jmleong666.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "title: jmleong666\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "## Project: StonksBook (WIP)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "StonksBook is a desktop address book application used for managing sales contacts. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **New Feature**: Added the ability to clear past interactions with the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  * What it does: allows the user to clear up the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  * Justification: This feature improves user experience."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * Added documentation for the features `purge` and `clear`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    * Added use cases for `purge` and `clear` as well as a few non-functional requirements."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 31
    }
  },
  {
    "path": "docs/team/sebastiantoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "title: Sebastian Toh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "## Project: StonksBook (WIP)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "StonksBook is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, StonksBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 3, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    protected HostServices hostServices;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        hostServices \u003d getHostServices();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ui \u003d new UiManager(logic, hostServices);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "hakujitsu": 1,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/MonthAndYear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Store a month and year."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthAndYear {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a MonthAndYear Object from the given {@code month} and {@code year}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthAndYear(Month month, Year year) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return Objects.hash(this.month, this.year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof MonthAndYear // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.month.equals(((MonthAndYear) other).month)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.year.equals(((MonthAndYear) other).year));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/MonthlyCountData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Store a data object for monthly count data statistic."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyCountData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthAndYear monthAndYear;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final int count;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates MonthlyCountData Object from the given {@code monthAndYear} and {@code count}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountData(MonthAndYear monthAndYear, int count) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(monthAndYear);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthAndYear \u003d monthAndYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the String representation of MonthAndYear."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public String getMonthAndYearAsStr() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assert !Objects.isNull(monthAndYear.getMonth())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 !Objects.isNull(monthAndYear.getYear());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return String.format(\"%s %s\", monthAndYear.getMonth(), monthAndYear.getYear());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the number of counts related to MonthAndYear object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assert count \u003e\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof MonthlyCountData // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.monthAndYear.equals(((MonthlyCountData) other).monthAndYear)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.count \u003d\u003d ((MonthlyCountData) other).count);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/MonthlyCountDataSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Stores MonthlyCountData objects and a title to describe the dataset"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyCountDataSet {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final List\u003cMonthlyCountData\u003e monthlyCountDataList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet(List\u003cMonthlyCountData\u003e monthlyCountDataList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthlyCountDataList \u003d monthlyCountDataList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cMonthlyCountData\u003e getMonthlyCountDataList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return monthlyCountDataList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof MonthlyCountDataSet // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.monthlyCountDataList.equals(((MonthlyCountDataSet) other).monthlyCountDataList)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 ((Objects.isNull(this.title) \u0026\u0026 Objects.isNull(((MonthlyCountDataSet) other).title))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    || this.title.equals(((MonthlyCountDataSet) other).title)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/MonthlyListMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Stores a list of items of type T based on the key of \u003c month, year \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyListMap\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Map\u003cMonthAndYear, List\u003cT\u003e\u003e monthlyListMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyListMap() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthlyListMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Adds {@code item} of type T to an item list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * based on the key of {@code month} and {@code year}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month a valid month number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year a valid year number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item item of type T"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void addItem(Month month, Year year, T item) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear key \u003d new MonthAndYear(month, year);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (this.monthlyListMap.containsKey(key)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.monthlyListMap.get(key).add(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.monthlyListMap.put(key, new ArrayList\u003c\u003e(Collections.singleton(item)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Removes {@code item} of type T from an item list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * based on the key of {@code month} and {@code year} if exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month a valid month number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year a valid year number"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item item of type T"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void removeItem(Month month, Year year, T item) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear key \u003d new MonthAndYear(month, year);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (this.monthlyListMap.containsKey(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (this.monthlyListMap.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                this.monthlyListMap.remove(key);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                this.monthlyListMap.get(key).remove(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the number of items in an item list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * based on the key of {@code month} and {@code year}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * If the key of {@code month} and {@code year} does not exist, the number is 0."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month a valid month number"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year a valid year number"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return the number of items in that month and year"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getItemCount(Month month, Year year) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear key \u003d new MonthAndYear(month, year);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (this.monthlyListMap.containsKey(key)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return this.monthlyListMap.get(key).size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the monthly item list for {@code month} and {@code year}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month valid month"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year  valid year"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return list of items in its natural order"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cT\u003e getItems(Month month, Year year) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear key \u003d new MonthAndYear(month, year);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.monthlyListMap.getOrDefault(key, Collections.emptyList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Removes all entries in the monthlyList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthlyListMap.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the item counts in the item list for {@code month}, {@code year}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and the previous @{numberOfMonths} - 1 months."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month valid month"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year  valid year"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param numberOfMonths  non-negative integer"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return MonthlyCountDataSet object, where the data is ordered by non-decreasing year and month"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cMonthlyCountData\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear currentMonthAndYear \u003d new MonthAndYear(month, year);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        result.add(new MonthlyCountData(currentMonthAndYear,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                this.monthlyListMap.getOrDefault(currentMonthAndYear, Collections.emptyList()).size()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (int i \u003d 1; i \u003c numberOfMonths; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            MonthAndYear previousMonthAndYear \u003d getPreviousMonthAndYear(month, year);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            result.add(new MonthlyCountData(previousMonthAndYear,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    this.monthlyListMap.getOrDefault(previousMonthAndYear, Collections.emptyList()).size()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            month \u003d previousMonthAndYear.getMonth();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            year \u003d previousMonthAndYear.getYear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Collections.reverse(result);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new MonthlyCountDataSet(result);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the month and year for"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * one month before {@code month} and {@code year}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param month valid month"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param year valid year"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return MonthAndYear object that is one month before the {@code month} and {@code year}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private MonthAndYear getPreviousMonthAndYear(Month month, Year year) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year yearResult \u003d year;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int monthResult \u003d month.getValue() - 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (monthResult \u003c\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            monthResult +\u003d 12;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            yearResult \u003d year.minusYears(1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month previousMonth \u003d Month.of(monthResult);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new MonthAndYear(previousMonth, yearResult);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/SimilarCommandWords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SimilarCommandWords extends SimilarItems\u003cString\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarCommandWords(String searchKeyword, double similarityThreshold) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        super(searchKeyword, similarityThreshold);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarCommandWords(String searchKeyword) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        super(searchKeyword);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    String getAttributeAsStr(String item) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/SimilarContacts.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Represents a class to find similar contacts."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SimilarContacts extends SimilarItems\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarContacts(String searchKeyword, double similarityThreshold) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        super(searchKeyword, similarityThreshold);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarContacts(String searchKeyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        super(searchKeyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    String getAttributeAsStr(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return person.getName().fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/SimilarItems.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Represents a class to find similar items given a search keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public abstract class SimilarItems\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final double EXACT_MATCH \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final double NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final double DEFAULT_SIMILARITY_THRESHOLD \u003d 0.5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final String searchKeyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Map\u003cT, Double\u003e similarityMapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final double similarityThreshold;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Initializes a SimilarItems with the given searchKeyword and similarityThreshold."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param searchKeyword string to be compared to for similarity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param similarityThreshold minimum ratio to be considered similar"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarItems(String searchKeyword, double similarityThreshold) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(searchKeyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.searchKeyword \u003d searchKeyword;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.similarityMapper \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.similarityThreshold \u003d similarityThreshold;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Initializes a SimilarItems with the given searchKeyword."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param searchKeyword string to be compared to for similarity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SimilarItems(String searchKeyword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this(searchKeyword, DEFAULT_SIMILARITY_THRESHOLD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns true if {@code item} exists in the similarity mapper,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * which means that {@code item} is similar to attribute searchKeyword."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item an object to be checked if it is similar"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return boolean value indicating @{item}\u0027s existence in the similarity mapper"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public final boolean isInSimilarityMapper(T item) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.similarityMapper.containsKey(item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the value given the key {@code item} from the similarity matrix."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * If {@code item} does not exist in similarity matrix,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the value NOT_FOUND is returned."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item  an object that is of type T"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return the similarity ratio of {@code item} to the attribute search keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public final Double getFromSimilarityMatrix(T item) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.similarityMapper.getOrDefault(item, NOT_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Considers every item in {@code list} and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * adds entry \u003c T, similarity ratio \u003e to the similarity mapper if"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * if T is an exact / similar match for the attribute searchKeyword."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param itemList list of T objects to be considered for similarity"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public final void fillSimilarityMapper(List\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String[] searchKeywordComponents \u003d this.searchKeyword.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (T item : itemList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Map.Entry\u003cT, Double\u003e entry \u003d this.calculateHighestSimilarity(item, searchKeywordComponents);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (!Objects.isNull(entry)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                this.similarityMapper.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns entry \u003c{@code item}, similarity ratio\u003e if"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * there is an exact/similar match of {@code item} to the attribute searchKeyword."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Entry for {@code item} will have the largest similarity ratio."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * If no exact/similar match of {@code item}, returns null to indicate dissimilarity."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item object of type T to be checked for similarity"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param searchKeywordComponents strings to be checked against for similarity"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Map.Entry\u003cT, Double\u003e calculateHighestSimilarity(T item, String[] searchKeywordComponents) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (this.getAttributeAsStr(item).equalsIgnoreCase(this.searchKeyword)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return Map.entry(item, EXACT_MATCH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String[] components \u003d this.getAttributeAsStr(item).split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        double maxScore \u003d -1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (String searchKeyword : searchKeywordComponents) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            for (String word : components) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                double score \u003d this.calculateSimilarityRatio(searchKeyword, word);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                maxScore \u003d Math.max(maxScore, score);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (maxScore \u003d\u003d -1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return Map.entry(item, maxScore);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns similarity ratio for word and searchKeyword"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * if the similarity ratio of {@code word} and {@code searchKeyword} is greater"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * than or equal to the attribute similarityThreshold."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Else, returns -1 to indicate dissimilarity."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param searchKeyword string that is searched"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param word word compared to searchKeyWord"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private double calculateSimilarityRatio(String searchKeyword, String word) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        double score \u003d StringUtil.calculateSimilarityRatio(searchKeyword.toLowerCase(), word.toLowerCase());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (score \u003e\u003d this.similarityThreshold) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return score;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the attribute of T in String that"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * will be compared to attribute searchKeyword for similarity."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param item object of type T"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return attribute of T in String"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    abstract String getAttributeAsStr(T item);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the similarity mapper."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return map object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Map\u003cT, Double\u003e getSimilarityMapper() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return similarityMapper;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 900;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1024;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "jmleong666": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MOST_SIMILAR_COMMAND \u003d MESSAGE_UNKNOWN_COMMAND + \"\\nDo you mean: %1$s?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_SALES_LISTED_OVERVIEW \u003d \"%1$d sale items listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            \"Dates should be specified in the format \u0027yyyy-MM-dd HH:mm\u0027.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \"Durations should be specified as a positive integer denoting the number of minutes.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The reminder index provided is invalid.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The tag index provided is invalid.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_SALE_DISPLAYED_INDEX \u003d \"The sale index provided is invalid.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_INVALIID_LIST \u003d \"Please list all archived persons first!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_INVALIID_LIST \u003d \"Please list all contacts first!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_INVALID_MONTH \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            \"Month must be an integer value in between 1 and 12 inclusive.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"Year must be an non negative integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_OF_MONTHS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            \"The number of months must be an integer value in between 2 and 6 inclusive.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_SALE_TAGS_NOT_FOUND \u003d \"The provided sales tag(s) do not exist yet.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_CONTACT_TAGS_NOT_FOUND \u003d \"The provided contact tag(s) do not exist yet.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_STATUS \u003d \"The provided status is invalid.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 6,
      "jmleong666": 2,
      "Asthenosphere": 11,
      "-": 11,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/enums/GroupEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public enum GroupEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    CONTACT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    ARCHIVE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    TAG,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    REMINDER,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    MEETING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    SALE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 4,
      "jmleong666": 1,
      "Asthenosphere": 1,
      "hakujitsu": 1,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A container for LocalDateTime specific utility functions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if {@code date1} and @{code date2} refers to the same day without regards to the time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static boolean isSameDay(LocalDateTime date1, LocalDateTime date2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return LocalDateTime.of(date1.getYear(), date1.getMonthValue(), date1.getDayOfMonth(), 0, 0).equals("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(date2.getYear(), date2.getMonthValue(), date2.getDayOfMonth(), 0, 0)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Calculates the similarity ratio between {@code str1} and {@code str2}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * The similarity ratio ranges from 0.0 to 1.0."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * The higher the ratio, the greater the similarity between {@code str1} and {@code str2}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param str1 first string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param str2 second string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return similarity result as a ratio"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static double calculateSimilarityRatio(String str1, String str2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(str1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(str2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return 1 - 1.0 * calculateLevenshteinDistance(str1, str2) / Math.max(str1.length(), str2.length());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Calculates the levenshtein distance between {@code str1} and {@code str2}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns 0 if {@code str1} and {@code str2} are identical."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *\u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *   calculateLevenshteinDistance(\"ell\", \"hell\") \u003d\u003d 1 // add h to ell"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *   calculateLevenshteinDistance(\"hello\", \"hell\") \u003d\u003d 1 // remove o from hello"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *   calculateLevenshteinDistance(\"hello\", \"hullu\") \u003d\u003d 2 // substitute e with u and o with u in hello"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *   calculateLevenshteinDistance(\"Hello\", \"hello\") \u003d\u003d 1 // substitute H with h in Hello"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *   \u003c/pre\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param str1 first string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param str2 second string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static int calculateLevenshteinDistance(String str1, String str2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(str1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(str2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int rowSize \u003d str1.length() + 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int colSize \u003d str2.length() + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int[][] memoizedArray \u003d new int[rowSize][colSize];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (int str1Index \u003d 0; str1Index \u003c rowSize; str1Index++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            memoizedArray[str1Index][0] \u003d str1Index;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (int str2Index \u003d 0; str2Index \u003c colSize; str2Index++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            memoizedArray[0][str2Index] \u003d str2Index;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (int str1Index \u003d 1; str1Index \u003c rowSize; str1Index++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            for (int str2Index \u003d 1; str2Index \u003c colSize; str2Index++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                int insertionAtStr1 \u003d memoizedArray[str1Index][str2Index - 1] + 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                int deletionAtStr1 \u003d memoizedArray[str1Index - 1][str2Index] + 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                int matchOrReplacement \u003d memoizedArray[str1Index - 1][str2Index - 1]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        + (str1.charAt(str1Index - 1) \u003d\u003d str2.charAt(str2Index - 1) ? 0 : 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                int minBetweenInsertionAndDeletion \u003d Math.min(deletionAtStr1, insertionAtStr1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                int minBetweenAllThree \u003d Math.min(minBetweenInsertionAndDeletion, matchOrReplacement);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                memoizedArray[str1Index][str2Index] \u003d minBetweenAllThree;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return memoizedArray[str1.length()][str2.length()];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 66,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the sorted list of persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    ObservableList\u003cPerson\u003e getSortedPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the sorted list of meetings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cMeeting\u003e getSortedMeetingList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the sorted list of reminders."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cReminder\u003e getSortedReminderList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 2,
      "-": 49,
      "sebastiantoh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return model.getSortedPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getSortedMeetingList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return model.getSortedMeetingList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return model.getSortedReminderList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "-": 81,
      "sebastiantoh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Clears the chat box."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the chat box.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /** The chat box should be cleared. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final boolean clear;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthlyCountDataSet statisticResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * {@code showHelp}, {@code exit}, {@code clear}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean clear) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this(feedbackToUser, showHelp, exit, clear, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                         boolean exit, boolean clear, MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.clear \u003d clear;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.statisticResult \u003d statisticResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code statisticResult},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult(String feedbackToUser, MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this(feedbackToUser, false, false, false, statisticResult);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isClear() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return clear;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean hasStatisticsResult() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return !Objects.isNull(this.statisticResult);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getStatisticResult() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return statisticResult;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                \u0026\u0026 clear \u003d\u003d otherCommandResult.clear"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 ((Objects.isNull(statisticResult)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u0026\u0026 Objects.isNull(otherCommandResult.statisticResult))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    || (!Objects.isNull(statisticResult)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u0026\u0026 statisticResult.equals(otherCommandResult.statisticResult)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, clear, statisticResult);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 35,
      "jmleong666": 11,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PurgeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class PurgeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"purge\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been purged!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnknownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MOST_SIMILAR_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.contact.ContactCommandsParser.ALL_CONTACT_COMMAND_WORDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.meeting.MeetingCommandsParser.ALL_MEETING_COMMAND_WORDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.reminder.ReminderCommandsParser.ALL_REMINDER_COMMAND_WORDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.sale.SaleCommandsParser.ALL_SALE_COMMAND_WORDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.tag.TagCommandsParser.ALL_TAG_COMMAND_WORDS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.SimilarCommandWords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.SimilarItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Returns an approximate most similar command word to an unknown input if exists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final double SIMILARITY_THRESHOLD \u003d 0.4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final Map\u003cString, String\u003e SEARCH_WORDS_TO_COMMAND_WORDS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Stream.of(Arrays.asList(ExitCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    PurgeCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    ALL_CONTACT_COMMAND_WORDS, ALL_TAG_COMMAND_WORDS, ALL_REMINDER_COMMAND_WORDS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    ALL_MEETING_COMMAND_WORDS, ALL_SALE_COMMAND_WORDS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    .collect(Collectors.toMap(x -\u003e String.join(\"\", x.split(\"\\\\s+\")), x -\u003e x));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final String unknownInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates an UnknownCommand Object with the attribute {@code unknownInput}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param unknownInput attribute of UnknownCommand class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public UnknownCommand(String unknownInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(unknownInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.unknownInput \u003d unknownInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Finds an approximate most similar command word to a user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * If none exists, no suggestion will be given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return CommandResult object containing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *  the approximate most similar command word suggestion or no suggestion"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String inputWithNoWhiteSpace \u003d String.join(\"\", this.unknownInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarItems\u003cString\u003e similarCommandWords \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new SimilarCommandWords(inputWithNoWhiteSpace, SIMILARITY_THRESHOLD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarCommandWords.fillSimilarityMapper(new ArrayList\u003c\u003e(SEARCH_WORDS_TO_COMMAND_WORDS.keySet()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String mostSimilarCommandWord \u003d similarCommandWords.getSimilarityMapper()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .sorted((entry1, entry2) -\u003e entry2.getValue().compareTo(entry1.getValue()))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .map(Map.Entry::getKey)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .limit(1).collect(Collectors.joining());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (mostSimilarCommandWord.isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new CommandResult(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(String.format(MOST_SIMILAR_COMMAND,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                SEARCH_WORDS_TO_COMMAND_WORDS.get(mostSimilarCommandWord)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/archive/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Moves a contact to the archive.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived person: %1$s.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public AddCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person personToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (personToArchive.isArchived()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ARCHIVE_INVALIID_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assert !personToArchive.isArchived();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person archivedPerson \u003d new Person("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getId(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getPhone(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getEmail(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getAddress(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getTags(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getRemark(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                !personToArchive.isArchived(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getTotalSalesAmount()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, archivedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                || other instanceof AddCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((AddCommand) other).targetIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/archive/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return other instanceof ListCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/archive/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \": Removes a person from the archive without deleting the person.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final String MESSAGE_REMOVE_SUCCESS \u003d \"Removed Person from archive: %1$s. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"This Person will appear on your contact list again.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public RemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person personToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (!personToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNARCHIVE_INVALIID_LIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assert personToUnarchive.isArchived();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person unarchivedPerson \u003d new Person("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getId(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getName(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getPhone(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getEmail(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getAddress(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getTags(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getRemark(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToUnarchive.getTotalSalesAmount()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.setPerson(personToUnarchive, unarchivedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_SUCCESS, unarchivedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact add\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_NAME + \"NAME \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_NAME + \"John Doe \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_REMARK + \"Owes me $10\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public AddCommand(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tagList, Remark remark) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tagList, remark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int id \u003d model.getLatestContactId() + 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person toAdd \u003d new Person(id, name, phone, email, address, tagList, remark, false, BigDecimal.ZERO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!model.contactTagsExist(toAdd)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CONTACT_TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 name.equals(((AddCommand) other).name)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 phone.equals(((AddCommand) other).phone)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 email.equals(((AddCommand) other).email)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 address.equals(((AddCommand) other).address)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 tagList.equals(((AddCommand) other).tagList)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 remark.equals(((AddCommand) other).remark));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 4,
      "jmleong666": 1,
      "Asthenosphere": 8,
      "hakujitsu": 47,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s. All associated meetings and \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"reminders have been deleted as well.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "-": 49,
      "sebastiantoh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_CONTACT_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!model.contactTagsExist(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CONTACT_TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (editedPerson.isArchived()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Integer id \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        BigDecimal updatedTotalSalesAmount \u003d personToEdit.getTotalSalesAmount();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Person(id, updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                updatedTags, updatedRemark, personToEdit.isArchived(), updatedTotalSalesAmount);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private int id;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, remark);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setId(int id) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cInteger\u003e getId() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "jmleong666": 9,
      "Asthenosphere": 5,
      "hakujitsu": 39,
      "-": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.SimilarContacts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.SimilarItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Finds and lists all persons in address book whose name exactly matches the argument or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * partially matches some space-delimited word in the argument."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names exactly\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \" matches the argument or partially matches some space-delimited word in the argument. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public FindCommand(String argument) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Finds all the contacts whose names exactly matches the argument or"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * partially matches some space-delimited word in the argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * The filtered contact list is sorted by non-ascending similarity."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Contacts whose names exactly match the argument appear in the list first."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        //read the unfiltered list of contacts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cPerson\u003e list \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        //extract contacts whose name is similar / identical to the argument"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarItems\u003cPerson\u003e similarItems \u003d new SimilarContacts(this.argument);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.fillSimilarityMapper(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        model.updateFilteredPersonList(similarItems::isInSimilarityMapper);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        model.updateSortedPersonList((x, y) -\u003e similarItems.getFromSimilarityMatrix(y)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareTo(similarItems.getFromSimilarityMatrix(x)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.argument.equals(((FindCommand) other).argument)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 38,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other instanceof ListCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 4,
      "jmleong666": 2,
      "-": 19,
      "sebastiantoh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contact/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * sorts the contacts by a particular contact attribute"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * in non-ascending or non-descending order"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact sort\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the contacts.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"valid arguments: n/ for name, e/ for email address, s/ for total sales amount\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Parameters: KEYWORD [ORDER]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Example: contact sort n/ desc\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"sorted!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SORTING_ATTRIBUTE_INVALID \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            \"The given attribute to sort by is not valid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Prefix sortingAttribute;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final boolean isDesc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Comparator\u003cPerson\u003e comparator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a SortCommand to sort the contacts by {@code sortingAttribute}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and the sort order determined by {@code isDesc}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SortCommand(Prefix sortingAttribute, boolean isDesc) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(sortingAttribute);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.sortingAttribute \u003d sortingAttribute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.isDesc \u003d isDesc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Sorts the contacts based on the given attribute,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * in non-ascending order if isDesc is true,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * in non-descending order otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return the success message of the SortCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws CommandException if sorting attribute is not valid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (sortingAttribute.equals(PREFIX_CONTACT_NAME)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.comparator \u003d Comparator.comparing(person -\u003e person.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else if (sortingAttribute.equals(PREFIX_CONTACT_EMAIL)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.comparator \u003d Comparator.comparing(person -\u003e person.getEmail().value.toLowerCase());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else if (sortingAttribute.equals(PREFIX_TOTAL_SALES)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.comparator \u003d Comparator.comparing(Person::getTotalSalesAmount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new CommandException(MESSAGE_SORTING_ATTRIBUTE_INVALID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.sortByAttribute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void sortByAttribute(Model model) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(this.comparator);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (!this.isDesc) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            model.updateSortedPersonList(this.comparator);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            model.updateSortedPersonList(this.comparator.reversed());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 sortingAttribute.equals(((SortCommand) other).sortingAttribute)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 isDesc \u003d\u003d ((SortCommand) other).isDesc);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 93,
      "hakujitsu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Adds a meeting associated with a contact to StonksBook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a scheduled meeting with the given duration \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"that is associated with the specified contact. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_CONTACT + \"CONTACT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_MESSAGE + \"MESSAGE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_DATETIME + \"START_DATETIME\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_DURATION + \"DURATION\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_CONTACT + \"2 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_MESSAGE + \"Send follow-up email \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_DATETIME + \"2020-10-30 15:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_DURATION + \"30\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in StonksBook.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Index of the Person to be associated with this meeting."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Message message;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates an AddCommand that adds a {@code Meeting}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param index     The index of the Person to associate this Meeting to."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message   The message associated with this Meeting."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param startDate The start date of the Meeting."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param duration  The duration of the Meeting."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddCommand(Index index, Message message, LocalDateTime startDate, Duration duration) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(index, message, startDate, duration);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person personToAssociateWithMeeting \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting toAdd \u003d new Meeting(personToAssociateWithMeeting, message, startDate, duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (model.hasMeeting(toAdd)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model.addMeeting(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!(other instanceof AddCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand otherAddCommand \u003d (AddCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return index.equals(otherAddCommand.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 message.equals(otherAddCommand.message)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 startDate.equals(otherAddCommand.startDate)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 duration.equals(otherAddCommand.duration);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Deletes a meeting based on its displayed index in the meeting list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \": Deletes the meeting identified by the index number used in the displayed meeting list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Deleted Meeting: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d model.getSortedMeetingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d meetingList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meetingToDelete \u003d meetingList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Lists all meetings in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other instanceof ListCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/MultipleMeetingStatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Gets multiple monthly meeting counts"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MultipleMeetingStatsCommand extends StatsCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened a new window!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String DATASET_TITLE \u003d \"Meeting Count\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final int numberOfMonths;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a MultipleMeetingStatsCommand with the given {@code numberOfMonths}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MultipleMeetingStatsCommand(int numberOfMonths) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.numberOfMonths \u003d numberOfMonths;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple monthly meeting counts for months between"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the current month and the previous numberOfMonths - 1 months inclusive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return CommandResult object storing the success message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and the multiple monthly count result"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month currentMonth \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year currentYear \u003d Year.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet result \u003d model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .getMultipleMonthMeetingsCount(currentMonth, currentYear, numberOfMonths);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        result.setTitle(DATASET_TITLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof MultipleMeetingStatsCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 numberOfMonths \u003d\u003d (((MultipleMeetingStatsCommand) other).numberOfMonths));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/SingleMeetingStatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Gets single month meeting count"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SingleMeetingStatsCommand extends StatsCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The number of meeting \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"started in %1$s %2$s is %3$s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a SingleMeetingStatsCommand with the current month and year."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SingleMeetingStatsCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.month \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.year \u003d Year.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a SingleMeetingStatsCommand with the given {@code month} and {@code year}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SingleMeetingStatsCommand(Month month, Year year) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the number of meetings started in a particular month"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * stated by the attributes month and year."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return CommandResult object storing the result string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int result \u003d model.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                month.name(), year.getValue(), result));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof SingleMeetingStatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 year.equals(((SingleMeetingStatsCommand) other).year)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 month.equals(((SingleMeetingStatsCommand) other).month)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/StatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Statistics on meetings"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public abstract class StatsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting stats\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \": Outputs statistics on meetings.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Parameters: [NUMBER OF MONTHS] \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" m/10 y/2020 or \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + COMMAND_WORD + \" 4\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Adds a reminder associated with a contact to StonksBook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder scheduled on a particular date that \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"is associated with the specified contact. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_CONTACT + \"CONTACT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_MESSAGE + \"MESSAGE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_DATETIME + \"DATETIME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_CONTACT + \"2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_MESSAGE + \"Send follow-up email \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + PREFIX_DATETIME + \"2020-10-30 15:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in StonksBook.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Index of the Person to be associated with this reminder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Message message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDateTime scheduledDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates an AddCommand that adds a {@code Reminder}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param index         The index of the Person to associate this reminder to."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message       The message associated with this reminder."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param scheduledDate The scheduled date of the reminder."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddCommand(Index index, Message message, LocalDateTime scheduledDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(index, message, scheduledDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.scheduledDate \u003d scheduledDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person personToAssociateWithReminder \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder toAdd \u003d new Reminder(personToAssociateWithReminder, message, scheduledDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (model.hasReminder(toAdd)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model.addReminder(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!(other instanceof AddCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand otherAddCommand \u003d (AddCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return index.equals(otherAddCommand.index)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 message.equals(otherAddCommand.message)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 scheduledDate.equals(otherAddCommand.scheduledDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Deletes a reminder based on its displayed index in the reminder list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \": Deletes the reminder identified by the index number used in the displayed reminder list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e reminderList \u003d model.getSortedReminderList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d reminderList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminderToDelete \u003d reminderList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Edits the details of an existing reminder in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the reminder identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"by the index number used in the displayed reminder list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"[\" + PREFIX_CONTACT + \"CONTACT_INDEX] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"[\" + PREFIX_MESSAGE + \"MESSAGE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"[\" + PREFIX_REMINDER_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_MESSAGE + \"Follow up with Bob \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + PREFIX_DATETIME + \"2020-11-30 12:30\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_EDIT_REMINDER_SUCCESS \u003d \"Edited Reminder: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final EditReminderDescriptor editReminderDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param index                  of the reminder in the filtered reminder list to edit."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param editReminderDescriptor details to edit the reminder with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditCommand(Index index, EditReminderDescriptor editReminderDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(editReminderDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.editReminderDescriptor \u003d new EditReminderDescriptor(editReminderDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e lastShownList \u003d model.getSortedReminderList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder editedReminder \u003d createEditedReminder(model, reminderToEdit, editReminderDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!reminderToEdit.equals(editedReminder) \u0026\u0026 model.hasReminder(editedReminder)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model.setReminder(reminderToEdit, editedReminder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates and returns a {@code Reminder} with the details of {@code reminderToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * edited with {@code editReminderDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static Reminder createEditedReminder(Model model, Reminder reminderToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                                                 EditReminderDescriptor editReminderDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assert reminderToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assert editReminderDescriptor !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonsList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person updatedPerson \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                editReminderDescriptor.getContactIndex().map(index -\u003e lastShownPersonsList.get(index.getZeroBased()))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .orElse(reminderToEdit.getPerson());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message updatedMessage \u003d editReminderDescriptor.getMessage().orElse(reminderToEdit.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime updatedScheduledDate \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                editReminderDescriptor.getScheduledDate().orElse(reminderToEdit.getScheduledDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        boolean updatedCompletionStatus \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                editReminderDescriptor.isCompleted() \u003d\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        ? reminderToEdit.isCompleted()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        : editReminderDescriptor.isCompleted();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new Reminder(updatedPerson, updatedMessage, updatedScheduledDate, updatedCompletionStatus);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 editReminderDescriptor.equals(e.editReminderDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Stores the details to edit the reminder with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * corresponding field value of the reminder."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static class EditReminderDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private Index contactIndex;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private Message message;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private LocalDateTime scheduledDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        private Boolean completed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public EditReminderDescriptor() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         * A constructor that is used to create a Copy of the provided @{code EditReminderDescriptor}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public EditReminderDescriptor(EditReminderDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assert toCopy !\u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            setContactIndex(toCopy.contactIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            setMessage(toCopy.message);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            setScheduledDate(toCopy.scheduledDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            setCompleted(toCopy.completed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return CollectionUtil.isAnyNonNull(contactIndex, message, scheduledDate, completed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public void setContactIndex(Index contactIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.contactIndex \u003d contactIndex;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public Optional\u003cIndex\u003e getContactIndex() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return Optional.ofNullable(contactIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public void setMessage(Message message) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public void setCompleted(Boolean completed) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            this.completed \u003d completed;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public Optional\u003cMessage\u003e getMessage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return Optional.ofNullable(message);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public void setScheduledDate(LocalDateTime scheduledDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.scheduledDate \u003d scheduledDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getScheduledDate() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return Optional.ofNullable(scheduledDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public Boolean isCompleted() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return completed;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (!(other instanceof EditReminderDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            EditReminderDescriptor e \u003d (EditReminderDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return getContactIndex().equals(e.getContactIndex())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \u0026\u0026 getMessage().equals(e.getMessage())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    \u0026\u0026 getScheduledDate().equals(e.getScheduledDate())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    \u0026\u0026 isCompleted() \u003d\u003d e.isCompleted();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 20,
      "sebastiantoh": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Lists all reminders in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all reminders\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other instanceof ListCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_UNIT_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Adds a sale associated with a contact to StonksBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale add\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a sale of specified item name, unit price, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        + \"quantity and tags (optional), to the specified contact.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_CONTACT_INDEX + \"CONTACT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_NAME + \"ITEM_NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_DATE + \"DATETIME_OF_PURCHASE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_UNIT_PRICE + \"UNIT_PRICE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        + PREFIX_SALE_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        + PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_CONTACT_INDEX + \"2 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_NAME + \"Apple \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_DATE + \"2020-10-30 15:00 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + PREFIX_SALE_UNIT_PRICE + \"2.50 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        + PREFIX_SALE_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        + PREFIX_TAG + \"fruits\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New sale added: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SALE \u003d \"This sale already exists in StonksBook.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final ItemName itemName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final LocalDateTime dateOfPurchase;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final UnitPrice unitPrice;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates an AddCommand that adds a Sale of specified parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param index          The index of the Person to associate this sale to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param itemName       The item name of the Sale."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param dateOfPurchase The date of purchase of the Sale."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param quantity       The quantity of the Sale."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param unitPrice      The unit price of the Sale."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param tagList        The tagList belonging to the Sale."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public AddCommand(Index index, ItemName itemName, LocalDateTime dateOfPurchase,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                      Quantity quantity, UnitPrice unitPrice, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(index, itemName, dateOfPurchase, quantity, unitPrice, tagList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.dateOfPurchase \u003d dateOfPurchase;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale toAdd \u003d new Sale(itemName, personToEdit.getId(), dateOfPurchase, quantity, unitPrice, tagList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!model.saleTagsExist(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SALE_TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        BigDecimal newTotalSalesAmount \u003d toAdd.getTotalCost().add(personToEdit.getTotalSalesAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getId(), personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToEdit.getRemark(), personToEdit.isArchived(), newTotalSalesAmount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (model.hasSale(toAdd)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SALE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addSale(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!(other instanceof AddCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand otherAddCommand \u003d (AddCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return index.equals(otherAddCommand.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 itemName.equals(otherAddCommand.itemName)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 dateOfPurchase.equals(otherAddCommand.dateOfPurchase)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 quantity.equals(otherAddCommand.quantity)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 unitPrice.equals(otherAddCommand.unitPrice)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 tagList.equals(otherAddCommand.tagList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "Asthenosphere": 14,
      "hakujitsu": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/AllListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Lists all sales belonging to a specified contact."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class AllListCommand extends ListCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final String MESSAGE_SUCCESS_ALL_SALES_PRESENT \u003d \"Listing all sales:\\n%s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final String MESSAGE_SUCCESS_CONTACT_SALES_PRESENT \u003d \"Sales made to %s:\\n%s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final String MESSAGE_SUCCESS_ALL_SALES_EMPTY \u003d \"No sales made!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final String MESSAGE_SUCCESS_CONTACT_SALES_EMPTY \u003d \"No sales made to %s!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final boolean showAll;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates an AllListCommand with the following parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param showAll A boolean dictating if all sales should be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param targetIndex The index of the contact whose sales are to be displayed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public AllListCommand(boolean showAll, Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.showAll \u003d showAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cPerson\u003e sortedPersonList \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e sales \u003d model.getFilteredSaleList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (showAll) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            model.updateFilteredSaleList(x -\u003e true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (sales.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS_ALL_SALES_EMPTY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            String formattedListAsStr \u003d this.formatSaleListOutput(sales);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_ALL_SALES_PRESENT, formattedListAsStr));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d sortedPersonList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Person personToShow \u003d sortedPersonList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Predicate\u003cSale\u003e filterByContact \u003d x -\u003e x.getBuyerId() \u003d\u003d personToShow.getId();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            model.updateFilteredSaleList(filterByContact);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (sales.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                return new CommandResult(String.format("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        MESSAGE_SUCCESS_CONTACT_SALES_EMPTY, personToShow.getName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            String formattedListAsStr \u003d this.formatSaleListOutput(sales);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new CommandResult(String.format("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    MESSAGE_SUCCESS_CONTACT_SALES_PRESENT, personToShow.getName(), formattedListAsStr));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (other instanceof AllListCommand) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (!showAll) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                return targetIndex.equals(((AllListCommand) other).targetIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                return ((AllListCommand) other).showAll;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Deletes a sale based on its displayed index in the sale list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + \": Deletes the sale identified by the index number used in the displayed sale list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + \"Parameters: SALE_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_DELETE_SALE_SUCCESS \u003d \"Deleted Sale: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_NO_SALES_DISPLAYED \u003d \"No sales displayed, use `sale list` \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"to display sales before executing the `sale delete` command\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Index saleIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates an DeleteCommand that removes a sale from a specified contact."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param saleIndex Index of the sale to be removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DeleteCommand(Index saleIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.saleIndex \u003d saleIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cSale\u003e sales \u003d model.getFilteredSaleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cPerson\u003e people \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (model.getSortedSaleList().size() \u003e sales.size() \u0026\u0026 model.getFilteredSaleList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SALES_DISPLAYED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (saleIndex.getZeroBased() \u003e\u003d sales.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SALE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleToDelete \u003d sales.get(saleIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person personToEdit \u003d people.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .filter(person -\u003e person.getId().equals(saleToDelete.getBuyerId()))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        BigDecimal newTotalSalesAmount \u003d personToEdit.getTotalSalesAmount().subtract(saleToDelete.getTotalCost());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getId(), personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToEdit.getRemark(), personToEdit.isArchived(), newTotalSalesAmount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.removeSale(saleToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SALE_SUCCESS, saleToDelete));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 saleIndex.equals(((DeleteCommand) other).saleIndex)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "hakujitsu": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_UNIT_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SALES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Edits the details of an existing sale in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the sale identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"by the index number used in the displayed sale list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_SALE_CONTACT_INDEX + \"CONTACT_INDEX] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_SALE_NAME + \"ITEM_NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_SALE_DATE + \"DATETIME_OF_PURCHASE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_SALE_UNIT_PRICE + \"UNIT_PRICE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"[\" + PREFIX_SALE_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_SALE_NAME + \"File \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PREFIX_SALE_QUANTITY + \"25 \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_EDIT_SALE_SUCCESS \u003d \"Edited Sale: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SALE \u003d \"This sale already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Index saleIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final EditSaleDescriptor editSaleDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs a new EditCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param saleIndex of the sale in the filtered sale list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param editSaleDescriptor details to edit the sale with."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param personIndex of the person in the contact to assign as buyer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditCommand(Index saleIndex, EditSaleDescriptor editSaleDescriptor, Index personIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(saleIndex, editSaleDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.saleIndex \u003d saleIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.editSaleDescriptor \u003d new EditSaleDescriptor(editSaleDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cSale\u003e lastShownList \u003d model.getFilteredSaleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (saleIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SALE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleToEdit \u003d lastShownList.get(saleIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (personIndex !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            List\u003cPerson\u003e lastShownPeople \u003d model.getSortedPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (personIndex.getZeroBased() \u003e\u003d lastShownPeople.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Person newBuyer \u003d lastShownPeople.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setBuyerId(newBuyer.getId());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setBuyerId(saleToEdit.getBuyerId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedSale \u003d createEditedSale(saleToEdit, editSaleDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!model.saleTagsExist(editedSale)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SALE_TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!saleToEdit.isSameSale(editedSale) \u0026\u0026 model.hasSale(editedSale)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SALE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.setSale(saleToEdit, editedSale);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(PREDICATE_SHOW_ALL_SALES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SALE_SUCCESS, editedSale));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates and returns a {@code Sale} with the details of {@code saleToEdit}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static Sale createEditedSale(Sale saleToEdit, EditSaleDescriptor editSaleDescriptor) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assert saleToEdit !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ItemName updatedItemName \u003d editSaleDescriptor.getItemName().orElse(saleToEdit.getItemName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int updatedBuyerId \u003d editSaleDescriptor.getBuyerId().orElse(saleToEdit.getBuyerId());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        LocalDateTime updatedDatetimeOfPurchase \u003d editSaleDescriptor.getDatetimeOfPurchase()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .orElse(saleToEdit.getDatetimeOfPurchase());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UnitPrice updatedUnitPrice \u003d editSaleDescriptor.getUnitPrice().orElse(saleToEdit.getUnitPrice());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Quantity updatedQuantity \u003d editSaleDescriptor.getQuantity().orElse(saleToEdit.getQuantity());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editSaleDescriptor.getTags().orElse(saleToEdit.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Sale(updatedItemName, updatedBuyerId, updatedDatetimeOfPurchase, updatedQuantity, updatedUnitPrice,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                updatedTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return saleIndex.equals(e.saleIndex)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 editSaleDescriptor.equals(e.editSaleDescriptor)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 (Objects.equals(personIndex, e.personIndex));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Stores the details to edit the sale with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * corresponding field value of the sale."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static class EditSaleDescriptor {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private int buyerId;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private ItemName itemName;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private LocalDateTime datetimeOfPurchase;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private UnitPrice unitPrice;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public EditSaleDescriptor() {}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public EditSaleDescriptor(EditSaleDescriptor toCopy) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setBuyerId(toCopy.buyerId);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setItemName(toCopy.itemName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setDatetimeOfPurchase(toCopy.datetimeOfPurchase);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setUnitPrice(toCopy.unitPrice);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            setTags(toCopy.tagList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(buyerId, itemName, datetimeOfPurchase, unitPrice, quantity, tagList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setBuyerId(int id) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.buyerId \u003d id;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cInteger\u003e getBuyerId() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(buyerId);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setItemName(ItemName itemName) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cItemName\u003e getItemName() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(itemName);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setDatetimeOfPurchase(LocalDateTime datetimeOfPurchase) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.datetimeOfPurchase \u003d datetimeOfPurchase;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getDatetimeOfPurchase() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(datetimeOfPurchase);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setUnitPrice(UnitPrice unitPrice) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cUnitPrice\u003e getUnitPrice() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(unitPrice);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.tagList \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return (tagList !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagList)) : Optional.empty();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (!(other instanceof EditSaleDescriptor)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            EditSaleDescriptor e \u003d (EditSaleDescriptor) other;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return getBuyerId().equals(e.getBuyerId())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getItemName().equals(e.getItemName())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getDatetimeOfPurchase().equals(e.getDatetimeOfPurchase())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getUnitPrice().equals(e.getUnitPrice())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 265
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of sales.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"[\" + PREFIX_SALE_CONTACT_INDEX + \"CONTACT_INDEX (must be a positive integer)]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH \" + PREFIX_YEAR + \"YEAR]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + PREFIX_SALE_CONTACT_INDEX + \"3 or \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_MONTH + \"10 \" + PREFIX_YEAR + \"2020\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    String formatSaleListOutput(List\u003cSale\u003e saleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StringBuilder formattedSaleListAsStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (Sale sale : saleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            formattedSaleListAsStr.append(index).append(\". \").append(sale.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return formattedSaleListAsStr.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 21,
      "hakujitsu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/MonthlyListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyListCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have sold %d items in %s %s!\\n%s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final Comparator\u003cSale\u003e SORT_BY_DATE \u003d Comparator.comparing(Sale::getDatetimeOfPurchase);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a MonthlyListCommand object with the given {@code month} and {@code year}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyListCommand(Month month, Year year) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns the String representation of the monthly sale list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * based on the {@code month} and {@code year},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and sorts the list by the sale date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return formatted String representation of the monthly sale list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e monthlySaleList \u003d model.getMonthlySaleList(month, year);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlySaleList.sort(SORT_BY_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String formattedListAsStr \u003d this.formatSaleListOutput(monthlySaleList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                monthlySaleList.size(), month, year, formattedListAsStr));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof MonthlyListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 month.equals(((MonthlyListCommand) other).month)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 year.equals(((MonthlyListCommand) other).year));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sale/StatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Statistics on Sales"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale stats\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \": Outputs statistics on sales.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Parameters: NUMBER_OF_MONTHS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened a new window!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String DATASET_TITLE \u003d \"Sale Count\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final int numberOfMonths;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a StatsCommand with the given {@code numberOfMonths}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public StatsCommand(int numberOfMonths) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.numberOfMonths \u003d numberOfMonths;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple monthly meeting counts for months between"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the current month and the previous numberOfMonths - 1 months inclusive."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return CommandResult object storing the success message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and the multiple monthly count result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month currentMonth \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year currentYear \u003d Year.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet result \u003d model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .getMultipleMonthSaleCount(currentMonth, currentYear, numberOfMonths);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        result.setTitle(DATASET_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (other instanceof StatsCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 numberOfMonths \u003d\u003d (((StatsCommand) other).numberOfMonths));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tag/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Adds a tag to the StonksBook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            COMMAND_WORD + \": Adds a tag (for contacts or for sales) to the StonksBook. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"c/ (or s/) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + PREFIX_SALE + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + PREFIX_TAG + \"fruits\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_CONTACT_SUCCESS \u003d \"New contact tag added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_SALES_SUCCESS \u003d \"New sales tag added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT_TAG \u003d \"This contact tag already exists in StonksBook\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SALES_TAG \u003d \"This sales tag already exists in StonksBook\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_CONFLICT_TYPES \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            \"Invalid tag type provided! Please use either c/ or s/, but not both.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final boolean isContact;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public AddCommand(Tag tag, boolean isContact) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        toAdd \u003d tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.isContact \u003d isContact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (isContact) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (model.hasContactTag(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_CONTACT_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.addContactTag(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CONTACT_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (model.hasSaleTag(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SALES_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.addSaleTag(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SALES_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tag/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Deletes a tag based on its displayed index in the tag list and updates all"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * items associated with this tag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \": Deletes the tag identified by the index number used in the displayed reminder list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Note that all associations with this tag will be cleared.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted tag: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // Contact tags will be displayed in front of Sale tags."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e contactTagList \u003d model.getAddressBook().getContactTagList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e saleTagList \u003d model.getAddressBook().getSaleTagList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size() + saleTagList.size() || targetIndex.getOneBased() \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToDelete;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToDelete \u003d saleTagList.get(targetIndex.getZeroBased() - contactTagList.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.deleteSaleTag(tagToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToDelete \u003d contactTagList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.deleteContactTag(tagToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return (obj instanceof DeleteCommand) \u0026\u0026 targetIndex.equals(((DeleteCommand) obj).targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tag/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Edits a tag based on its displayed index in the tag list and updates all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * items associated with this tag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \": Edits the tag identified by the index number used in the displayed tag list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Note that all contacts or sales associated with this tag \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"will be updated automatically with the updated tag.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) and new tag name\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 t/furniture\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in StonksBook.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d \"A new tag name must be provided.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"The new tag name provided is the same as the original.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited tag %s to: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final EditTagDescriptor editTagDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param targetIndex of the tag in the tag list to edit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param editTagDescriptor details to edit the tag with."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public EditCommand(Index targetIndex, EditTagDescriptor editTagDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.editTagDescriptor \u003d editTagDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e contactTagList \u003d model.getAddressBook().getContactTagList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e saleTagList \u003d model.getAddressBook().getSaleTagList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size() + saleTagList.size() || targetIndex.getOneBased() \u003c 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToEdit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag editedTag;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToEdit \u003d saleTagList.get(targetIndex.getZeroBased() - contactTagList.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            editedTag \u003d createEditedTag(tagToEdit, editTagDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (tagToEdit.isSameTag(editedTag) \u0026\u0026 model.hasSaleTag(editedTag)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.editSaleTag(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToEdit \u003d contactTagList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            editedTag \u003d createEditedTag(tagToEdit, editTagDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (tagToEdit.isSameTag(editedTag) \u0026\u0026 model.hasContactTag(editedTag)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            model.editContactTag(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, tagToEdit, editedTag));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Creates and returns a {@code Tag} with the details of {@code tagToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * edited with {@code editTagDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static Tag createEditedTag(Tag tagToEdit,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                                       EditTagDescriptor editTagDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assert tagToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String updatedTagName \u003d editTagDescriptor.getTagName().orElse(tagToEdit.getTagName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new Tag(updatedTagName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 editTagDescriptor.equals(e.editTagDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Stores the details to edit the tag with."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static class EditTagDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        private String tagName;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public EditTagDescriptor() {}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "         * Instantiates a EditTagDescriptor object by copying another EditTagDescriptor {@code toCopy}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public EditTagDescriptor(EditTagDescriptor toCopy) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            setTagName(toCopy.tagName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public void setTagName(String tagName) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public Optional\u003cString\u003e getTagName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return Optional.ofNullable(tagName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (!(other instanceof EditTagDescriptor)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            EditTagDescriptor e \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    (EditTagDescriptor) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return getTagName().equals(e.getTagName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tag/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Lists all contacts or sale items associated with the specified tag."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \": Finds all the contacts or sales items associated with this tag. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Note that all contacts or sales associated with this tag \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"will be updated automatically with the updated tag.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final boolean isContact;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a FindCommand object depending on whether the user specified whether to find contacts or sales."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public FindCommand(Index targetIndex, boolean isContact) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.isContact \u003d isContact;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a FindCommand object that finds sales."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public FindCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.isContact \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e contactTagList \u003d model.getAddressBook().getContactTagList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e saleTagList \u003d model.getAddressBook().getSaleTagList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size() + saleTagList.size() || targetIndex.getOneBased() \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToFind;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (targetIndex.getOneBased() \u003e contactTagList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToFind \u003d saleTagList.get(targetIndex.getZeroBased() - contactTagList.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (isContact) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return new CommandResult(model.findContactsBySaleTag(tagToFind));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new CommandResult(model.findSalesBySaleTag(tagToFind));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tagToFind \u003d contactTagList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new CommandResult(model.findByContactTag(tagToFind));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return (obj instanceof FindCommand) \u0026\u0026 targetIndex.equals(((FindCommand) obj).targetIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tag/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Lists all existing tags in StonksBook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new CommandResult(model.listTags());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.SALE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.enums.GroupEnum.TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.archive.ArchiveCommandsParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.contact.ContactCommandsParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.meeting.MeetingCommandsParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.reminder.ReminderCommandsParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.sale.SaleCommandsParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.tag.TagCommandsParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final Matcher firstCommandWordMatcher \u003d this.getMatcherFromInput(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final String commandWord \u003d firstCommandWordMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final String arguments \u003d firstCommandWordMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (this.isSingleKeyWordCommand(commandWord)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return this.parseSingleKeyWordCommand(commandWord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else if (this.isDoubleKeyWordCommand(commandWord, arguments)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            final Matcher secondCommandWordMatcher \u003d this.getMatcherFromInput(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            final String secondCommandWord \u003d secondCommandWordMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            final String trueArguments \u003d secondCommandWordMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return this.parseTwoKeyWordCommand(commandWord, secondCommandWord, trueArguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            String fullCommand \u003d String.format(\"%s %s\", commandWord, arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(fullCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Matcher getMatcherFromInput(String input) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isSingleKeyWordCommand(String commandWord) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case PurgeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Command parseSingleKeyWordCommand(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case PurgeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new PurgeCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isDoubleKeyWordCommand(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        boolean isContactCommand \u003d commandWord.equals(CONTACT.name().toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        boolean isTagCommand \u003d commandWord.equals(TAG.name().toLowerCase());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        boolean isReminderCommand \u003d commandWord.equals(REMINDER.name().toLowerCase());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        boolean isMeetingCommand \u003d commandWord.equals(MEETING.name().toLowerCase());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        boolean isSaleCommand \u003d commandWord.equals(SALE.name().toLowerCase());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        boolean isArchiveCommand \u003d commandWord.equals(ARCHIVE.name().toLowerCase());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return isContactCommand || isTagCommand || isReminderCommand || isMeetingCommand || isSaleCommand"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                || isArchiveCommand;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Command parseTwoKeyWordCommand(String commandWord, String secondCommandWord, String arguments)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final String fullCommand \u003d String.format(\"%s %s\", commandWord, secondCommandWord);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (commandWord.equals(CONTACT.name().toLowerCase())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new ContactCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (commandWord.equals(ARCHIVE.name().toLowerCase())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ArchiveCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (commandWord.equals(TAG.name().toLowerCase())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new TagCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else if (commandWord.equals(REMINDER.name().toLowerCase())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new ReminderCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else if (commandWord.equals(MEETING.name().toLowerCase())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new MeetingCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (commandWord.equals(SALE.name().toLowerCase())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new SaleCommandsParser().parse(fullCommand, arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(fullCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 8,
      "AaronnSeah": 54,
      "Asthenosphere": 4,
      "hakujitsu": 5,
      "-": 56,
      "sebastiantoh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /* Prefix definitions for contacts */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Prefix PREFIX_TOTAL_SALES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /* Prefix definitions for sales */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_CONTACT_INDEX \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_UNIT_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Prefix PREFIX_SALE_INDEX \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"du/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Prefix PREFIX_SALE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_STATUS \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 3,
      "Asthenosphere": 2,
      "hakujitsu": 13,
      "-": 11,
      "sebastiantoh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GroupCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Represents a parser that is able to parse commandWord and arguments to create Command Object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public interface GroupCommandsParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    Command parse(String commandWord, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_NUMBER_OF_MONTHS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REMINDER_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses a {@code String message} into a {@code Message}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the given {@code message} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static Message parseMessage(String message) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String trimmedMessage \u003d message.strip();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!Message.isValidMessage(trimmedMessage)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(Message.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new Message(trimmedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is not of the format \u0027yyyy-MM-dd HH:mm\u0027."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return LocalDateTime.parse(trimmedDateTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Parses a {@code status} into a boolean flag that indicates whether a reminder is completed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static Boolean parseCompletionStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (trimmedStatus.equals(ReminderStatus.COMPLETED.getStatus())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (trimmedStatus.equals(ReminderStatus.PENDING.getStatus())) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_REMINDER_STATUS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the given {@code duration} is not a positive integer."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            long minutes \u003d Long.parseLong(trimmedDuration);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (minutes \u003c\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return Duration.ofMinutes(minutes);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the given {@code month} is not a valid month"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return Month.of(Integer.parseInt(month.trim()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the given {@code year} is not a valid year."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            int yearValue \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (yearValue \u003c\u003d 0) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return Year.of(yearValue);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses a {@code String name} into a {@code ItemName}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static ItemName parseItemName(String name) throws ParseException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!ItemName.isValidItemName(trimmedName)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new ItemName(trimmedName);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses a {@code String unitPrice} into a {@code UnitPrice}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the given {@code unitPrice} is invalid."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static UnitPrice parseUnitPrice(String unitPrice) throws ParseException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(unitPrice);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String trimmedUnitPrice \u003d unitPrice.trim();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!UnitPrice.isValidUnitPriceString(trimmedUnitPrice)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(UnitPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        BigDecimal parsedPrice \u003d new BigDecimal(unitPrice);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new UnitPrice(parsedPrice);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses a {@code String numberOfMonthsString} into an {@code int}."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the given {@code numberOfMonthString} is"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * not an integer between 2 and 6 inclusive"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static int parseNumberOfMonths(String numberOfMonthsString) throws ParseException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        requireNonNull(numberOfMonthsString);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            int numberOfMonths \u003d Integer.parseInt(numberOfMonthsString);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (2 \u003e numberOfMonths || numberOfMonths \u003e 6) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_NUMBER_OF_MONTHS);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return numberOfMonths;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUMBER_OF_MONTHS);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public enum ReminderStatus {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        COMPLETED(\"completed\"),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        PENDING(\"pending\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        private String status;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ReminderStatus(String status) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public String getStatus() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 57,
      "Asthenosphere": 33,
      "hakujitsu": 63,
      "-": 125,
      "sebastiantoh": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/archive/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object for Contact"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new AddCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/archive/ArchiveCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.RemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Parses the command word to create a Archive Command Object corresponding to the command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ArchiveCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final List\u003cString\u003e ALL_CONTACT_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            RemoveCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Parses the command word and arguments to create the appropriate Command Object for Contact."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param commandWord"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Command Object for Contact"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/archive/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.RemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object for Archive"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * and returns a RemoveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new RemoveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for Contact"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_NAME, PREFIX_CONTACT_PHONE, PREFIX_CONTACT_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_CONTACT_ADDRESS, PREFIX_TAG, PREFIX_CONTACT_REMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_NAME, PREFIX_CONTACT_ADDRESS, PREFIX_CONTACT_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PREFIX_CONTACT_EMAIL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CONTACT_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_CONTACT_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_CONTACT_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_CONTACT_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_CONTACT_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new AddCommand(name, phone, email, address, tagList, remark);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 7,
      "Asthenosphere": 3,
      "hakujitsu": 15,
      "-": 30,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/ContactCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses the command word to create a Contact Command Object corresponding to the command word."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class ContactCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final List\u003cString\u003e ALL_CONTACT_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            SortCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses the command word and arguments to create the appropriate Command Object for Contact."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param commandWord"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @return Command Object for Contact"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for Contact"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new EditCommand object for Contact"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_NAME, PREFIX_CONTACT_PHONE, PREFIX_CONTACT_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_CONTACT_ADDRESS, PREFIX_TAG, PREFIX_CONTACT_REMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_CONTACT_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_CONTACT_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_CONTACT_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editPersonDescriptor.setAddress("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_CONTACT_ADDRESS).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editPersonDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_CONTACT_REMARK).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 8,
      "Asthenosphere": 1,
      "hakujitsu": 18,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new FindCommand object for Contact"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new FindCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contact/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new SortCommand object for Contact"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String ORDER_KEYWORD \u003d \"desc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_NAME, PREFIX_CONTACT_EMAIL, PREFIX_TOTAL_SALES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix sortingAttribute \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int presentAttributeCounter \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            sortingAttribute \u003d PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            presentAttributeCounter++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            sortingAttribute \u003d PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            presentAttributeCounter++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TOTAL_SALES).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            sortingAttribute \u003d PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            presentAttributeCounter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String[] argComponents \u003d args.trim().split(\"\\\\s+\" , 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isSecondArgumentPresent \u003d (argComponents.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isSecondArgumentDesc \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (isSecondArgumentPresent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            isSecondArgumentDesc \u003d argComponents[1].trim().equals(ORDER_KEYWORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (presentAttributeCounter !\u003d 1 || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (isSecondArgumentPresent \u0026\u0026 !isSecondArgumentDesc)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new SortCommand(sortingAttribute, isSecondArgumentDesc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for Meeting."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT, PREFIX_MESSAGE, PREFIX_DATETIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT, PREFIX_MESSAGE, PREFIX_DATETIME, PREFIX_DURATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message message \u003d ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime startDate \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new AddCommand(index, message, startDate, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for Meeting."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/MeetingCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.StatsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses the command word to create a Meeting Command Object corresponding to the command word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final List\u003cString\u003e ALL_MEETING_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            StatsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the command word and arguments to create the appropriate Command Object for Meeting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param commandWord The command to be executed for Meeting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param arguments   The arguments to be executed with the commandWord."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return Command Object for Meeting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException If the commandWord given is unknown or if the arguments given are invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 15,
      "sebastiantoh": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/StatsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.MultipleMeetingStatsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.SingleMeetingStatsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.StatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object for Meeting."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and returns a StatsCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (!isCustomSingleMeetingCommand(argMultimap)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 !isDefaultSingleMeetingCommand(argMultimap)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 !isMultipleMeetingCommand(argMultimap)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (isMultipleMeetingCommand(argMultimap)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            int numberOfMonths \u003d ParserUtil.parseNumberOfMonths(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new MultipleMeetingStatsCommand(numberOfMonths);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (isCustomSingleMeetingCommand(argMultimap)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new SingleMeetingStatsCommand(month, year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (isDefaultSingleMeetingCommand(argMultimap)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new SingleMeetingStatsCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isCustomSingleMeetingCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argMultimap.getValue(PREFIX_MONTH).isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_YEAR).isPresent()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isDefaultSingleMeetingCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argMultimap.getValue(PREFIX_MONTH).isEmpty()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_YEAR).isEmpty()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isMultipleMeetingCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argMultimap.getValue(PREFIX_MONTH).isEmpty()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_YEAR).isEmpty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminder/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for Reminder."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CONTACT, PREFIX_MESSAGE, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT, PREFIX_MESSAGE, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message message \u003d ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime scheduledDate \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new AddCommand(index, message, scheduledDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminder/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for Reminder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminder/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand.EditReminderDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses input arguments and creates a new EditCommand object for Reminder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_CONTACT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_MESSAGE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_DATETIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        PREFIX_REMINDER_STATUS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor editReminderDescriptor \u003d new EditReminderDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            editReminderDescriptor.setContactIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MESSAGE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            editReminderDescriptor.setMessage(ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            editReminderDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    .setScheduledDate(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            editReminderDescriptor.setCompleted(ParserUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    .parseCompletionStatus(argMultimap.getValue(PREFIX_REMINDER_STATUS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!editReminderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new EditCommand(index, editReminderDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 10,
      "sebastiantoh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminder/ReminderCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Parses the command word to create a Reminder Command Object corresponding to the command word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final List\u003cString\u003e ALL_REMINDER_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the command word and arguments to create the appropriate Command Object for Reminder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param commandWord The command to be executed for Reminder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param arguments   The arguments to be executed with the commandWord."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return Command Object for Reminder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws ParseException If the commandWord given is unknown or if the arguments given are invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 9,
      "sebastiantoh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_UNIT_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for Sale."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SALE_CONTACT_INDEX, PREFIX_SALE_NAME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PREFIX_SALE_DATE, PREFIX_SALE_QUANTITY, PREFIX_TAG, PREFIX_SALE_UNIT_PRICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SALE_CONTACT_INDEX, PREFIX_SALE_NAME, PREFIX_SALE_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                PREFIX_SALE_QUANTITY, PREFIX_SALE_UNIT_PRICE, PREFIX_TAG)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ItemName itemName \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_SALE_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        LocalDateTime dateOfPurchase \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_SALE_DATE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_SALE_QUANTITY).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UnitPrice unitPrice \u003d ParserUtil.parseUnitPrice(argMultimap.getValue(PREFIX_SALE_UNIT_PRICE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new AddCommand(index, itemName, dateOfPurchase, quantity, unitPrice, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 7,
      "hakujitsu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for Sale."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Index saleIndex \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new DeleteCommand(saleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_UNIT_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand.EditSaleDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Parses input arguments and creates a new EditCommand object for Sale"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SALE_CONTACT_INDEX, PREFIX_SALE_NAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        PREFIX_SALE_DATE, PREFIX_SALE_QUANTITY, PREFIX_TAG, PREFIX_SALE_UNIT_PRICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index saleIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index personIndex \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            saleIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor editSaleDescriptor \u003d new EditSaleDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setItemName(ParserUtil.parseItemName(argMultimap.getValue(PREFIX_SALE_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setDatetimeOfPurchase("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_SALE_DATE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALE_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setQuantity("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_SALE_QUANTITY).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editSaleDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALE_UNIT_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            editSaleDescriptor.setUnitPrice("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    ParserUtil.parseUnitPrice(argMultimap.getValue(PREFIX_SALE_UNIT_PRICE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!editSaleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new EditCommand(saleIndex, editSaleDescriptor, personIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.AllListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.MonthlyListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Parses input arguments and creates a new ListCommand object for Sale."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SALE_CONTACT_INDEX,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                || (!isMonthlyListCommand(argMultimap)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u0026\u0026 !isShowAllListCommand(argMultimap)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u0026\u0026 !isShowSpecificContactListCommand(argMultimap))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (isMonthlyListCommand(argMultimap)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new MonthlyListCommand(month, year);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (NoSuchElementException ne) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new AllListCommand(true, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new AllListCommand(false, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isMonthlyListCommand(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_MONTH).isPresent()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_YEAR).isPresent()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isShowAllListCommand(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_MONTH).isEmpty()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_YEAR).isEmpty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).isEmpty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private boolean isShowSpecificContactListCommand(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_MONTH).isEmpty()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_YEAR).isEmpty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 argumentMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).isPresent();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 38,
      "hakujitsu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/SaleCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.StatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Parses the command word to create a Sale Command Object corresponding to the command word."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class SaleCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final List\u003cString\u003e ALL_SALE_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            StatsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the command word and arguments to create the appropriate Command Object for Sale."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param commandWord The command to be executed for Sale."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param arguments   The arguments to be executed with the commandWord."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return Command Object for Sale."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws ParseException If the commandWord given is unknown or if the arguments given are invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 15,
      "hakujitsu": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sale/StatsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.StatsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object for Sale."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * and returns a StatsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (trimmedArgs.isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int numberOfMonths \u003d ParserUtil.parseNumberOfMonths(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new StatsCommand(numberOfMonths);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tag/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public AddCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_SALE, PREFIX_CONTACT, PREFIX_TAG);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String tagName \u003d argMultimap.getValue(PREFIX_TAG).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (tagName.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_CONTACT).isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_SALE).isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_CONFLICT_TYPES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_SALE).isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new AddCommand(ParserUtil.parseTag(tagName), false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_CONTACT).isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new AddCommand(ParserUtil.parseTag(tagName), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tag/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for Tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tag/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.EditCommand.EditTagDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Parses input arguments and creates a new EditCommand object for Tag."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditTagDescriptor editTagDescriptor \u003d new EditTagDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Optional\u003cString\u003e tag \u003d argMultimap.getValue(PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (tag.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            editTagDescriptor.setTagName(ParserUtil.parseTag(tag.get()).getTagName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new EditCommand(index, editTagDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tag/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SALE_CONTACT_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new FindCommand(index, !argMultimap.getValue(PREFIX_SALE_CONTACT_INDEX).isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tag/TagCommandsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.GroupCommandsParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TagCommandsParser implements GroupCommandsParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final List\u003cString\u003e ALL_TAG_COMMAND_WORDS \u003d Arrays.asList("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 11,
      "Asthenosphere": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UniqueSaleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.UniqueContactTagList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.UniqueSaleTagList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Wraps all data at the address-book level."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final UniqueContactTagList contactTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final UniqueSaleTagList saleTags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final UniqueReminderList reminders;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final UniqueSaleList sales;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags \u003d new UniqueContactTagList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags \u003d new UniqueSaleTagList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates an AddressBook using the data in the {@code toBeCopied}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the  contents of the tag list with {@code contactTags}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code contactTags} must not contain duplicate contactTags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setContactTags(List\u003cTag\u003e contactTags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.contactTags.setTags(contactTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setSaleTags(List\u003cTag\u003e saleTags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.saleTags.setTags(saleTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the contents of the meetings list with {@code meetings}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the contents of the reminders list with {@code reminders}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the contents of the sales list with {@code sales}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code reminders} must not contain duplicate sales."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales(List\u003cSale\u003e sales) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.sales.setSales(sales);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        setContactTags(newData.getContactTagList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        setSaleTags(newData.getSaleTagList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        setSales(newData.getSaleList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : p.getTags()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            contactTags.add(t);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : editedPerson.getTags()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            contactTags.add(t);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. All associated meetings and reminders will be removed as well."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings.removeMeetingsWithContact(key);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.removeRemindersWithContact(key);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if a contact tag with the same identity as {@code tag} exists in StonksBook."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean hasContactTag(Tag tag) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return contactTags.contains(tag);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if a sale tag with the same identity as {@code tag} exists in StonksBOok."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean hasSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return saleTags.contains(tag);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds the specified contact tag to StonksBook."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * If the tag already exists in the contact tag list, no action will be performed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void addContactTag(Tag tag) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags.add(tag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds the specified sale tag to StonksBook."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * If the tag already exists in the sale tag list, no action will be performed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void addSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags.add(tag);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the given sale {@code target} in the list with {@code editedSale}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale identity of {@code editedSale} must not be the same as another existing sale in the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(editedSale);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.setSale(target, editedSale);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Tag t : editedSale.getTags()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            saleTags.add(t);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void removeContactTag(Tag key) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags.remove(key);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        persons.removeContactTag(key);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void removeSaleTag(Tag key) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags.remove(key);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.removeSaleTag(key);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the given {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code target} must exist in the contact tag list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in StonksBook."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void editContactTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags.setTag(target, editedTag);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        persons.setContactTag(target, editedTag);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the given {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code target} must exist in the sale tag list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in StonksBook."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void editSaleTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags.setTag(target, editedTag);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.setSaleTag(target, editedTag);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the number of contacts who are associated with the {@code target} tag."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findByContactTag(Tag target) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (p.getTags().contains(target)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", ++count, p.toString()));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return String.format(\"No matching contact found for tag: %s\\n\", target.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return String.format(\"Listing %d contacts associated with: %s\\n\", count, target.toString()) + output.toString();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all sale items associated with {@code target} tag."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findSalesBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Sale s : sales.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (s.getTags().contains(target)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Person buyer \u003d persons.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .filter(person -\u003e person.getId().equals(s.getBuyerId()))"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .findAny()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .orElse(null);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                assert buyer !\u003d null;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                output.append(String.format(\"%d. %s (Client: %s)\\n\", count + 1, s, buyer.getName()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                count +\u003d 1;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return String.format(\"No matching sales found for tag: %s\\n\", target.toString());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return String.format(\"Listing %d sales items associated with: %s\\n\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                count,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                target.toString()) + output.toString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all contacts who have purchased items associated with {@code target} tag."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findContactsBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cPerson\u003e contactsWithSaleTag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Sale s : sales.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (s.getTags().contains(target)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Person buyer \u003d persons.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .filter(person -\u003e person.getId().equals(s.getBuyerId()))"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .findAny()"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        .orElse(null);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                assert buyer !\u003d null;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (!contactsWithSaleTag.contains(buyer)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    contactsWithSaleTag.add(buyer);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    output.append(String.format(\"%d. %s\\n\", count++ + 1, buyer.toString()));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return String.format(\"The following %d contact(s) have purchased items in this category: %s\\n\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                count,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                target.toString()) + output.toString();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * List all the existing tags in StonksBook."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String listTags() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ObservableList\u003cTag\u003e contactTagList \u003d contactTags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ObservableList\u003cTag\u003e saleTagList \u003d saleTags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (contactTagList.size() \u003d\u003d 0 \u0026\u0026 saleTagList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"No tags found!\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (contactTagList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"No contact tags found! \").append(\"Listing sale tags:\\n\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            for (int i \u003d 0; i \u003c saleTagList.size(); i++) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", i + 1, saleTagList.get(i)));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (saleTagList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"No sale tags found! \").append(\"Listing contact tags:\\n\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            for (int i \u003d 0; i \u003c contactTagList.size(); i++) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", i + 1, contactTagList.get(i)));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"Listing contact tags:\\n\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            for (int i \u003d 0; i \u003c contactTagList.size(); i++) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", i + 1, contactTagList.get(i)));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"\\nListing sale tags:\\n\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            for (int i \u003d 0; i \u003c saleTagList.size(); i++) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", i + 1 + contactTagList.size(), saleTagList.get(i)));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if all the tags of the provided {@code sale} item exist in StonksBook."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean saleTagsExist(Sale sale) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : sale.getTags()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (!saleTags.contains(t)) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if all the tags of the provided {@code sale} item exist in StonksBook."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean contactTagsExist(Person person) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : person.getTags()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (!contactTags.contains(t)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Re-order all the existing tags in StonksBook."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void sortTags() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags.sort();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags.sort();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    //// meeting-level operations"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if an equivalent meeting exists in the address book."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds an meeting to the address book."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The meeting must not already exist in the address book."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings.add(meeting);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeMeeting(Meeting key) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    //// reminder-level operations"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if an equivalent reminder exists in StonksBook."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds a reminder to StonksBook."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder must not already exist in StonksBook."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.add(reminder);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the given reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder {@code editedReminder} must not be the same as another existing reminder in the address book."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if an equivalent sale exists in the address book."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean hasSale(Sale sale) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(sale);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return sales.contains(sale);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds a sale to StonksBook."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale must not already exist in StonksBook."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void addSale(Sale sale) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.add(sale);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : sale.getTags()) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            addSaleTag(t);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Removes {@code sale} from this {@code AddressBook}."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code sale} must exist in the address book."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void removeSale(Sale sale) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.remove(sale);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Set\u003cTag\u003e toRemove \u003d new HashSet\u003c\u003e(sale.getTags());"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Tag t : sale.getTags()) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            for (Sale s : sales) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                if (s.getTags().contains(t)) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    toRemove.remove(t);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    * Gets the number of meetings in {@code month} and {@code year}."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getMonthMeetingsCount(Month month, Year year) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.meetings.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of meeting count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthMeetingsCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.meetings.getMultipleMonthMeetingsCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the monthly sale list for {@code month} and {@code year}."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cSale\u003e getMonthlySaleList(Month month, Year year) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.sales.getMonthlySaleList(month, year);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of sale count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthSaleCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.sales.getMultipleMonthSaleCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e getContactTagList() {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return contactTags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e getSaleTagList() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return saleTags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e getSaleList() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return sales.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else if (!(other instanceof AddressBook)) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddressBook otherAddressBook \u003d (AddressBook) other;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return persons.equals(otherAddressBook.persons)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 reminders.equals(otherAddressBook.reminders)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 meetings.equals(otherAddressBook.meetings)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 contactTags.equals(((AddressBook) other).contactTags)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u0026\u0026 sales.equals(((AddressBook) other).sales);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 31,
      "Asthenosphere": 243,
      "hakujitsu": 79,
      "-": 114,
      "sebastiantoh": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Represents an attribute that stores text cannot be blank, and should only contain alphanumeric characters"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * and spaces."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMessage(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \"Messages should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Constructs a {@code Message}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message A valid message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Message(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        checkArgument(isValidMessage(message), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if a given string is a valid message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static boolean isValidMessage(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                || (other instanceof Message // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                // Case-insensitive equality checking"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 message.strip().toLowerCase().equals(((Message) other).message.strip().toLowerCase()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return message.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * {@code Predicate} that checks whether the {@code Person} is not archived."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_UNARCHIVED_PERSONS \u003d person -\u003e !person.isArchived();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * {@code Predicate} that checks whether the {@code Person} is archived."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ARCHIVED_PERSONS \u003d person -\u003e person.isArchived();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * {@code Comparator} that is used for default sorting of person list in alphabetical order,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * ignoring case."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    Comparator\u003cPerson\u003e DEFAULT_PERSON_COMPARATOR \u003d (person1, person2) -\u003e ("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            person1.getName().fullName.compareToIgnoreCase(person2.getName().fullName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    Predicate\u003cSale\u003e PREDICATE_SHOW_ALL_SALES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if a contact tag with the same name {@code tag} exists in StonksBook."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    boolean hasContactTag(Tag tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if a sale tag with the same name {@code tag} exists in StonksBook."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    boolean hasSaleTag(Tag tag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds the given {@code tag} to the contact tag list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code tag} must not already exist in StonksBook."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void addContactTag(Tag tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds the given {@code tag} to the sales tag list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code tag} must not already exist in StonksBook."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void addSaleTag(Tag tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the given {@code tag} with {@code editedTag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code target} must exist in the contact tag list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in StonksBook."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void editContactTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the given {@code tag} with {@code editedTag}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code target} must exist in the sale tag list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in StonksBook."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void editSaleTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Deletes the given tag from the contact tag list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag must exist in StonksBook."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void deleteContactTag(Tag target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Deletes the given tag from the sale tag list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag must exist in StonksBook."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void deleteSaleTag(Tag target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the number of contacts associated with {@code target} tag."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String findByContactTag(Tag target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all sale items associated with {@code target} tag."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String findSalesBySaleTag(Tag target);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all contacts who have bought items associated with {@code target} tag."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String findContactsBySaleTag(Tag target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all existing tags."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String listTags();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns if the {@code sale} item\u0027s tags are present in StonksBook."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    boolean saleTagsExist(Sale sale);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns if the {@code person}\u0027s tags are present in StonksBook."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    boolean contactTagsExist(Person person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns an unmodifiable view of the contact tag list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    ObservableList\u003cTag\u003e getContactTagList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns an unmodifiable view of the sale tag list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    ObservableList\u003cTag\u003e getSaleTagList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns an unmodifiable view of the person list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    ObservableList\u003cPerson\u003e getAllPersons();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the sorted person list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    ObservableList\u003cPerson\u003e getSortedPersonList();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Updates the comparator of the sorted person list to sort by the given {@code comparator}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    void updateSortedPersonList(Comparator\u003cPerson\u003e comparator);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the filtered sale list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    ObservableList\u003cSale\u003e getFilteredSaleList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Updates the filter of the filtered sale list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void updateFilteredSaleList(Predicate\u003cSale\u003e predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the sorted sale list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    ObservableList\u003cSale\u003e getSortedSaleList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Updates the comparator of the sorted sale list to sort by the given {@code comparator}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void updateSortedSaleList(Comparator\u003cSale\u003e comparator);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the sorted meeting list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cMeeting\u003e getSortedMeetingList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if an meeting with same fields as {@code meeting} exists in StonksBook."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    boolean hasMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Deletes the given meeting."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code target} must exist in StonksBook."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void deleteMeeting(Meeting target);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds the given meeting."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code meeting} must not already exist in StonksBook."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void addMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the reminder list"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cReminder\u003e getSortedReminderList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if a reminder with the same fields {@code reminder} exists in StonksBook."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder must exist in StonksBook."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void deleteReminder(Reminder target);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds the given reminder."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code reminder} must not already exist in StonksBook."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the given reminder {@code target} with {@code editedReminder}."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder {@code editedReminder} must not be the same as another existing reminder in the address"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void setReminder(Reminder target, Reminder editedReminder);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if a sale with the same fields {@code sale} exists in StonksBook."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    boolean hasSale(Sale sale);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds the given sale."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code sale} must not already exist in StonksBook."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void addSale(Sale sale);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the given sale {@code target} with {@code editedSale}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale identity of {@code editedSale} must not be the same as another existing sale in the address book."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void setSale(Sale target, Sale editedSale);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Removes the given sale."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale must exist in StonksBook."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void removeSale(Sale sale);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the number of meetings in {@code month} and {@code year}."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    int getMonthMeetingsCount(Month month, Year year);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of meeting count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    MonthlyCountDataSet getMultipleMonthMeetingsCount(Month month, Year year, int numberOfMonths);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of sale count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    MonthlyCountDataSet getMultipleMonthSaleCount(Month month, Year year, int numberOfMonths);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    void initialiseLatestContactId();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    int getLatestContactId();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the monthly sale list for {@code month} and {@code year}."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    List\u003cSale\u003e getMonthlySaleList(Month month, Year year);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 36,
      "jmleong666": 15,
      "Asthenosphere": 96,
      "hakujitsu": 51,
      "-": 84,
      "sebastiantoh": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final ObservableList\u003cPerson\u003e allPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final SortedList\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final SortedList\u003cMeeting\u003e sortedMeetings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final SortedList\u003cReminder\u003e sortedReminders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final FilteredList\u003cSale\u003e filteredSales;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final SortedList\u003cSale\u003e sortedSales;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private int latestContactId \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.allPersons \u003d this.addressBook.getPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.filteredSales \u003d new FilteredList\u003c\u003e(this.addressBook.getSaleList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.sortedPersons \u003d new SortedList\u003c\u003e(this.filteredPersons);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.updateSortedPersonList(DEFAULT_PERSON_COMPARATOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.sortedMeetings \u003d new SortedList\u003c\u003e(this.addressBook.getMeetingList(), Comparator.naturalOrder());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.sortedReminders \u003d new SortedList\u003c\u003e(this.addressBook.getReminderList(), Comparator.naturalOrder());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.sortedSales \u003d new SortedList\u003c\u003e(this.addressBook.getSaleList(), Comparator.naturalOrder());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        initialiseLatestContactId();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean hasContactTag(Tag tag) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.hasContactTag(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean hasSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.hasSaleTag(tag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void addContactTag(Tag tag) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addContactTag(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void addSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addSaleTag(tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void editContactTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.editContactTag(target, editedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void editSaleTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.editSaleTag(target, editedTag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void deleteContactTag(Tag target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.removeContactTag(target);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void deleteSaleTag(Tag target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.removeSaleTag(target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.addressBook.removePerson(target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.addressBook.addPerson(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        latestContactId +\u003d 1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return addressBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        addressBook.removeMeeting(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        addressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return addressBook.hasReminder(reminder);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        addressBook.removeReminder(target);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        addressBook.addReminder(reminder);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.addressBook.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean hasSale(Sale sale) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(sale);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return addressBook.hasSale(sale);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void addSale(Sale sale) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBook.addSale(sale);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(target, editedSale);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.addressBook.setSale(target, editedSale);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void removeSale(Sale sale) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBook.removeSale(sale);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Unfiltered Person List Accessor \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns an unmodifiable view of the list of unfiltered {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAllPersons() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return this.allPersons;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.filteredPersons;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Updates the predicate used to filter person list and"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * set comparator for sorted person list to be the default comparator."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param predicate predicate to filter person list"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.sortedPersons.setComparator(DEFAULT_PERSON_COMPARATOR);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.sortedPersons;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Updates the comparator to sort the person list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param comparator comparator for sorting the person list"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.sortedPersons.setComparator(comparator);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Sale List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Sale} backed by the internal list of"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e getFilteredSaleList() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.filteredSales;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Updates the predicate used to filter sale list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param predicate predicate to filter sale list"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void updateFilteredSaleList(Predicate\u003cSale\u003e predicate) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.filteredSales.setPredicate(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Sale} backed by the internal list of"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e getSortedSaleList() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.sortedSales;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Updates the comparator to sort the sale list."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param comparator comparator for sorting the sale list"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void updateSortedSaleList(Comparator\u003cSale\u003e comparator) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.sortedSales.setComparator(comparator);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Meeting} backed by the internal list of"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getSortedMeetingList() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.sortedMeetings;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String listTags() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.listTags();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean saleTagsExist(Sale sale) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.saleTagsExist(sale);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean contactTagsExist(Person person) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.contactTagsExist(person);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Reminder} backed by the internal list of"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.sortedReminders;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findByContactTag(Tag target) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.findByContactTag(target);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findSalesBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.findSalesBySaleTag(target);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String findContactsBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.findContactsBySaleTag(target);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e getContactTagList() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.getContactTagList();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e getSaleTagList() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return addressBook.getSaleTagList();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getMonthMeetingsCount(Month month, Year year) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthMeetingsCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.getMultipleMonthMeetingsCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthSaleCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.getMultipleMonthSaleCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void initialiseLatestContactId() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int currentId \u003d 0;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Person p : this.allPersons) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (currentId \u003c p.getId()) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                currentId \u003d p.getId();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        latestContactId \u003d currentId;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int getLatestContactId() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return latestContactId;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cSale\u003e getMonthlySaleList(Month month, Year year) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.getMonthlySaleList(month, year);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u0026\u0026 this.userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.sortedPersons.equals(other.sortedPersons)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.sortedMeetings.equals(other.sortedMeetings)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 this.sortedReminders.equals(other.sortedReminders)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 this.sortedSales.equals(other.sortedSales);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 70,
      "jmleong666": 15,
      "Asthenosphere": 94,
      "hakujitsu": 89,
      "-": 139,
      "sebastiantoh": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    ObservableList\u003cTag\u003e getContactTagList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    ObservableList\u003cTag\u003e getSaleTagList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the meetings list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * This list will not contain any duplicate meetings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an unmodifiable view of the reminders list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * This list will not contain any duplicate reminders."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an unmodifiable view of the sales list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This list will not contain any duplicate sales."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    ObservableList\u003cSale\u003e getSaleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 4,
      "hakujitsu": 7,
      "-": 17,
      "sebastiantoh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.DateUtil.isSameDay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Represents a Meeting that is associated with a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Meeting implements Comparable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // For formatting of the scheduled date that is to be printed to the UI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // For formatting of dates without the time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // For formatting of just the hours and minutes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Message message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Constructs an {@code Meeting}. Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param person    The person associated with this meeting."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message   The message associated with this meeting."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param startDate The date this meeting starts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param duration  The duration of the meeting."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Meeting(Person person, Message message, LocalDateTime startDate, Duration duration) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(person, message, startDate, duration);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Message getMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a formatted string representation of the meeting\u0027s start and end date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * If the meeting starts and ends on the same date, then the format output would be \"E, dd MMM yyyy, HH:mm - HH:mm\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Otherwise, the format output is \"E, dd MMM yyyy, HH:mm - E, dd MMM yyyy, HH:mm\"."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String getFormattedStartEndDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime start \u003d getStartDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime end \u003d getStartDate().plus(getDuration());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (isSameDay(start, end)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return String.format(\"%s, %s - %s\", start.format(DATE_FORMATTER),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    start.format(TIME_FORMATTER), end.format(TIME_FORMATTER));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return String.format(\"%s - %s\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    getStartDate().format(DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    getStartDate().plus(getDuration()).format(DATE_TIME_FORMATTER)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        builder.append(getMessage())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .append(String.format(\" - %s \", getPerson().getName()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .append(String.format(\"(%s)\", getFormattedStartEndDate()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Checks for equality against another object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param other The other object to check for equality against."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return Returns true if and only if two meetings are associated with the same Person, have the same message"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * (case-insensitive), have the same start date and duration."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.person.equals(otherMeeting.person)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.message.equals(otherMeeting.message)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.startDate.equals(otherMeeting.startDate)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.duration.equals(otherMeeting.duration);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return Objects.hash(this.person, this.message, this.startDate, this.duration);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Compares this meeting to the specified Meeting. A Meeting is \"less\" than another Meeting if and only if it"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * starts earlier than the other Meeting. If both Meetings have the same start date, than the meeting with the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * shorter duration will be considered \"less\"."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param otherMeeting The other meeting to compare to."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return The comparator value, negative if less, positive if greater."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int compareTo(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        int cmpStartDate \u003d this.startDate.compareTo(otherMeeting.startDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (cmpStartDate !\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return cmpStartDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.duration.compareTo(otherMeeting.duration);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyListMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A list of meetings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthlyListMap\u003cMeeting\u003e monthlyListMap \u003d new MonthlyListMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.addItem(toAdd.getStartDate().getMonth(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                Year.of(toAdd.getStartDate().getYear()), toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.removeItem(toRemove.getStartDate().getMonth(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                Year.of(toRemove.getStartDate().getYear()), toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes all meetings associated with the given {@code contact} from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param contact The contact whose associated meetings are to be removed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeMeetingsWithContact(Person contact) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cMeeting\u003e meetingsToRemove \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                internalList.stream().filter(meeting -\u003e meeting.getPerson().equals(contact))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Meeting meeting : meetingsToRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.remove(meeting);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.setMonthlyListMap(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.setMonthlyListMap(meetings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void setMonthlyListMap(List\u003cMeeting\u003e list) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthlyListMap.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        list.forEach(x -\u003e this.monthlyListMap.addItem("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                x.getStartDate().getMonth(), Year.of(x.getStartDate().getYear()), x));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the number of meetings in {@code month} and {@code year}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getMonthMeetingsCount(Month month, Year year) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.monthlyListMap.getItemCount(month, year);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of meeting count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthMeetingsCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.monthlyListMap.getMultipleMonthCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (meetings.get(i).equals(meetings.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 35,
      "sebastiantoh": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Signals that the operation will result in duplicate meetings (Meetings are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * have the same fields."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"Operation would result in duplicate meetings\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MeetingNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"Specified meeting was not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final boolean archived;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final BigDecimal totalSalesAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a person object with specified details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name Name of the person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param phone Phone number of the person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param email Email Address of the person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param address Address of the person."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param tags Set of tags associated with the person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param remark Remark associated with the person."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Person(Integer id, Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                  Set\u003cTag\u003e tags, Remark remark, boolean archived, BigDecimal totalSalesAmount) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, remark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.archived \u003d archived;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.totalSalesAmount \u003d totalSalesAmount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public BigDecimal getTotalSalesAmount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return totalSalesAmount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isArchived() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return archived;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getTotalSalesAmountString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return NumberFormat.getCurrencyInstance().format(totalSalesAmount);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Removes a tag from the tag set, no operation will be performed if the tag does not exist in the tag set."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.id.equals(otherPerson.id);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, remark, totalSalesAmount);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        builder.append(\" Remark: \").append(getRemark());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 7,
      "Asthenosphere": 7,
      "hakujitsu": 36,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a remark added to a Contact in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The first character of the note must not be a whitespace,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.value.equals(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the specified {@code target} with {@code editedTag} for all contacts."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setContactTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int count \u003d internalList.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // Iterate through all contacts and update their tags."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Person original \u003d internalList.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(original.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (tags.contains(target)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                tags.remove(target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                tags.add(editedTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Person p \u003d new Person(original.getId(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getName(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getPhone(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getEmail(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getAddress(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        tags,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getRemark(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        original.isArchived(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getTotalSalesAmount());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                internalList.set(i, p);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Removes the specified tag from all contacts."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void removeContactTag(Tag toRemove) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int count \u003d internalList.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Person original \u003d internalList.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(original.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (tags.contains(toRemove)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                tags.remove(toRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Person p \u003d new Person(original.getId(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getName(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getPhone(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getEmail(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        original.getAddress(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        tags,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getRemark(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        original.isArchived(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getTotalSalesAmount());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                internalList.set(i, p);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if the {@code target} tag has no occurrences in StonksBook."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean hasZeroOccurrences(Tag target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Person p : internalList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (p.getTags().contains(target)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 2,
      "Asthenosphere": 56,
      "hakujitsu": 10,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Represents a Reminder that is associated with a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Reminder implements Comparable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // For formatting of the scheduled date that is to be printed to the UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Message message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDateTime scheduledDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Boolean completed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Constructs a {@code Reminder}. Every field must be present and not null. By default, the reminder is set to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * be incomplete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param person        The person associated with this reminder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message       The message associated with this reminder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param scheduledDate The date this reminder is scheduled for."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Reminder(Person person, Message message, LocalDateTime scheduledDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(person, message, scheduledDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.scheduledDate \u003d scheduledDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Constructs a {@code Reminder}. Every field must be present and not null. The completion status of this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * reminder depends on the field."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param person        The person associated with this reminder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param message       The message associated with this reminder."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param scheduledDate The date this reminder is scheduled for."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param completed     The completion status of this reminder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Reminder(Person person, Message message, LocalDateTime scheduledDate, Boolean completed) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(person, message, scheduledDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.scheduledDate \u003d scheduledDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Message getMessage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public LocalDateTime getScheduledDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.scheduledDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a formatted string representation of the meeting\u0027s scheduled date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Output format is \"E, dd MMM yyyy, HH:mm\"."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String getFormattedScheduledDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return getScheduledDate().format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if the reminder is not yet complete and the scheduled date is past the current date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return !this.completed \u0026\u0026 this.getScheduledDate().isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if the reminder has been marked as completed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        builder.append(getMessage())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .append(String.format(\" - %s \", getPerson().getName()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .append(String.format(\"(Scheduled for: %s)\", getScheduledDate().format(DATE_TIME_FORMATTER)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Checks for equality against another object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param other The other object to check for equality against."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return Returns true if and only if two reminders are associated with the same Person, have the same message"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * (case-insensitive), and have the same scheduled date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.person.equals(otherReminder.person)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 this.message.equals(otherReminder.message)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 this.scheduledDate.equals(otherReminder.scheduledDate)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 this.completed \u003d\u003d otherReminder.completed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return Objects.hash(this.person, this.message, this.scheduledDate, this.completed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Compares this reminder to the specified Reminder. A Reminder is \"less\" than another Reminder if and only if it"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * is scheduled earlier than the other Reminder."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param otherReminder The other Reminder to compare to"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return The comparator value, negative if less, positive if greater."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int compareTo(Reminder otherReminder) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.getScheduledDate().compareTo(otherReminder.scheduledDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 32,
      "sebastiantoh": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/UniqueReminderList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A list of reminders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class UniqueReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if the list contains an equivalent reminder as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds a reminder to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Removes all reminders associated with the given {@code contact} from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param contact The contact whose associated reminders are to be removed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeRemindersWithContact(Person contact) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e remindersToRemove \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                internalList.stream().filter(reminder -\u003e reminder.getPerson().equals(contact))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Reminder reminder : remindersToRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.remove(reminder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders(UniqueReminderList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the contents of this list with {@code reminders}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Replaces the reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The reminder {@code editedReminder} must not be the same as another existing reminder in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!target.equals(editedReminder) \u0026\u0026 contains(editedReminder)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        internalList.set(index, editedReminder);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            || (other instanceof UniqueReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueReminderList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns true if {@code reminders} contains only unique reminders."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (reminders.get(i).equals(reminders.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Signals that the operation will result in duplicate Reminders."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"Operation would result in duplicate reminders.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Signals that the operation is unable to find the specified reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ReminderNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"Specified reminder was not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/ItemName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Sale item\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidItemName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ItemName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \"Item names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The first character of the item name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs a {@code ItemName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ItemName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        checkArgument(isValidItemName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if a given string is a valid itemName."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static boolean isValidItemName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || (other instanceof ItemName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 name.toLowerCase().equals(((ItemName) other).name.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Sale item\u0027s quantity in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \"Quantity should be a positive integer, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Quantity should be a non-blank, positive integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\d]+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public final int quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.quantity \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return String.valueOf(quantity);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d ((Quantity) other).quantity); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return ((Integer) quantity).hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/Sale.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Sale in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Sale implements Comparable\u003cSale\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /** Identity fields */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final ItemName itemName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final int buyerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /** Data fields */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final LocalDateTime datetimeOfPurchase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final UnitPrice unitPrice;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final BigDecimal totalCost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    // Sale tags"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Sale(ItemName itemName, int buyerId, LocalDateTime datetimeOfPurchase, Quantity quantity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                UnitPrice unitPrice, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(itemName, datetimeOfPurchase, quantity, unitPrice);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.buyerId \u003d buyerId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.datetimeOfPurchase \u003d datetimeOfPurchase;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.totalCost \u003d this.unitPrice.getAmount().multiply(new BigDecimal(this.quantity.quantity));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ItemName getItemName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int getBuyerId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return buyerId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public LocalDateTime getDatetimeOfPurchase() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return datetimeOfPurchase;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public UnitPrice getUnitPrice() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return unitPrice;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public BigDecimal getTotalCost() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.totalCost;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return datetimeOfPurchase.getMonth();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return Year.of(datetimeOfPurchase.getYear());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if both sales have the identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This defines a weaker notion of equality between two sales."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isSameSale(Sale otherSale) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (otherSale \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return otherSale !\u003d null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getBuyerId() \u003d\u003d (getBuyerId())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getDatetimeOfPurchase().equals(getDatetimeOfPurchase())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getUnitPrice().equals(getUnitPrice())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if both sale have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!(other instanceof Sale)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale otherSale \u003d (Sale) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return otherSale.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getBuyerId() \u003d\u003d (getBuyerId())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getDatetimeOfPurchase().equals(getDatetimeOfPurchase())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 otherSale.getUnitPrice().equals(getUnitPrice())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 otherSale.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 otherSale.getTags().equals(getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Objects.hash(itemName, buyerId, datetimeOfPurchase, quantity, unitPrice);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // TODO: settle printing of buyer when implementing GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        builder.append(getItemName())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(\" (Date of Purchase: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(getDatetimeOfPurchase().format(DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(\", Quantity: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(\", Unit Price: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(getUnitPrice())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(\", Tags: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .append(getTags())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .append(\")\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Compares this sale to the specified Sale. A Sale is \"less\" than another Sale if and only if, from highest to"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * lowest priority: has an earlier datetime of purchase, has a buyer that was added least recently,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * has a lower lexicographical order of item name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param otherSale The other Sale to compare to"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The comparator value, negative if less, positive if greater."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int compareTo(Sale otherSale) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Comparator.comparing(Sale::getDatetimeOfPurchase)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .thenComparing(s -\u003e s.getBuyerId())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .thenComparing(s -\u003e s.getItemName().name)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .compare(this, otherSale);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 13,
      "Asthenosphere": 18,
      "hakujitsu": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/UniqueSaleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyListMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.exceptions.DuplicateSaleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.exceptions.SaleNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A list of sales that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A sale is considered unique by comparing using {@code Sale#isSameSale(Sale)}. As such, adding and updating of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * sales uses Sale#isSameSale(Sale) for equality so as to ensure that the sale being added or updated is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * unique in terms of identity in the UniqueSaleList. However, the removal of a sale uses Sale#equals(Object) so"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * as to ensure that the sale with exactly the same fields will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * @see Sale#isSameSale(Sale)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class UniqueSaleList implements Iterable\u003cSale\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final ObservableList\u003cSale\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final ObservableList\u003cSale\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthlyListMap\u003cSale\u003e monthlyListMap \u003d new MonthlyListMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if the list contains an equivalent sale as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean contains(Sale toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSale);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds a sale to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public UniqueSaleList add(Sale toAdd) throws DuplicateSaleException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new DuplicateSaleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.addItem(toAdd.getMonth(), toAdd.getYear(), toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the sale {@code target} in the list with {@code editedSale}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code sale} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale identity of {@code editedSale} must not be the same as another existing sale in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(target, editedSale);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new SaleNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!target.isSameSale(editedSale) \u0026\u0026 contains(editedSale)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new DuplicateSaleException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        internalList.set(index, editedSale);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.removeItem(target.getMonth(), target.getYear(), target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.addItem(editedSale.getMonth(), editedSale.getYear(), editedSale);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Removes the equivalent sale from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The sale must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void remove(Sale toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new SaleNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyListMap.removeItem(toRemove.getMonth(), toRemove.getYear(), toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public UniqueSaleList setSales(UniqueSaleList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.setMonthlyListMap(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the contents of this list with {@code sales}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code sales} must not contain duplicate sales."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales(List\u003cSale\u003e sales) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(sales);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!salesAreUnique(sales)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new DuplicateSaleException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        internalList.setAll(sales);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.setMonthlyListMap(sales);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void setMonthlyListMap(List\u003cSale\u003e list) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.monthlyListMap.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        list.forEach(x -\u003e this.monthlyListMap.addItem("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                x.getMonth(), x.getYear(), x));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replaces the specified {@code target} with {@code editedTag} for all sales."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSaleTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int count \u003d internalList.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // Iterate through all sales and update their tags."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Sale original \u003d internalList.get(i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(original.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (tags.contains(target)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                tags.remove(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                tags.add(editedTag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Sale newSale \u003d new Sale(original.getItemName(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getBuyerId(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getDatetimeOfPurchase(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getQuantity(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getUnitPrice(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                internalList.set(i, newSale);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                monthlyListMap.removeItem(original.getMonth(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        original.getYear(), original);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                monthlyListMap.addItem(newSale.getMonth(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        newSale.getYear(), newSale);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Removes the specified tag from all sales."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void removeSaleTag(Tag toRemove) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int count \u003d internalList.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Sale original \u003d internalList.get(i);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(original.getTags());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (tags.contains(toRemove)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                tags.remove(toRemove);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Sale newSale \u003d new Sale(original.getItemName(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getBuyerId(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getDatetimeOfPurchase(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getQuantity(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        original.getUnitPrice(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                internalList.set(i, newSale);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                monthlyListMap.removeItem(original.getMonth(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        original.getYear(), original);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                monthlyListMap.addItem(newSale.getMonth(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        newSale.getYear(), newSale);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets the monthly sale list for {@code month} and {@code year}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cSale\u003e getMonthlySaleList(Month month, Year year) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.monthlyListMap.getItems(month, year);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Gets multiple number of sale count for months between {@code month} and {@code year} and"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the previous {@code numberOfMonths} - 1 months inclusive."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthSaleCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return this.monthlyListMap.getMultipleMonthCount(month, year, numberOfMonths);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Iterator\u003cSale\u003e iterator() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || (other instanceof UniqueSaleList // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSaleList) other).internalList));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if {@code sales} contains only unique sales."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private boolean salesAreUnique(List\u003cSale\u003e sales) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (int i \u003d 0; i \u003c sales.size() - 1; i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sales.size(); j++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (sales.get(i).isSameSale(sales.get(j))) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 52,
      "hakujitsu": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/UnitPrice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Sale item\u0027s unit price in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUnitPriceString(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class UnitPrice {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \"UnitPrice should be in the form \\\"DOLLARS.CENTS\\\", where DOLLARS represents a positive integer \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    + \"and CENTS represents a 2 digit positive integer. It should not be blank, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    + \"and the total unit price should be greater than zero\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * UnitPrice should be in the form \"DOLLARS.CENTS\", where DOLLARS represents a positive integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * and CENTS represents a 2 digit positive integer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The total unit price should be greater than zero."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * It should not be blank."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(([\\\\d]*)\\\\.(\\\\d{2}))$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public final BigDecimal amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs a {@code UnitPrice}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param unitPrice A valid value of unit price."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public UnitPrice(BigDecimal unitPrice) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        requireNonNull(unitPrice);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        checkArgument(isValidUnitPrice(unitPrice), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.amount \u003d unitPrice;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if given unit price is greater than 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static boolean isValidUnitPrice(BigDecimal test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String string \u003d test.stripTrailingZeros().toPlainString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int index \u003d string.indexOf(\".\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int noOfDecimalPlaces \u003d index \u003c 0 ? 0 : string.length() - index - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return test.compareTo(BigDecimal.ZERO) \u003e 0 \u0026\u0026 noOfDecimalPlaces \u003c 3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns true if a given params is a valid unit price."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static boolean isValidUnitPriceString(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String[] priceSplit \u003d test.split(\"\\\\.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int dollars \u003d Integer.parseInt(priceSplit[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int cents \u003d Integer.parseInt(priceSplit[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        boolean isCentsValid \u003d cents \u003e\u003d 0 \u0026\u0026 cents \u003c 100;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        boolean isDollarsValid \u003d dollars \u003e\u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        boolean isPriceGreaterThanZero \u003d (cents + dollars) \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return isCentsValid \u0026\u0026 isDollarsValid \u0026\u0026 isPriceGreaterThanZero;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getUnitPriceString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.amount.setScale(2).toPlainString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.amount.setScale(2).toPlainString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // Dollar sign has been temporarily removed to pass test cases"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // TODO: reinstate the following method after implementing GUI for sales"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // return NumberFormat.getCurrencyInstance().format(this.amount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || (other instanceof UnitPrice // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u0026\u0026 amount.compareTo(((UnitPrice) other).amount) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 3,
      "hakujitsu": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/exceptions/DuplicateSaleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Signals that the operation will result in duplicate Sales (Sales are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DuplicateSaleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DuplicateSaleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(\"Operation would result in duplicate sales\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sale/exceptions/SaleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Signals that the operation is unable to find the specified sale."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class SaleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Tag implements Comparable\u003cTag\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if both tags have the same tag name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return this.equals(otherTag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Formats state as text for viewing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Compares two tags with lexicographical order."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public int compareTo(Tag o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return tagName.compareTo(o.tagName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 22,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueContactTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.InvalidTagListTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A list of tags for contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * tags uses Tag#isSameTag(Tag) for equality so as to ensure that the tag being added or updated is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * unique in terms of identity in the UniqueContactTagList. However, the removal of a tag uses Tag#equals(Object) so"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * as to ensure that the tag with exactly the same tag name will be removed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class UniqueContactTagList extends UniqueTagList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public UniqueContactTagList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean belongsToContact() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean belongsToSale() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code replacement} must be another UniqueContactTagList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (replacement.belongsToContact()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidTagListTypeException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                || (other instanceof UniqueContactTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueContactTagList) other).internalList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueSaleTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.InvalidTagListTypeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A list of tags for contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * tags uses Tag#isSameTag(Tag) for equality so as to ensure that the tag being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * unique in terms of identity in the UniqueSaleTagList. However, the removal of a tag uses Tag#equals(Object) so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * as to ensure that the tag with exactly the same tag name will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class UniqueSaleTagList extends UniqueTagList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public UniqueSaleTagList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean belongsToContact() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean belongsToSale() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code replacement} must be another UniqueSaleTagList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (replacement.belongsToSale()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidTagListTypeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Sort the internal list in lexicographical order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Comparator\u003cTag\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                || (other instanceof UniqueSaleTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSaleTagList) other).internalList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A list of tags for contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * tags uses Tag#isSameTag(Tag) for equality so as to ensure that the tag being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * unique in terms of identity in the UniqueTagList. However, the removal of a tag uses Tag#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * as to ensure that the tag with exactly the same tag name will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public abstract class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if the list is a list of tags for contact."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public abstract boolean belongsToContact();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if the list is a list of tags for sales."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public abstract boolean belongsToSale();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds a tag to the tag list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * No operation will be performed if the tag already exists in the tag list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code replacement} must be another UniqueTagList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public abstract void setTags(UniqueTagList replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Removes the specified {@code Tag} from the tag list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Replaces the tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Sort the internal list in lexicographical order."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Comparator\u003cTag\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Signals that the operation will result in duplicate Tags (Tags are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/InvalidTagListTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Signals that this operation is not provided with a list of contact tags."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class InvalidTagListTypeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public InvalidTagListTypeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(\"Operation require a list of tags for contact.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TagNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public TagNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(\"The specified tag does not exist in the StonksBook\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UniqueSaleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person ALEX_YEOH \u003d new Person(1, new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            getTagSet(\"friends\"), new Remark(\"Not available on Fridays\"), false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            new BigDecimal(\"3382.5\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person BERNICE_YU \u003d new Person(2, new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getTagSet(\"colleagues\", \"friends\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            new Remark(\"Owns a small stationery business\"), false, new BigDecimal(\"1788\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person CHARLOTTE_OLIVEIRO \u003d new Person(3, new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getTagSet(\"neighbours\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            new Remark(\"\"), false, new BigDecimal(\"960\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person DAVID_LI \u003d new Person(4, new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            getTagSet(\"family\"), new Remark(\"\"), false, BigDecimal.ZERO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person IRFAN_IBRAHIM \u003d new Person(5, new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            getTagSet(\"classmates\"), new Remark(\"Interested in paper-based products\"), false, BigDecimal.ZERO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Person ROY_BALAKRISHNAN \u003d new Person(6, new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            getTagSet(\"colleagues\"), new Remark(\"\"), false, BigDecimal.ZERO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Sales"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale NOTEBOOK \u003d new Sale(new ItemName(\"Notebook\"), ALEX_YEOH.getId(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 11, 29, 15, 40),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"10\"), new UnitPrice(new BigDecimal(\"3.5\")), new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale BLACK_PEN \u003d new Sale(new ItemName(\"Black Pen\"), BERNICE_YU.getId(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 10, 6, 9, 50),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"300\"), new UnitPrice(new BigDecimal(\"2.0\")), getTagSet(\"stationery\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale BINDER \u003d new Sale(new ItemName(\"Binder\"), ALEX_YEOH.getId(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 11, 13, 11, 45),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"250\"), new UnitPrice(new BigDecimal(\"4.99\")), new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale TAPE \u003d new Sale(new ItemName(\"Scotch Tape\"), ALEX_YEOH.getId(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 10, 17, 15, 20),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"1000\"), new UnitPrice(new BigDecimal(\"2.1\")), getTagSet(\"crafts\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale ERASER \u003d new Sale(new ItemName(\"Eraser\"), CHARLOTTE_OLIVEIRO.getId(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 9, 20, 14, 10),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"1200\"), new UnitPrice(new BigDecimal(\"0.8\")), getTagSet(\"stationery\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Sale RULER \u003d new Sale(new ItemName(\"Ruler\"), BERNICE_YU.getId(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 11, 1, 19, 00),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new Quantity(\"1200\"), new UnitPrice(new BigDecimal(\"0.99\")), getTagSet(\"stationery\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new Person[] {ALEX_YEOH, BERNICE_YU, CHARLOTTE_OLIVEIRO, DAVID_LI, IRFAN_IBRAHIM, ROY_BALAKRISHNAN};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static UniqueSaleList getSampleSales() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new UniqueSaleList().add(NOTEBOOK).add(BLACK_PEN).add(BINDER).add(TAPE).add(ERASER).add(RULER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static UniqueReminderList getSampleReminderList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.add(new Reminder(ALEX_YEOH, new Message(\"Send follow up email\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2020, 11, 30, 15, 30)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.add(new Reminder(CHARLOTTE_OLIVEIRO, new Message(\"Draft up sales proposal for upcoming meeting\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2020, 12, 15, 9, 0)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static UniqueMeetingList getSampleMeetingList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings.add(new Meeting(BERNICE_YU, new Message(\"Sales Call\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2020, 11, 20, 15, 30),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Duration.ofMinutes(30)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings.add(new Meeting(CHARLOTTE_OLIVEIRO,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new Message(\"Lunch to discuss new recurring purchase requirements\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2020, 12, 20, 12, 0),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Duration.ofMinutes(90)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return meetings;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Sale sampleSale : getSampleSales()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            sampleAb.addSale(sampleSale);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Reminder sampleReminder : getSampleReminderList()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            sampleAb.addReminder(sampleReminder);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Meeting sampleMeeting : getSampleMeetingList()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            sampleAb.addMeeting(sampleMeeting);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 7,
      "Asthenosphere": 1,
      "hakujitsu": 48,
      "-": 42,
      "sebastiantoh": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Jackson-friendly version of {@link Meeting}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String DESERIALIZING_DURATION_ERROR_MESSAGE \u003d \"An error occurred while deserializing the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        + \"duration of a meeting!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final JsonAdaptedPerson person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Serialised and stored in ISO-8601 format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Serialised using ISO-8601 seconds based representation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"person\") JsonAdaptedPerson person,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                              @JsonProperty(\"message\") String message,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                              @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                              @JsonProperty(\"duration\") String duration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Converts a given {@code Meeting} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d new JsonAdaptedPerson(source.getPerson());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d source.getMessage().message;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.duration \u003d source.getDuration().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.person \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final Person person \u003d this.person.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.message \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Message\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final Message message \u003d new Message(this.message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Date\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final LocalDateTime scheduledDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            scheduledDate \u003d LocalDateTime.parse(this.startDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Duration\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final Duration duration;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            duration \u003d Duration.parse(this.duration);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(DESERIALIZING_DURATION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new Meeting(person, message, scheduledDate, duration);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UniqueSaleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final boolean archived;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String totalSalesAmount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"id\") Integer id, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            @JsonProperty(\"remark\") String remark, @JsonProperty(\"archived\") boolean archived,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            @JsonProperty(\"totalSalesAmount\") String totalSalesAmount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.archived \u003d archived;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.totalSalesAmount \u003d totalSalesAmount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        archived \u003d source.isArchived();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        totalSalesAmount \u003d source.getTotalSalesAmount().setScale(2).toPlainString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final List\u003cSale\u003e personSales \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final UniqueSaleList modelSales \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        modelSales.setSales(personSales);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (totalSalesAmount \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Total Sales Amount\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            BigDecimal test \u003d new BigDecimal(totalSalesAmount);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            String string \u003d test.stripTrailingZeros().toPlainString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            int index \u003d string.indexOf(\".\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            int noOfDecimalPlaces \u003d index \u003c 0 ? 0 : string.length() - index - 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (noOfDecimalPlaces \u003c 3 \u0026\u0026 !(test.compareTo(BigDecimal.ZERO) \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(\"Total Sales Amount should be a positive decimal number, \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    + \"with at most 2 decimal places.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final BigDecimal modelTotalSalesAmount \u003d new BigDecimal(totalSalesAmount);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Person(id, modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                modelTags, modelRemark, archived, modelTotalSalesAmount);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 6,
      "hakujitsu": 46,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final JsonAdaptedPerson person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Serialised and stored in ISO-8601 format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String scheduledDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Boolean completed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"person\") JsonAdaptedPerson person,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                               @JsonProperty(\"message\") String message,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                               @JsonProperty(\"scheduledDate\") String scheduledDate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                               @JsonProperty(\"completed\") Boolean completed) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.scheduledDate \u003d scheduledDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.person \u003d new JsonAdaptedPerson(source.getPerson());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.message \u003d source.getMessage().message;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.scheduledDate \u003d source.getScheduledDate().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.completed \u003d source.isCompleted();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.person \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final Person person \u003d this.person.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.message \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Message\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final Message message \u003d new Message(this.message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (this.scheduledDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DateTime\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final LocalDateTime scheduledDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            scheduledDate \u003d LocalDateTime.parse(this.scheduledDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new Reminder(person, message, scheduledDate, this.completed \u003d\u003d null ? false : completed);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 6,
      "sebastiantoh": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSale.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Jackson-friendly version of {@link Sale}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "class JsonAdaptedSale {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Sale\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final Integer buyerId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String datetimeOfPurchase;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String unitPrice;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Constructs a {@code JsonAdaptedSale} with the given sale details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public JsonAdaptedSale(@JsonProperty(\"itemName\") String itemName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                           @JsonProperty(\"buyerId\") Integer buyerId,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                           @JsonProperty(\"datetimeOfPurchase\") String datetimeOfPurchase,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                           @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                           @JsonProperty(\"unitPrice\") String unitPrice,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.buyerId \u003d buyerId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.datetimeOfPurchase \u003d datetimeOfPurchase;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Converts a given {@code Sale} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public JsonAdaptedSale(Sale source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        itemName \u003d source.getItemName().name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        buyerId \u003d source.getBuyerId();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        datetimeOfPurchase \u003d source.getDatetimeOfPurchase().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        unitPrice \u003d source.getUnitPrice().getUnitPriceString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Converts this Jackson-friendly adapted sale object into the model\u0027s {@code Sale} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted sale."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Sale toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        final List\u003cTag\u003e saleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            saleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (itemName \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ItemName.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!ItemName.isValidItemName(itemName)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final ItemName modelItemName \u003d new ItemName(itemName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (this.buyerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final Integer modelBuyer \u003d this.buyerId;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (datetimeOfPurchase \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Datetime of Purchase\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final LocalDateTime modelDatetimeOfPurchase;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            modelDatetimeOfPurchase \u003d LocalDateTime.parse(this.datetimeOfPurchase);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (unitPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, UnitPrice.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!UnitPrice.isValidUnitPriceString(unitPrice)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new IllegalValueException(UnitPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final UnitPrice modelUnitPrice \u003d new UnitPrice(new BigDecimal(unitPrice));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        final Set\u003cTag\u003e saleTagsSet \u003d new HashSet\u003c\u003e(saleTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Sale(modelItemName, modelBuyer, modelDatetimeOfPurchase, modelQuantity, modelUnitPrice, saleTagsSet);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 24,
      "hakujitsu": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tags list contains duplicate tag(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SALE \u003d \"Sales list contains duplicate sale(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e contactTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e saleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final List\u003cJsonAdaptedSale\u003e sales \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons, meetings and reminders"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                                       @JsonProperty(\"contactTags\") List\u003cJsonAdaptedTag\u003e contactTags,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                                       @JsonProperty(\"saleTags\") List\u003cJsonAdaptedTag\u003e saleTags,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                                       @JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                                       @JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                                       @JsonProperty(\"sales\") List\u003cJsonAdaptedSale\u003e sales) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.contactTags.addAll(contactTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.saleTags.addAll(saleTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.sales.addAll(sales);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        contactTags.addAll(source.getContactTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        saleTags.addAll(source.getSaleTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetings"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            .addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sales.addAll(source.getSaleList().stream().map(JsonAdaptedSale::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : saleTags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            addressBook.addSaleTag(tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : contactTags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            addressBook.addContactTag(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.sortTags();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (addressBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            addressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (addressBook.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            addressBook.addReminder(reminder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (JsonAdaptedSale jsonAdaptedSale : sales) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Sale sale \u003d jsonAdaptedSale.toModelType();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (addressBook.hasSale(sale)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SALE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            addressBook.addSale(sale);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 21,
      "hakujitsu": 15,
      "-": 57,
      "sebastiantoh": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ChatBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ChatBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String FXML \u003d \"ChatBox.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ChatBox() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void scrollToBottom() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scrollPane.applyCss();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scrollPane.layout();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Displays a dialog box containing StonksBot\u0027s response. (WIP)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayInputAndResponse(String commandText, String response) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        requireNonNull(response);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                DialogBox.getUserDialog(commandText),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                DialogBox.getStonksBotDialog(response)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scrollToBottom();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Clears all past interactions with the GUI in the chat box."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        dialogContainer.getChildren().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final UserInputHistory userInputHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        userInputHistory \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Handles the Up or Down key pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void handleKeyPressed(KeyEvent event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String prevInput \u003d userInputHistory.getPreviousInput();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            commandTextField.setText(prevInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String nextInput \u003d userInputHistory.getNextInput();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            commandTextField.setText(nextInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (!commandTextField.getText().equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            userInputHistory.addToHistory(commandTextField.getText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 23,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DialogBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * This control represents a dialog box consisting of a label containing text from the speaker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static String botName \u003d \"StonksBot\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static String userName \u003d \"$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Flips the dialog box such that the text on the left."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Displays user dialog."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        var db \u003d new DialogBox(userName + \" \" + text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Displays StonksBot\u0027s response dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static DialogBox getStonksBotDialog(String text) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        var db \u003d new DialogBox(botName + \": \" + text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t11-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final String COMMAND_HELP_LEGEND \u003d \"\\nThe information below is formatted\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            + \" as (COMMAND NAME, COMMAND DESCRIPTION, COMMAND USAGE).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final CommandTable commandTable \u003d new CommandTable();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Text helpMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Hyperlink helpLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Label commandHelpLegend;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private GridPane table;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private HostServices hostServices;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            populateHelpWindow();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            logger.warning(e::getMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public HelpWindow(HostServices hostServices) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.hostServices \u003d hostServices;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Populates the help window with all StonksBook command description."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void populateHelpWindow() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        helpLink.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandHelpLegend.setText(COMMAND_HELP_LEGEND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        try (InputStream resource \u003d this.getClass().getClassLoader()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .getResourceAsStream(\"text/helpForAllCommands.txt\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            new BufferedReader(new InputStreamReader(resource, StandardCharsets.UTF_8))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    .lines().forEachOrdered(this::addToCommandTable);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void addToCommandTable(String line) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String[] components \u003d line.split(\"\\\\s{4,}\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        if (components.length \u003d\u003d 1 \u0026\u0026 !components[0].isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.commandTable.addHeaders(components[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.commandTable.addCommandDescription(components);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private class CommandTable {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        private static final int STARTING_ROW_INDEX \u003d 2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        private final List\u003cString\u003e colors \u003d Arrays.asList(\"#d72c2c\", \"ffcccb\", \"#08aeae\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \"#11cf11\", \"#c307c3\", \"#f3a517\", \"#dbbc11\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        private int headerCounter \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        private int currentRowIdx \u003d STARTING_ROW_INDEX;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         * Adds colored command headers."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         * @param headerText header text to be added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        private void addHeaders(String headerText) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Label header \u003d new Label(headerText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            header.setStyle(\"-fx-text-fill: \" + this.colors.get(this.headerCounter / 2));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            table.addRow(this.currentRowIdx, header);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.currentRowIdx++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.headerCounter++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         * Adds command description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         * @param descriptionParts parts of the command description to be added"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        private void addCommandDescription(String[] descriptionParts) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            List\u003cLabel\u003e commandDescParts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            for (String descriptionPartText : descriptionParts) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                Label descriptionPart \u003d new Label(descriptionPartText);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                descriptionPart.setMinWidth(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                descriptionPart.setStyle(\"-fx-label-padding: 0 1em 0 0; -fx-text-fill: white;\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                commandDescParts.add(descriptionPart);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            table.addRow(this.currentRowIdx, commandDescParts.toArray(new Label[0]));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            this.currentRowIdx++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Opens the webpage directed by the URL."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Sets events on URL hyperlinks for customised colors."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void openLink() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.hostServices.showDocument(USERGUIDE_URL);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.helpLink.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.helpLink.setOnMouseMoved((v) -\u003e this.helpLink.setStyle(\"-fx-text-fill: #0b6df3\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.helpLink.setOnMouseExited((v) -\u003e this.helpLink.setStyle(\"-fx-text-fill: grey\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 109,
      "jmleong666": 1,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private MeetingListPanel meetingListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private ChatBox chatBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private StatisticsWindow statisticsWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private List\u003cStatisticsWindow\u003e openStatisticsWindows;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private StackPane meetingListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private StackPane chatBoxPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private HostServices hostServices;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, HostServices hostServices) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        helpWindow \u003d new HelpWindow(hostServices);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        openStatisticsWindows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getSortedPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetingListPanel \u003d new MeetingListPanel(logic.getSortedMeetingList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetingListPanelPlaceholder.getChildren().add(meetingListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getSortedReminderList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        chatBox \u003d new ChatBox();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        chatBoxPlaceholder.getChildren().add(chatBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.openStatisticsWindows.forEach(StatisticsWindow::hide);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Opens a statistics window."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void handleStatisticsResult(MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.statisticsWindow \u003d new StatisticsWindow(statisticResult);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.statisticsWindow.getRoot()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .setOnCloseRequest(x -\u003e this.openStatisticsWindows.remove(this.statisticsWindow));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.openStatisticsWindows.add(this.statisticsWindow);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.statisticsWindow.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            chatBox.displayInputAndResponse(commandText, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (commandResult.isClear()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                chatBox.clear();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            if (commandResult.hasStatisticsResult()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                handleStatisticsResult(commandResult.getStatisticResult());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // Force refresh of the following UI components which are time sensitive"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // Overdue reminders should be displayed differently"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.reminderListPanel.refresh();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // Past meetings should be filtered out"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.meetingListPanel.refresh();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            chatBox.displayInputAndResponse(commandText, e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 29,
      "jmleong666": 10,
      "-": 192,
      "sebastiantoh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FXML \u003d \"MeetingListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label personName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates a {@code MeetingCard} with the given {@code Meeting} and index to display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MeetingCard(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        message.setText(meeting.getMessage().message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        date.setText(meeting.getFormattedStartEndDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        personName.setText(meeting.getPerson().getName().fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!(other instanceof MeetingCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        MeetingCard card \u003d (MeetingCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Panel containing the list of meetings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FXML \u003d \"MeetingListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private ListView\u003cMeeting\u003e meetingListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MeetingListPanel(ObservableList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetingListView.setItems(meetingList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Refreshes (redraws) the MeetingListPanel. Use when you want to force an update of the UI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void refresh() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.meetingListView.refresh();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        protected void updateItem(Meeting meeting, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Label totalSalesAmount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!person.getRemark().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            remark.setVisible(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            remark.setManaged(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        totalSalesAmount.setText(String.valueOf(person.getTotalSalesAmountString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 2,
      "hakujitsu": 9,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.kordamp.ikonli.javafx.FontIcon;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    // The shade of green that is used to indicate completed reminders"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String GREEN \u003d \"#2EA44E\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // The shade of red that is used to indicate overdue reminders"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String RED \u003d \"#ff0266\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String COMPLETED_DATE_STYLE_CLASS \u003d \"completed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String OVERDUE_DATE_STYLE_CLASS \u003d \"overdue\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public final Reminder reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label scheduledDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Label personName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private FontIcon calendarIcon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates a {@code ReminderCard} with the given {@code Reminder} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ReminderCard(Reminder reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        message.setText(reminder.getMessage().message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        scheduledDate.setText(reminder.getFormattedScheduledDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        personName.setText(reminder.getPerson().getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (reminder.isOverdue()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            setStyleToIndicateOverdue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (reminder.isCompleted()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            setStyleToIndicateCompleted();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Sets the reminder card style to indicate an overdue reminder."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private void setStyleToIndicateOverdue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        calendarIcon.setIconColor(Paint.valueOf(RED));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ObservableList\u003cString\u003e scheduledDateStyleClass \u003d scheduledDate.getStyleClass();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!scheduledDateStyleClass.contains(OVERDUE_DATE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            scheduledDateStyleClass.add(OVERDUE_DATE_STYLE_CLASS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Sets the reminder card style to indicate a completed reminder."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private void setStyleToIndicateCompleted() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        calendarIcon.setIconColor(Paint.valueOf(GREEN));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ObservableList\u003cString\u003e scheduledDateStyleClass \u003d scheduledDate.getStyleClass();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (!scheduledDateStyleClass.contains(COMPLETED_DATE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            scheduledDateStyleClass.add(COMPLETED_DATE_STYLE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u0026\u0026 reminder.equals(card.reminder);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 17,
      "sebastiantoh": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Panel containing the list of reminders."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Creates a {@code ReminderListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Refreshes (redraws) the ReminderListPanel. Use when you want to force an update of the UI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    void refresh() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.reminderListView.refresh();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Controller for a statistics page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class StatisticsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private static final String FXML \u003d \"StatisticsWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private BarChart\u003cString, Integer\u003e barChart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private CategoryAxis x;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private NumberAxis y;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public StatisticsWindow(Stage root, MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.populateStatisticsWindow(statisticResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public StatisticsWindow(MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this(new Stage(), statisticResult);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Populates the statistics window with the statistics data from {@code statisticResult}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private void populateStatisticsWindow(MonthlyCountDataSet statisticResult) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.setTitle(statisticResult.getTitle());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int maxValue \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.y.setTickUnit(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.y.setAutoRanging(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.y.setMinorTickVisible(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e bars \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (MonthlyCountData data : statisticResult.getMonthlyCountDataList()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            XYChart.Data\u003cString, Integer\u003e data1 \u003d new XYChart.Data\u003c\u003e("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    data.getMonthAndYearAsStr(), data.getCount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            bars.getData().add(data1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            maxValue \u003d Math.max(maxValue, data.getCount());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cString\u003e barColors \u003d Arrays.asList(\"blue\", \"red\", \"purple\", \"yellow\", \"orange\", \"green\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.getData().add(bars);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (int i \u003d 0; i \u003c bars.getData().size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            bars.getData().get(i).getNode().setStyle(\"-fx-bar-fill: \" + barColors.get(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.setBarGap(-1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.setCategoryGap(300 / bars.getData().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.y.setUpperBound(maxValue);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.lookup(\".chart-plot-background\").setStyle(\"-fx-background-color: transparent;\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.barChart.lookup(\".chart-title\").setStyle(\"-fx-text-fill: WHITE\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        logger.fine(\"Showing statistics page about the application.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private HostServices hostServices;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public UiManager(Logic logic, HostServices hostServices) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.hostServices \u003d hostServices;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, hostServices);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserInputHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Stores past user inputs within the session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class UserInputHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final LinkedList\u003cString\u003e inputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private ListIterator\u003cString\u003e inputHistoryIterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Initialises an instance of {@code UserInputHistory} with an empty list and its iterator."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public UserInputHistory() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.inputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.inputHistoryIterator \u003d inputHistory.listIterator(inputHistory.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the input history list. Should only be used for tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    List\u003cString\u003e getHistoryList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return inputHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the history list iterator. Should only be used for tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    ListIterator\u003cString\u003e getListIterator() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return inputHistoryIterator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the input before the input the user navigated to in the input history."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns empty String if there is no previous input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String getPreviousInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (inputHistoryIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return inputHistoryIterator.previous();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the input after the input the user navigated to in the input history."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns empty String if there is no input after the current input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String getNextInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (inputHistoryIterator.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return inputHistoryIterator.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Adds the input entered by the user into the input history."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void addToHistory(String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryIterator \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistory.add(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryIterator \u003d inputHistory.listIterator(inputHistory.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 69
    }
  },
  {
    "path": "src/main/resources/text/helpForAllCommands.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Contact commands"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact add\t                Adds a contact                                              contact add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]… [r/REMARK]…"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact edit                Edits an existing contact                                   contact edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [r/REMARK]…"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact list                Lists all contacts                                          contact list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact find                Find contacts given search keyword(s)                       contact find KEYWORD [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact delete              Deletes a contact                                           contact delete INDEX"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "contact sort                Sorts contact list                                          contact sort KEYWORD [ORDER]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "Archive commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "archive add                 Sends a contact to the archive                              archive add INDEX"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "archive list                Lists all archived contacts                                 archive list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "archive remove              Removes a contact from the archive                          archive remove INDEX"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Tag commands"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "tag list                    Lists all tags                                              tag list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "tag edit                    Edits an existing tag to the specified tag name.            tag edit INDEX n/NAME"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "tag delete                  Deletes the specified tag                                   tag delete INDEX"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "tag find                    Displays all entries related to the specified tag           tag find INDEX [MODEL]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Sale commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "sale add                    Adds a sale to a customer                                   sale add c/CONTACT_INDEX n/ITEM_NAME p/UNIT_PRICE q/QUANTITY"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "sale list                   Lists all sale items                                        sale list CONTACT_INDEX"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "sale delete\t                Deletes a sale item of a customer                           sale delete c/CONTACT_INDEX s/SALE_INDEX"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "Meeting commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "meeting add\t                Adds a meeting with the specified contact                   meeting add CONTACT_INDEX m/MESSAGE d/START_DATETIME du/DURATION"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "meeting list                Lists all meetings.                                         meeting list [CONTACT_INDEX] [a/]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "meeting delete              Deletes the specified meeting                               meeting delete INDEX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Reminder commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "reminder add                Adds a reminder with the specified contact                  reminder add CONTACT_INDEX m/MESSAGE d/DATETIME"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "reminder list               Lists all reminders                                         reminder list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "reminder delete\t            Deletes the specified reminder                              reminder delete INDEX"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Miscellaneous commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Clear                       Clears chat bot history                                     clear"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Purge                       Clears all data                                             purge"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "Exit                        exits program                                               exit"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 37,
      "jmleong666": 6,
      "sebastiantoh": 4
    }
  },
  {
    "path": "src/main/resources/view/ChatBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"0.0\" maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"150.0\" vvalue\u003d\"0.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                StackPane.alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" minWidth\u003d\"1024\" prefHeight\u003d\"150\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 9,
      "sebastiantoh": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onKeyPressed\u003d\"#handleKeyPressed\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 18
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            \u003cScrollPane hbarPolicy\u003d\"NEVER\" fitToWidth\u003d\"true\" minHeight\u003d\"700\" prefHeight\u003d\"700\" maxHeight\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u003cHBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "         -fx-fillbackground-color: #383838;\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u003cGridPane fx:id\u003d\"table\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u003cTextFlow minWidth\u003d\"-Infinity\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        \u003cText fx:id\u003d\"helpMessage\" style\u003d\"-fx-fill: white\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                        \u003cHyperlink fx:id\u003d\"helpLink\" onAction\u003d\"#openLink\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \u003cLabel fx:id\u003d\"commandHelpLegend\" minWidth\u003d\"-Infinity\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"0\" style\u003d\"-fx-text-fill: white\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 21,
      "jmleong666": 1,
      "-": 14,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "         title\u003d\"StonksBook\" minWidth\u003d\"900\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"1024\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"chatBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                       minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"150\" minWidth\u003d\"340\" prefWidth\u003d\"1024\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"768\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cVBox fx:id\u003d\"meetingList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"meetingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cVBox fx:id\u003d\"reminderList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c!-- This is a placeholder component that is to be deleted once the adhoc section is done --\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cVBox styleClass\u003d\"pane-with-border\" prefHeight\u003d\"550\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "              \u003cStackPane VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 7,
      "-": 39,
      "sebastiantoh": 42
    }
  },
  {
    "path": "src/main/resources/view/MeetingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import org.kordamp.ikonli.javafx.FontIcon?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003cVBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"message\" text\u003d\"\\$first\" wrapText\u003d\"true\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cFontIcon iconLiteral\u003d\"far-calendar-alt\" iconColor\u003d\"white\" iconSize\u003d\"16\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cFontIcon iconLiteral\u003d\"fas-user-circle\" iconColor\u003d\"white\" iconSize\u003d\"16\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"personName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$personName\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 39
    }
  },
  {
    "path": "src/main/resources/view/MeetingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cLabel text\u003d\"Meetings\" styleClass\u003d\"label-header-small\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalSalesAmount\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" text\u003d\"\\$totalSalesAmount\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "hakujitsu": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import org.kordamp.ikonli.javafx.FontIcon?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003cVBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"message\" text\u003d\"\\$first\" wrapText\u003d\"true\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cFontIcon fx:id\u003d\"calendarIcon\" iconLiteral\u003d\"far-calendar-alt\" iconColor\u003d\"white\" iconSize\u003d\"16\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"scheduledDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$scheduledDate\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cFontIcon iconLiteral\u003d\"fas-user-circle\" iconColor\u003d\"white\" iconSize\u003d\"16\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"personName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$personName\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 39
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cLabel text\u003d\"Reminders\" styleClass\u003d\"label-header-small\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "  \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 9
    }
  },
  {
    "path": "src/main/resources/view/StatisticsWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003cfx:root minHeight\u003d\"500\" minWidth\u003d\"1024\" resizable\u003d\"false\" title\u003d\"stats\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"500\" minWidth\u003d\"1024\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChart\" minHeight\u003d\"500\" minWidth\u003d\"1024\" style\u003d\"-fx-background-color: derive(#1d1d1d, 20%); -fx-fillbackground-color: #383838;\" title\u003d\"ok\" verticalGridLinesVisible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" tickLabelFill\u003d\"WHITE\" fx:id\u003d\"x\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "          \u003cNumberAxis fx:id\u003d\"y\" side\u003d\"LEFT\" tickLabelFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/MonthAndYearTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthAndYearTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthAndYear monthAndYear \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            new MonthAndYear(Month.AUGUST, Year.of(2010));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthAndYear(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthAndYear(Month.APRIL, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthAndYear(null, Year.now()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonth_valid_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Month.AUGUST, this.monthAndYear.getMonth());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getYear_valid_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Year.of(2010), this.monthAndYear.getYear());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals_valid_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthAndYear, monthAndYear);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthAndYear monthAndYear1 \u003d new MonthAndYear(Month.AUGUST, Year.of(2010));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthAndYear, monthAndYear1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthAndYear1 \u003d new MonthAndYear(Month.APRIL, Year.of(2010));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthAndYear, monthAndYear1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthAndYear1 \u003d new MonthAndYear(Month.AUGUST, Year.of(1990));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthAndYear, monthAndYear1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthAndYear1 \u003d new MonthAndYear(Month.APRIL, Year.of(1990));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthAndYear, monthAndYear1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthAndYear, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/MonthlyCountDataSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.time.Month.APRIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.time.Month.AUGUST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "class MonthlyCountDataSetTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final List\u003cMonthlyCountData\u003e monthlyCountDataList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            Collections.singletonList(new MonthlyCountData(new MonthAndYear(AUGUST, Year.now()), 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthlyCountDataSet monthlyCountDataSet \u003d new MonthlyCountDataSet(monthlyCountDataList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getTestAndSetTest_valid_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedTitle \u003d \"test 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyCountDataSet.setTitle(expectedTitle);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedTitle, monthlyCountDataSet.getTitle());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthlyCountDataList_valid_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cMonthlyCountData\u003e expected \u003d new ArrayList\u003c\u003e(this.monthlyCountDataList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expected, this.monthlyCountDataSet.getMonthlyCountDataList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals_valid_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthlyCountDataSet, monthlyCountDataSet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet monthlyCountDataSet1 \u003d new MonthlyCountDataSet("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                this.monthlyCountDataSet.getMonthlyCountDataList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountData monthlyCountData2 \u003d new MonthlyCountData("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthAndYear(APRIL, Year.now()), 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet monthlyCountDataSet2 \u003d new MonthlyCountDataSet("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                Collections.singletonList(monthlyCountData2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthlyCountDataSet, monthlyCountDataSet1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountDataSet, monthlyCountDataSet2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyCountDataSet1.setTitle(\"test 1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountDataSet1, monthlyCountDataSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/MonthlyCountDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static java.time.Month.AUGUST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyCountDataTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final MonthlyCountData monthlyCountData \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            new MonthlyCountData(new MonthAndYear(AUGUST, Year.now()), 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthlyCountData(null, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getCount_valid_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, this.monthlyCountData.getCount());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthAndYearAsStr_valid_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedString \u003d String.format(\"%s %s\", AUGUST, Year.now());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountData monthlyCountData \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(AUGUST, Year.now()), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedString, monthlyCountData.getMonthAndYearAsStr());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals_valid_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthlyCountData, monthlyCountData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountData monthlyCountData1 \u003d new MonthlyCountData(new MonthAndYear(AUGUST, Year.now()), 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(monthlyCountData, monthlyCountData1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyCountData1 \u003d new MonthlyCountData(new MonthAndYear(AUGUST, Year.of(2013)), 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountData, monthlyCountData1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyCountData1 \u003d new MonthlyCountData(new MonthAndYear(AUGUST, Year.now()), 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountData, monthlyCountData1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        monthlyCountData1 \u003d new MonthlyCountData(new MonthAndYear(Month.APRIL, Year.now()), 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountData, monthlyCountData1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(monthlyCountData, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/MonthlyListMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.LUNCH_DANIEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.LUNCH_ELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.LUNCH_FIONA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.MEET_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.DRUMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.GUITAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MonthlyListMapTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private MonthlyListMap\u003cMeeting\u003e meetingMonthlyListMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap \u003d new MonthlyListMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void addItem_validInputs_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(2, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void removeItem_validInputs_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.removeItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.removeItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.removeItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void clear_noInput_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(2, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0, this.meetingMonthlyListMap.getItemCount(month, year));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMultipleMonthCount_valid_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, MEET_ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month1 \u003d LUNCH_FIONA.getStartDate().getMonth();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year1 \u003d Year.of(LUNCH_FIONA.getStartDate().getYear());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month1, year1, LUNCH_FIONA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month1, year1, LUNCH_FIONA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet actual \u003d this.meetingMonthlyListMap"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .getMultipleMonthCount(month, year, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet expected \u003d new MonthlyCountDataSet(Arrays.asList("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month1, year1), 2),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month.minus(1), year), 0),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month, year), 4)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMultipleMonthCount_validButMonthStartFromFeb_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d LUNCH_DANIEL.getStartDate().getMonth();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(LUNCH_DANIEL.getStartDate().getYear());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, LUNCH_DANIEL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month, year, LUNCH_DANIEL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month1 \u003d LUNCH_ELLE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year1 \u003d Year.of(LUNCH_ELLE.getStartDate().getYear());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.meetingMonthlyListMap.addItem(month1, year1, LUNCH_ELLE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet actual \u003d this.meetingMonthlyListMap"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .getMultipleMonthCount(month1, year1, 6);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet expected \u003d new MonthlyCountDataSet(Arrays.asList("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month.minus(4), year.minusYears(1)), 0),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month.minus(3), year.minusYears(1)), 0),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month.minus(2), year.minusYears(1)), 0),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month.minus(1), year.minusYears(1)), 0),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month, year), 2),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month1, year1), 1)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getItems_validInputs_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyListMap\u003cSale\u003e saleMonthlyListMap \u003d new MonthlyListMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d GUITAR.getDatetimeOfPurchase().getMonth();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(GUITAR.getDatetimeOfPurchase().getYear());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        saleMonthlyListMap.addItem(month, year, GUITAR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        saleMonthlyListMap.addItem(month, year, DRUMS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e expectedSaleList \u003d Arrays.asList(GUITAR, DRUMS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedSaleList, saleMonthlyListMap.getItems(month, year));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/SimilarContactsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SimilarContactsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final SimilarContacts similarContacts \u003d new SimilarContacts(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarContacts(null, 1.0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarContacts(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_validInput_correctResult() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertDoesNotThrow(() -\u003e new SimilarContacts(\"\", 1.0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertDoesNotThrow(() -\u003e new SimilarContacts(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getAttributeAsStr_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e similarContacts.getAttributeAsStr(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getAttributeAsStr_validInput_correctResult() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(ALICE.getName().fullName, similarContacts.getAttributeAsStr(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/SimilarItemsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SimilarItemsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void isInSimilarityMapper_validInput_correctResults() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.getSimilarityMapper().put(ALICE, 0.3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(similarItems.isInSimilarityMapper(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(similarItems.isInSimilarityMapper(IDA));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(similarItems.isInSimilarityMapper(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getFromSimilarityMatrix_validInput_correctResults() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.getSimilarityMapper().put(ALICE, 0.3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(-1, similarItems.getFromSimilarityMatrix(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(-1, similarItems.getFromSimilarityMatrix(IDA));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.3, similarItems.getFromSimilarityMatrix(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void fillSimilarityMapper_validInput_oneResultFound() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.fillSimilarityMapper(getTypicalPersons());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, similarItems.getSimilarityMapper().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(similarItems.getSimilarityMapper().containsKey(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void fillSimilarityMapper_emptyList_noResultFound() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.fillSimilarityMapper(Collections.emptyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(similarItems.getSimilarityMapper().isEmpty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void fillSimilarityMapper_noMatchingList_noResultFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.fillSimilarityMapper(Collections.singletonList(BENSON));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(similarItems.getSimilarityMapper().isEmpty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void fillSimilarityMapper_validInput_multipleResultsFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SimilarContacts similarItems \u003d new SimilarContacts(HOON.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        similarItems.fillSimilarityMapper(getTypicalPersons());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(3, similarItems.getSimilarityMapper().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Set.of(BENSON, DANIEL, ELLE), similarItems.getSimilarityMapper().keySet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.util.DateUtil.isSameDay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DateUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void isSameDay_sameObjects_returnTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020, 10, 10, 10, 10, 10);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(isSameDay(date, date));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void isSameDay_sameDayDiffHour_returnTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime date1 \u003d LocalDateTime.of(2020, 10, 10, 10, 10, 10);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime date2 \u003d LocalDateTime.of(2020, 10, 10, 0, 10, 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(isSameDay(date1, date2));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void isSameDay_sameDayDiffYear_returnFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime date1 \u003d LocalDateTime.of(2020, 10, 10, 10, 10, 10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        LocalDateTime date2 \u003d LocalDateTime.of(2019, 10, 10, 10, 10, 10);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(isSameDay(date1, date2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void calculateSimilarityRatio_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.calculateSimilarityRatio(null, \"abc\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.calculateSimilarityRatio(\"abc\", null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.calculateSimilarityRatio(null, null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void calculateSimilarityRatio_validInputs_correctResult() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // Add h to ell"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.75, StringUtil.calculateSimilarityRatio(\"ell\", \"hell\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // Remove o from hello"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.8, StringUtil.calculateSimilarityRatio(\"hello\", \"hell\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // Substitute e with u and o with u in hello"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.6, StringUtil.calculateSimilarityRatio(\"hello\", \"hullu\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // Substitute H with h in Hello"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.8, StringUtil.calculateSimilarityRatio(\"Hello\", \"hello\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // Substitute 123 with 789 and delete 456"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.0, StringUtil.calculateSimilarityRatio(\"123456\", \"789\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // delete all 123456"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0.0, StringUtil.calculateSimilarityRatio(\"123456\", \"\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 29,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(invalidCommand, MESSAGE_UNKNOWN_COMMAND, this.model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String deleteCommand \u003d \"contact delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getAddressBook_correctResults() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(model.getAddressBook(), logic.getAddressBook());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getFilteredPersonList_correctResults() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(model.getFilteredPersonList(), logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getSortedPersonList_correctResults() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(model.getSortedPersonList(), logic.getSortedPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getAddressBookFilePath_correctResults() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(model.getAddressBookFilePath(), logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getGuiSettings_correctResults() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(model.getGuiSettings(), logic.getGuiSettings());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void setGuiSettings_nullGiven_nullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e logic.setGuiSettings(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void setGuiSettings_validInput_correctResults() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(guiSettings, logic.getGuiSettings());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 44,
      "hakujitsu": 2,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different clear value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different statistics result -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \"feedback\", new MonthlyCountDataSet(Collections.emptyList()))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                \"feedback\", new MonthlyCountDataSet(Collections.emptyList())).equals(commandResult));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different clear value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different statistic result -\u003e returns different hashcode"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new CommandResult(\"feedback\", new MonthlyCountDataSet(Collections.emptyList())).hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 15,
      "jmleong666": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MOST_SIMILAR_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_UNIT_PRICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand.EditSaleDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.EditSaleDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /* Contact commands */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Name PARSED_VALID_NAME_AMY \u003d new Name(\"Amy Bee\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Name PARSED_VALID_NAME_BOB \u003d new Name(\"Bob Choo\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Phone PARSED_VALID_PHONE_AMY \u003d new Phone(\"11111111\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Phone PARSED_VALID_PHONE_BOB \u003d new Phone(\"22222222\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Email PARSED_VALID_EMAIL_AMY \u003d new Email(\"amy@example.com\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Email PARSED_VALID_EMAIL_BOB \u003d new Email(\"bob@example.com\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Address PARSED_VALID_ADDRESS_AMY \u003d new Address(\"Block 312, Amy Street 1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Address PARSED_VALID_ADDRESS_BOB \u003d new Address(\"Block 123, Bobby Street 3\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Tag PARSED_VALID_TAG_HUSBAND \u003d new Tag(\"husband\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Tag PARSED_VALID_TAG_FRIEND \u003d new Tag(\"friend\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Remark PARSED_VALID_REMARK_AMY \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Remark PARSED_VALID_REMARK_BOB \u003d new Remark(\"Likes cats\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_MESSAGE_CALL_AMY \u003d \"Call Amy\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_MESSAGE_CALL_BOB \u003d \"Call Bob\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_DATE_1 \u003d \"2020-10-30 15:19\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_DATE_2 \u003d \"2018-12-20 12:00\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_DATE_3 \u003d \"2020-12-20 12:12\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Likes cats\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String VALID_DURATION_ONE_HOUR \u003d \"60\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_CONTACT_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_CONTACT_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_CONTACT_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_CONTACT_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_CONTACT_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_CONTACT_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_CONTACT_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_CONTACT_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_CONTACT_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_CONTACT_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_CALL_AMY \u003d \" \" + PREFIX_MESSAGE + VALID_MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String MESSAGE_CALL_BOB \u003d \" \" + PREFIX_MESSAGE + VALID_MESSAGE_CALL_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String DATE_1 \u003d \" \" + PREFIX_DATETIME + VALID_DATE_1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String DATE_2 \u003d \" \" + PREFIX_DATETIME + VALID_DATE_2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String CONTACT_INDEX_SECOND \u003d \" \" + PREFIX_CONTACT + INDEX_SECOND_ITEM.getOneBased();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String CONTACT_INDEX_THIRD \u003d \" \" + PREFIX_CONTACT + INDEX_THIRD_ITEM.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String DURATION_ONE_HOUR \u003d \" \" + PREFIX_DURATION + VALID_DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_CONTACT_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_CONTACT_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_CONTACT_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \" \" + PREFIX_CONTACT_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String INVALID_DATE \u003d \" \" + PREFIX_DATETIME + \"2020/10/30 15:00\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String INVALID_CONTACT_INDEX \u003d \" \" + PREFIX_CONTACT + \"-1\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final String INVALID_DURATION \u003d \" \" + PREFIX_DURATION + \"-30\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /* Sale commands */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_ITEM_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_ITEM_NAME_BALL \u003d \"Ball\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_DATE_APPLE \u003d \"2020-10-30 15:00\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_DATE_BALL \u003d \"2020-09-22 12:40\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_QUANTITY_APPLE \u003d \"10\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_QUANTITY_BALL \u003d \"1\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_UNIT_PRICE_APPLE \u003d \"3.50\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_UNIT_PRICE_BALL \u003d \"0.8\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String VALID_SALE_TAG_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String VALID_SALE_TAG_FRUITS \u003d \"fruits\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_ITEM_NAME \u003d \" \" + PREFIX_SALE_NAME + \"@pple\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_SALE_DATE \u003d \" \" + PREFIX_SALE_DATE + \"2020/09/22 12:40\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_QUANTITY \u003d \" \" + PREFIX_SALE_QUANTITY + \"1.5\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String INVALID_UNIT_PRICE \u003d \" \" + PREFIX_SALE_UNIT_PRICE + \"0.0\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String ITEM_NAME_DESC_APPLE \u003d \" \" + PREFIX_SALE_NAME + VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String SALE_DATE_DESC_APPLE \u003d \" \" + PREFIX_SALE_DATE + VALID_DATE_APPLE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_SALE_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String UNIT_PRICE_DESC_APPLE \u003d \" \" + PREFIX_SALE_UNIT_PRICE + VALID_UNIT_PRICE_APPLE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String SALE_TAG_FRUITS \u003d \" \" + PREFIX_TAG + \"fruits\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final String VALID_SALE_TAG \u003d \" \" + PREFIX_TAG + VALID_SALE_TAG_FRUITS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final EditSaleDescriptor DESC_APPLE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final EditSaleDescriptor DESC_BALL;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withRemark(REMARK_DESC_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DESC_APPLE \u003d new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_APPLE).withBuyer(1)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withDatetimeOfPurchase(VALID_DATE_APPLE).withUnitPrice(VALID_UNIT_PRICE_APPLE)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withQuantity(VALID_QUANTITY_APPLE).withTags(VALID_SALE_TAG_FRUITS).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DESC_BALL \u003d new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_BALL).withBuyer(2)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withDatetimeOfPurchase(VALID_DATE_BALL).withUnitPrice(VALID_UNIT_PRICE_BALL)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BALL).withTags().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the sale at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static void showSaleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSaleList().size());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale sale \u003d model.getFilteredSaleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(x -\u003e x.equals(sale));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(1, model.getFilteredSaleList().size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Executes the UnknownCommand for each edited commandWord in the {@code commandWords} and expects"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * the result containing the unedited commandWord."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static void testAllCommandWords(List\u003cString\u003e commandWords) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (String commandWord : commandWords) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            UnknownCommand unknownCommand \u003d new UnknownCommand(commandWord.substring(2));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    String.format(MOST_SIMILAR_COMMAND, commandWord));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 15,
      "Asthenosphere": 4,
      "hakujitsu": 97,
      "-": 111,
      "sebastiantoh": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PurgeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class PurgeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new PurgeCommand(), model, PurgeCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new PurgeCommand(), model, PurgeCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 3,
      "-": 28,
      "sebastiantoh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnknownCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MOST_SIMILAR_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.testAllCommandWords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.contact.ContactCommandsParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.meeting.MeetingCommandsParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.reminder.ReminderCommandsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.sale.SaleCommandsParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.tag.TagCommandsParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class UnknownCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnknownCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_oneWordHaveSimilar_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand(\"hel\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MOST_SIMILAR_COMMAND, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        unknownCommand \u003d new UnknownCommand(\"contactl\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedCommandResult \u003d new CommandResult(String.format(MOST_SIMILAR_COMMAND, ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_twoWordHaveSimilar_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand(\"contact l\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MOST_SIMILAR_COMMAND, ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        unknownCommand \u003d new UnknownCommand(\"cont l\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedCommandResult \u003d new CommandResult(String.format(MOST_SIMILAR_COMMAND, ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_noSimilar_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand(\"asciajsocaisj\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        unknownCommand \u003d new UnknownCommand(\"cont ljoaisjcoiacjk\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedCommandResult \u003d new CommandResult(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, unknownCommand.execute(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarContactCommandWords_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(ContactCommandsParser.ALL_CONTACT_COMMAND_WORDS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarTagCommandWords_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(TagCommandsParser.ALL_TAG_COMMAND_WORDS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarMeetingCommandWords_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(MeetingCommandsParser.ALL_MEETING_COMMAND_WORDS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarReminderCommandWords_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(ReminderCommandsParser.ALL_REMINDER_COMMAND_WORDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarSaleCommandWords_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(SaleCommandsParser.ALL_SALE_COMMAND_WORDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarMiscellaneousCommandWords_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        testAllCommandWords(Arrays.asList(ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                ExitCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD, PurgeCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/archive/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ListCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person personToArchive \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveCommand \u003d new AddCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(personToArchive.isArchived());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person archivedPerson \u003d new Person("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getId(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getName(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getPhone(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getEmail(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getAddress(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getTags(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getRemark(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                !personToArchive.isArchived(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToArchive.getTotalSalesAmount()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedModel.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveCommand \u003d new AddCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_invalidFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person invalidPersonToArchive \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveCommand \u003d new AddCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(invalidPersonToArchive.isArchived());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_ARCHIVE_INVALIID_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveFirstCommand \u003d new AddCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveSecondCommand \u003d new AddCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        AddCommand archiveFirstCommandCopy \u003d new AddCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/archive/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ListCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/archive/RemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.commands.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code RemoveCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person personToRemove \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(personToRemove.isArchived());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_SUCCESS, personToRemove);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person removedPerson \u003d new Person("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getId(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getName(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getPhone(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getEmail(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getAddress(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getTags(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getRemark(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                !personToRemove.isArchived(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                personToRemove.getTotalSalesAmount()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedModel.setPerson(personToRemove, removedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute_invalidFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person invalidPersonToArchive \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(invalidPersonToArchive.isArchived());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertCommandFailure(removeCommand, model, Messages.MESSAGE_UNARCHIVE_INVALIID_LIST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand removeFirstCommand \u003d new RemoveCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand removeSecondCommand \u003d new RemoveCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        RemoveCommand archiveFirstCommandCopy \u003d new RemoveCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(removeFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(removeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(removeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertFalse(removeFirstCommand.equals(removeSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withId(10).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(PersonBuilder.DEFAULT_NAME, PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(expectedCommand, model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(personInList.getName(), personInList.getPhone(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                personInList.getEmail(), personInList.getAddress(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                personInList.getTags(), personInList.getRemark());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(expectedCommand, model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "hakujitsu": 10,
      "sebastiantoh": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_nullFields_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e singleTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        singleTagList.add(PARSED_VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, singleTagList, PARSED_VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(PARSED_VALID_NAME_BOB, null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, singleTagList, PARSED_VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                null, PARSED_VALID_ADDRESS_BOB, singleTagList, PARSED_VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, null, singleTagList, PARSED_VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, null, PARSED_VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, singleTagList, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withId(1).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(PersonBuilder.DEFAULT_NAME, PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandResult commandResult \u003d addCommand.execute(modelStub);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(PersonBuilder.DEFAULT_NAME, PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(new Name(\"Alice\"), PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(new Name(\"Bob\"), PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(new Name(\"Alice\"), PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 1,
      "hakujitsu": 44,
      "sebastiantoh": 3,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person personToDelete \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person personToDelete \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 7,
      "sebastiantoh": 9,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Allison Pauline\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withTotalSalesAmount(new BigDecimal(\"0.8\")).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withName(\"Allison Pauline\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.setPerson(model.getSortedPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        model.addContactTag(new Tag(VALID_TAG_HUSBAND));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getSortedPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person lastPerson \u003d model.getSortedPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person editedPerson \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person personInFilteredList \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.setPerson(model.getSortedPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Person firstPerson \u003d model.getSortedPersonList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ITEM, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(standardCommand.equals(new PurgeCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ITEM, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 15,
      "Asthenosphere": 2,
      "hakujitsu": 7,
      "sebastiantoh": 15,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "hakujitsu": 1,
      "sebastiantoh": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    void beforeEach() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.model.addPerson(HOON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.model.addPerson(IDA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.expectedModel.addPerson(HOON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        this.expectedModel.addPerson(IDA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String firstSearchKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String secondSearchKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstSearchKeyword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondSearchKeyword);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstSearchKeyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String zeroKeyword \u003d \" \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand command \u003d new FindCommand(zeroKeyword);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d Arrays.asList(CARL, FIONA, ELLE, IDA)::contains;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String multipleKeywords \u003d \"Kurz Elle Kunz\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand command \u003d new FindCommand(multipleKeywords);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA, IDA), model.getSortedPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarMatch_multiplePersonsFound() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d Arrays.asList(BENSON, DANIEL, ELLE, HOON, IDA)::contains;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String keyword \u003d \"meer\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand command \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL, ELLE, HOON, IDA), model.getSortedPersonList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_similarMatch_noPersonFound() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String unmatchedKeyword \u003d \"kdapsokdasopidjasoidjsaiodsjdoasijdsaodi\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand command \u003d new FindCommand(unmatchedKeyword);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getSortedPersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_exactAndSimilarMatch_multiplePersonsFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d Arrays.asList(BENSON, DANIEL, ELLE, HOON, IDA)::contains;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String keyword \u003d IDA.getName().fullName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand command \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), command.execute(model));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Arrays.asList(ELLE, DANIEL, BENSON, HOON, IDA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Arrays.asList(IDA, BENSON, DANIEL, ELLE, HOON), model.getSortedPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 72,
      "sebastiantoh": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contact/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.commands.contact.SortCommand.MESSAGE_SORTING_ATTRIBUTE_INVALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model reversedModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        reversedModel \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_nameOnly_success() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList((x, y) -\u003e x.getName().fullName"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(y.getName().fullName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList((x, y) -\u003e x.getName().fullName"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(y.getName().fullName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_nameAndDesc_success() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList((x, y) -\u003e y.getName().fullName"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(x.getName().fullName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList((x, y) -\u003e y.getName().fullName"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(x.getName().fullName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_emailOnly_success() throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList((x, y) -\u003e x.getEmail().value"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(y.getEmail().value));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList((x, y) -\u003e x.getEmail().value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(y.getEmail().value));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_emailAndDesc_success() throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList((x, y) -\u003e y.getEmail().value"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(x.getEmail().value));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList((x, y) -\u003e y.getEmail().value"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .compareToIgnoreCase(x.getEmail().value));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_totalSalesOnly_success() throws CommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Comparator\u003cPerson\u003e comparator \u003d Comparator.comparing(x -\u003e x.getTotalSalesAmount());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_totalSalesAndDesc_success() throws CommandException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Comparator\u003cPerson\u003e comparator \u003d Comparator.comparing(x -\u003e x.getTotalSalesAmount());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator.reversed());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult commandResult \u003d sortCommand.execute(model);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedReverseModel \u003d new ModelManager(new AddressBook(reversedModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedReverseModel.updateSortedPersonList(comparator.reversed());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        commandResult \u003d sortCommand.execute(reversedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedReverseModel, reversedModel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_invalidAttribute_failure() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Prefix prefix \u003d PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        boolean isDesc \u003d true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(prefix, isDesc);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SORTING_ATTRIBUTE_INVALID;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandFailure(sortCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        final SortCommand standardCommand \u003d new SortCommand(PREFIX_CONTACT_NAME, true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand commandWithSameValues \u003d new SortCommand(PREFIX_CONTACT_NAME, true);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(standardCommand.equals(new PurgeCommand()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different prefix -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(standardCommand.equals(new SortCommand(PREFIX_CONTACT_EMAIL, true)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different isDesc boolean -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(standardCommand.equals(new SortCommand(PREFIX_CONTACT_NAME, false)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 247,
      "hakujitsu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDurations.TYPICAL_DURATION_HALF_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDurations.TYPICAL_DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelStubWithSortedPersonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Message MESSAGE \u003d new Message(\"message\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(null, MESSAGE, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullMessage_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, null, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullStartDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, MESSAGE, null, TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, MESSAGE, TYPICAL_DATE_1, null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_meetingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStubAcceptingMeetingAdded modelStub \u003d new ModelStubAcceptingMeetingAdded();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting \u003d new Meeting(validPerson, MESSAGE, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, MESSAGE, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .execute(modelStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, meeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(Arrays.asList(meeting), modelStub.meetingsAdded);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting \u003d new Meeting(validPerson, MESSAGE, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithMeeting(meeting);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(INDEX_FIRST_ITEM, MESSAGE, TYPICAL_DATE_1, TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_MEETING, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message lunchWithAlice \u003d new Message(\"Lunch with Alice\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addLunchAliceMeetingCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, lunchWithAlice, TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(addLunchAliceMeetingCommand, addLunchAliceMeetingCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addLunchAliceMeetingCommandCopy \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, lunchWithAlice, TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(addLunchAliceMeetingCommand, addLunchAliceMeetingCommandCopy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand, 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, lunchWithAlice, TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different message -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, new Message(\"Dinner with Alice\"), TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, lunchWithAlice, TYPICAL_DATE_2,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addLunchAliceMeetingCommand,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, lunchWithAlice, TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_HALF_HOUR));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * A Model stub that always accept the meeting being added."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private class ModelStubAcceptingMeetingAdded extends ModelStubWithSortedPersonList {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final ArrayList\u003cMeeting\u003e meetingsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return meetingsAdded.stream().anyMatch(meeting::equals);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            meetingsAdded.add(meeting);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * A Model stub that contains a single meeting."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private class ModelStubWithMeeting extends ModelStubWithSortedPersonList {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private final Meeting meeting;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStubWithMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return this.meeting.equals(meeting);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meetingToDelete \u003d model.getSortedMeetingList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedMeetingList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ListCommand listFirstCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ListCommand listSecondCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(listFirstCommand, listSecondCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/MultipleMeetingStatsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * {@code MultipleMeetingStatsCommand}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class MultipleMeetingStatsCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_validInputs_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(this.model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month currentMonth \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year currentYear \u003d Year.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int numberOfMonths \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet expectedResult \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                expectedModel.getMultipleMonthMeetingsCount(currentMonth, currentYear, numberOfMonths);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        expectedResult.setTitle(MultipleMeetingStatsCommand.DATASET_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand statsCommand \u003d new MultipleMeetingStatsCommand(numberOfMonths);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                MultipleMeetingStatsCommand.MESSAGE_SUCCESS, expectedResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult actualResult \u003d statsCommand.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedCommandResult, actualResult);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand firstCommand \u003d new MultipleMeetingStatsCommand(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand secondCommand \u003d new MultipleMeetingStatsCommand(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand thirdCommand \u003d new MultipleMeetingStatsCommand(2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different numberOfMonths -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(thirdCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/SingleMeetingStatsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * {@code SingleMeetingStatsCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SingleMeetingStatsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SingleMeetingStatsCommand(null, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SingleMeetingStatsCommand(Month.APRIL, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SingleMeetingStatsCommand(null, Year.of(1850)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_validInputs_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(this.model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int expectedCount \u003d expectedModel.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand statsCommand \u003d new SingleMeetingStatsCommand(month, year);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedResult \u003d String.format(SingleMeetingStatsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                month.name(), year.getValue(), expectedCount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(statsCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_noInpus_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(this.model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int expectedCount \u003d expectedModel.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand statsCommand \u003d new SingleMeetingStatsCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedResult \u003d String.format(SingleMeetingStatsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                month.name(), year.getValue(), expectedCount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(statsCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d LocalDate.now(ZoneId.of(\"Asia/Singapore\")).getMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.now();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month1 \u003d Month.APRIL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year1 \u003d Year.of(120);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand firstCommand \u003d new SingleMeetingStatsCommand(month, year);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand secondCommand \u003d new SingleMeetingStatsCommand(month1, year1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand thirdCommand \u003d new SingleMeetingStatsCommand(month, year1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand fourthCommand \u003d new SingleMeetingStatsCommand(month1, year);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        StatsCommand firstCommandCopy \u003d new SingleMeetingStatsCommand(month, year);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different month -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(thirdCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(firstCommand.equals(fourthCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/reminder/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelStubWithSortedPersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Message MESSAGE \u003d new Message(\"message\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null, MESSAGE, TYPICAL_DATE_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullMessage_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(INDEX_FIRST_ITEM, null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TYPICAL_DATE_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_nullScheduledDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(INDEX_FIRST_ITEM, MESSAGE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder \u003d new Reminder(validPerson, MESSAGE, TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, MESSAGE, TYPICAL_DATE_1).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, reminder),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(Arrays.asList(reminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_duplicateReminder_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder \u003d new Reminder(validPerson, MESSAGE, TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithReminder(reminder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(INDEX_FIRST_ITEM, MESSAGE, TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_REMINDER, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message callAlice \u003d new Message(\"Call Alice\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addCallAliceReminderCommand \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, callAlice, TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(addCallAliceReminderCommand, addCallAliceReminderCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand addCallAliceReminderCommandCopy \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_FIRST_ITEM, callAlice, TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(addCallAliceReminderCommand, addCallAliceReminderCommandCopy);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addCallAliceReminderCommand, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addCallAliceReminderCommand, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addCallAliceReminderCommand, new AddCommand(INDEX_SECOND_ITEM, callAlice,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TYPICAL_DATE_1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different message -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addCallAliceReminderCommand, new AddCommand(INDEX_FIRST_ITEM, new Message(\"Call Bob\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TYPICAL_DATE_1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(addCallAliceReminderCommand, new AddCommand(INDEX_FIRST_ITEM, callAlice,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TYPICAL_DATE_2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * A Model stub that always accept the reminder being added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStubWithSortedPersonList {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::equals);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * A Model stub that contains a single reminder."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private class ModelStubWithReminder extends ModelStubWithSortedPersonList {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return this.reminder.equals(reminder);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/reminder/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminderToDelete \u003d model.getSortedReminderList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedReminderList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/reminder/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand.EditReminderDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.TypicalDates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.reminder.EditReminderDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder editedReminder \u003d new Reminder(GEORGE, new Message(VALID_MESSAGE_CALL_AMY),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TypicalDates.TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                // George appears as the 6th item"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withContactIndex(Index.fromZeroBased(6))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .withStatus(false)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel.setReminder(model.getSortedReminderList().get(0), editedReminder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index indexLastReminder \u003d Index.fromOneBased(model.getSortedReminderList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder lastReminder \u003d model.getSortedReminderList().get(indexLastReminder.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder editedReminder \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new Reminder(lastReminder.getPerson(), lastReminder.getMessage(), TypicalDates.TYPICAL_DATE_3, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .withScheduledDate(TypicalDates.TYPICAL_DATE_3)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .withStatus(true)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastReminder, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel.setReminder(lastReminder, editedReminder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, new EditReminderDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder editedReminder \u003d model.getSortedReminderList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_duplicateReminderUnfilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder firstReminder \u003d model.getSortedReminderList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withContactIndex(Index.fromZeroBased(model.getSortedPersonList().indexOf(firstReminder.getPerson())))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withScheduledDate(firstReminder.getScheduledDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withMessage(firstReminder.getMessage().message)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                .withStatus(false)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_invalidReminderIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedReminderList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder().withMessage(VALID_MESSAGE_CALL_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withContactIndex(INDEX_SECOND_ITEM)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_3)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        .withStatus(false)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor copyDescriptor \u003d new EditReminderDescriptor(descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(new PurgeCommand()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ITEM, descriptor)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor diffDescriptor \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, diffDescriptor)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 10,
      "sebastiantoh": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/reminder/EditReminderDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand.EditReminderDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.TypicalDates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.reminder.EditReminderDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditReminderDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder().withContactIndex(INDEX_SECOND_ITEM).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder().withContactIndex(INDEX_SECOND_ITEM).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptorWithDiffValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder().withContactIndex(INDEX_SECOND_ITEM)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_2).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(descriptor.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(descriptor.equals(descriptor));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(descriptor.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(descriptor.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(descriptor.equals(descriptorWithDiffValues));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/reminder/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ListCommand listFirstCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ListCommand listSecondCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(listFirstCommand, listSecondCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.BALL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UniqueSaleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.testutil.TypicalSaleTags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.SaleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(null, APPLE.getItemName(), APPLE.getDatetimeOfPurchase(), APPLE.getQuantity(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getUnitPrice(), APPLE.getTags()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, null, APPLE.getDatetimeOfPurchase(), APPLE.getQuantity(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getUnitPrice(), APPLE.getTags()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, APPLE.getItemName(), null, APPLE.getQuantity(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getUnitPrice(), APPLE.getTags()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, APPLE.getItemName(), APPLE.getDatetimeOfPurchase(), null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getUnitPrice(), APPLE.getTags()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, APPLE.getItemName(), APPLE.getDatetimeOfPurchase(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getQuantity(), null, APPLE.getTags()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, APPLE.getItemName(), APPLE.getDatetimeOfPurchase(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        APPLE.getQuantity(), APPLE.getUnitPrice(), null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_invalidContactIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(outOfBoundIndex, BALL.getItemName(), BALL.getDatetimeOfPurchase(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                BALL.getQuantity(), BALL.getUnitPrice(), BALL.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(addCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_saleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale validSale \u003d new SaleBuilder(APPLE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale toAdd \u003d new SaleBuilder(BALL).withBuyerId(validPerson.getId()).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addSale(validSale);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        model.addSaleTag(TypicalSaleTags.SPORTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(INDEX_FIRST_ITEM, toAdd.getItemName(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                toAdd.getDatetimeOfPurchase(), toAdd.getQuantity(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                toAdd.getUnitPrice(), toAdd.getTags()).execute(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ObservableList\u003cSale\u003e newSaleList \u003d model.getSortedSaleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ObservableList\u003cSale\u003e expectedSaleList \u003d new UniqueSaleList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .add(toAdd).add(validSale).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, toAdd), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(newSaleList.equals(expectedSaleList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_duplicateSale_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale validSale \u003d new SaleBuilder(APPLE).withBuyerId(validPerson.getId()).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addSale(validSale);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(INDEX_FIRST_ITEM, validSale.getItemName(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                validSale.getDatetimeOfPurchase(), validSale.getQuantity(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                validSale.getUnitPrice(), validSale.getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_SALE, () -\u003e addCommand.execute(model));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addAppleToIndexOne \u003d new AddCommand(INDEX_FIRST_ITEM, APPLE.getItemName(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                APPLE.getDatetimeOfPurchase(), APPLE.getQuantity(), APPLE.getUnitPrice(), APPLE.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addAppleToIndexTwo \u003d new AddCommand(INDEX_SECOND_ITEM, APPLE.getItemName(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                APPLE.getDatetimeOfPurchase(), APPLE.getQuantity(), APPLE.getUnitPrice(), APPLE.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addBallToIndexOne \u003d new AddCommand(INDEX_FIRST_ITEM, BALL.getItemName(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                BALL.getDatetimeOfPurchase(), BALL.getQuantity(), BALL.getUnitPrice(), BALL.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(addAppleToIndexOne.equals(addAppleToIndexOne));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand addAppleToIndexOneCopy \u003d new AddCommand(INDEX_FIRST_ITEM, APPLE.getItemName(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                APPLE.getDatetimeOfPurchase(), APPLE.getQuantity(), APPLE.getUnitPrice(), APPLE.getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(addAppleToIndexOne.equals(addAppleToIndexOneCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(addAppleToIndexOne.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(addAppleToIndexOne.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(addAppleToIndexOne.equals(addAppleToIndexTwo));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different sale -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(addAppleToIndexOne.equals(addBallToIndexOne));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 2,
      "hakujitsu": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/AllListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AllListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class AllListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_noIndex_showsAllSales() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String saleListResult \u003d \"Listing all sales:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"1. Apple (Date of Purchase: Fri, 30 Oct 2020, 15:00, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"Quantity: 10, Unit Price: 3.50, Tags: [[fruits]])\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"2. Ball (Date of Purchase: Tue, 22 Sep 2020, 12:40, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"Quantity: 1, Unit Price: 0.80, Tags: [[sports]])\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"3. Camera (Date of Purchase: Sun, 01 Nov 2020, 09:05, \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"Quantity: 2, Unit Price: 1000.50, Tags: [[electronics]])\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new AllListCommand(true, null), model, saleListResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_validIndex_showsSales() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String saleListResult \u003d \"Sales made to Benson Meier:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"1. Apple (Date of Purchase: Fri, 30 Oct 2020, 15:00, \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"Quantity: 10, Unit Price: 3.50, Tags: [[fruits]])\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new AllListCommand(false, INDEX_SECOND_ITEM), model, saleListResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_emptySalesListWithoutIndex_displaysEmptySalesListMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String saleListResult \u003d \"No sales made!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new AllListCommand(true, null), model, saleListResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_emptySalesListWithIndex_displaysEmptySalesListMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String saleListResult \u003d \"No sales made to Daniel Meier!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertCommandSuccess(new AllListCommand(false, Index.fromOneBased(4)), model, saleListResult, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        AllListCommand listCommand \u003d new AllListCommand(false, outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(listCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 7,
      "hakujitsu": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.sale.DeleteCommand.MESSAGE_NO_SALES_DISPLAYED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_noSalesListed_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(x -\u003e false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleToDelete \u003d model.getSortedSaleList().get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.removeSale(saleToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, MESSAGE_NO_SALES_DISPLAYED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(x -\u003e true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleToDelete \u003d model.getFilteredSaleList().get(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SALE_SUCCESS, saleToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.updateFilteredSaleList(x -\u003e true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person toEdit \u003d expectedModel.getSortedPersonList().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .filter(person -\u003e person.getId().equals(saleToDelete.getBuyerId()))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertNotNull(toEdit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person newPerson \u003d new PersonBuilder(toEdit)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withTotalSalesAmount(toEdit.getTotalSalesAmount().subtract(saleToDelete.getTotalCost())).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.setPerson(toEdit, newPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.removeSale(saleToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_invalidSaleIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(x -\u003e true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SALE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_emptyFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.updateFilteredSaleList(x -\u003e false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d \"No sales displayed, use `sale list` to display sales \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"before executing the `sale delete` command\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteFirstSaleCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteSecondSaleCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(deleteFirstSaleCommand.equals(deleteFirstSaleCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        DeleteCommand deleteFirstSaleCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(deleteFirstSaleCommand.equals(deleteFirstSaleCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(deleteFirstSaleCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(deleteFirstSaleCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(deleteFirstSaleCommand.equals(deleteSecondSaleCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALE_TAG_FRUITS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSaleAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookInReverse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand.EditSaleDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.EditSaleDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.SaleBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookInReverse(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedSale \u003d new SaleBuilder().withItemName(\"Tissue Box\").withBuyerId(1).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor descriptor \u003d new EditSaleDescriptorBuilder(editedSale).withItemName(\"Tissue Box\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SALE_SUCCESS, editedSale);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.setSale(model.getSortedSaleList().get(2), editedSale);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        model.addContactTag(new Tag(VALID_SALE_TAG_FRUITS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index indexLastSale \u003d Index.fromOneBased(model.getSortedSaleList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale lastSale \u003d model.getSortedSaleList().get(indexLastSale.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        SaleBuilder saleInList \u003d new SaleBuilder(lastSale);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedSale \u003d saleInList.withItemName(VALID_ITEM_NAME_BALL).withQuantity(VALID_QUANTITY_APPLE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withTags(VALID_SALE_TAG_FRUITS).withBuyerId(1).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor descriptor \u003d new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_BALL)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withQuantity(VALID_QUANTITY_APPLE).withTags(VALID_SALE_TAG_FRUITS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SALE_SUCCESS, editedSale);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.setSale(lastSale, editedSale);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, new EditSaleDescriptor(), null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedSale \u003d model.getFilteredSaleList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SALE_SUCCESS, editedSale);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        showSaleAtIndex(model, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleInFilteredList \u003d model.getSortedSaleList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedSale \u003d new SaleBuilder(saleInFilteredList).withItemName(VALID_ITEM_NAME_APPLE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_APPLE).build(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SALE_SUCCESS, editedSale);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedModel.setSale(model.getSortedSaleList().get(0), editedSale);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale firstSale \u003d model.getSortedSaleList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor descriptor \u003d new EditSaleDescriptorBuilder(firstSale).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_THIRD_ITEM, descriptor, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SALE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        showSaleAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // edit sale in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale saleInList \u003d model.getAddressBook().getSaleList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new EditSaleDescriptorBuilder(saleInList).build(), INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SALE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedPersonList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor descriptor \u003d new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_BALL).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor, null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SALE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void execute_invalidSaleIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        showSaleAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getSaleList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            new EditSaleDescriptorBuilder().withItemName(VALID_ITEM_NAME_BALL).build(), null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SALE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ITEM, DESC_APPLE, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor copyDescriptor \u003d new EditSaleDescriptor(DESC_APPLE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ITEM, copyDescriptor, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(new PurgeCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ITEM, DESC_APPLE, INDEX_SECOND_ITEM)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, DESC_BALL, INDEX_SECOND_ITEM)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, DESC_APPLE, INDEX_FIRST_ITEM)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null person index -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, DESC_APPLE, null)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/EditSaleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIT_PRICE_BALL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand.EditSaleDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.EditSaleDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class EditSaleDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor descriptorWithSameValues \u003d new EditSaleDescriptor(DESC_APPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(DESC_APPLE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(DESC_APPLE.equals(DESC_APPLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(DESC_BALL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different item name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditSaleDescriptor editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withItemName(VALID_ITEM_NAME_BALL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different buyer id -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE).withBuyer(10).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                .withDatetimeOfPurchase(VALID_DATE_BALL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different unit price -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE).withUnitPrice(VALID_UNIT_PRICE_BALL).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE).withQuantity(VALID_QUANTITY_BALL).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new EditSaleDescriptorBuilder(DESC_APPLE).withTags().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(DESC_APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/sale/MonthlyListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.commands.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.CAMERA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " * Contains integration tests and unit tests for MonthlyListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "class MonthlyListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void constructor_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthlyListCommand(null, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthlyListCommand(null, Year.now()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MonthlyListCommand(Month.APRIL, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void execute_valid_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyListCommand monthlyListCommand \u003d new MonthlyListCommand(Month.NOVEMBER, Year.of(2020));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedFormattedString \u003d monthlyListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                .formatSaleListOutput(Collections.singletonList(CAMERA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String expectedResult \u003d String.format(MonthlyListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                1, Month.NOVEMBER, Year.of(2020), expectedFormattedString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        CommandResult actualCommandResult \u003d monthlyListCommand.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new CommandResult(expectedResult), actualCommandResult);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tag/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String BANANAS \u003d \"bananas\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String MINIONS \u003d \"minions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_validContactTag_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToAdd \u003d new Tag(MINIONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(tagToAdd, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_CONTACT_SUCCESS, tagToAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        expectedModel.addContactTag(tagToAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_validSaleTag_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToAdd \u003d new Tag(BANANAS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(tagToAdd, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SALES_SUCCESS, tagToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        expectedModel.addSaleTag(tagToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag bananas \u003d new Tag(BANANAS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag minions \u003d new Tag(MINIONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddCommand addContactTagCommand \u003d new AddCommand(minions, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddCommand addSaleTagCommand \u003d new AddCommand(bananas, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(addContactTagCommand.equals(addContactTagCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddCommand addContactTagCommandCopy \u003d new AddCommand(minions, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(addContactTagCommand.equals(addContactTagCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(addContactTagCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(addContactTagCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(addContactTagCommand.equals(addSaleTagCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tag/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_validIndexContactTagList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToDelete \u003d model.getContactTagList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        expectedModel.deleteContactTag(tagToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_invalidIndexContactTagList_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Index outOfBoundIndex \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Index.fromOneBased(model.getContactTagList().size() + model.getSaleTagList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same indices -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tag/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String BANANAS \u003d \"bananas\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String MINIONS \u003d \"minions\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_validIndexContactTagList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToEdit \u003d model.getContactTagList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag editedTag \u003d new Tag(MINIONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand.EditTagDescriptor descriptor \u003d new EditCommand.EditTagDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        descriptor.setTagName(MINIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TAG_SUCCESS, tagToEdit, editedTag);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        expectedModel.editContactTag(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_invalidIndexContactTagList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Index outOfBoundIndex \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Index.fromOneBased(model.getContactTagList().size() + model.getSaleTagList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand.EditTagDescriptor descriptor \u003d new EditCommand.EditTagDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        descriptor.setTagName(MINIONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand.EditTagDescriptor firstDescriptor \u003d new EditCommand.EditTagDescriptor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        firstDescriptor.setTagName(MINIONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand.EditTagDescriptor secondDescriptor \u003d new EditCommand.EditTagDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        secondDescriptor.setTagName(BANANAS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand editFirstCommand \u003d new EditCommand(INDEX_FIRST_ITEM, firstDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand editSecondCommand \u003d new EditCommand(INDEX_SECOND_ITEM, secondDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand editFirstCommandCopy \u003d new EditCommand(INDEX_FIRST_ITEM, firstDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(editFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(editFirstCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(editFirstCommand.equals(editSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tag/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.commands.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_validIndexFindByContactTag_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag tagToFind \u003d model.getContactTagList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String expectedMessage \u003d \"Listing 3 contacts associated with: [friends]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"1. Alice Pauline Phone: 94351253 Email: alice@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 123, Jurong West Ave 6, #08-111 Tags: [friends] Remark: Likes chocolates\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"2. Benson Meier Phone: 98765432 Email: johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 311, Clementi Ave 2, #02-25 Tags: [owesMoney][friends] Remark: Owes me $10\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"3. Daniel Meier Phone: 87652533 Email: cornelia@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 10th street Tags: [friends] Remark: \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        expectedModel.findByContactTag(tagToFind);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute_invalidIndexFindByContactTag_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Index outOfBoundIndex \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Index.fromOneBased(model.getContactTagList().size() + model.getSaleTagList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertCommandFailure(findCommand, model, Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // same indices -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.PurgeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.StatsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.contact.SortCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(PersonBuilder.DEFAULT_NAME, PersonBuilder.DEFAULT_PHONE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PersonBuilder.DEFAULT_EMAIL, PersonBuilder.DEFAULT_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new HashSet\u003c\u003e(), PersonBuilder.DEFAULT_REMARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseCommand_purge() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(PurgeCommand.COMMAND_WORD) instanceof PurgeCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(PurgeCommand.COMMAND_WORD + \" 3\") instanceof PurgeCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            + INDEX_FIRST_ITEM.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String keywords \u003d \"foo bar baz\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(new FindCommand(keywords), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + PREFIX_CONTACT_NAME) instanceof SortCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + PREFIX_CONTACT_EMAIL + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                + SortCommandParser.ORDER_KEYWORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(\"unknown\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(\"unknown command\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(\"hel\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(\"tag lis\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(\"tag\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseCommand_meetingStat() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String month \u003d \"10\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String year \u003d \"2020\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" \" + PREFIX_MONTH + month + \" \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                + PREFIX_YEAR + year) instanceof StatsCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 48,
      "hakujitsu": 8,
      "-": 74,
      "sebastiantoh": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Asserts that the parsing of {@code userInput} and {@code arguments} by {@code parser} is successful and the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * command created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static void assertParseSuccess(GroupCommandsParser parser, String userInput,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                                          String arguments, Command expectedCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Command command \u003d parser.parse(userInput, arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "sebastiantoh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_1 \u003d \"2020/10/30 15:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_2 \u003d \"2020-30-10 15:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_3 \u003d \"2020-10-30 26:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_4 \u003d \"2020-10-30 8:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_5 \u003d \"2020-10-30 8:61\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATETIME_6 \u003d \"30/10/2100 08:31\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_1 \u003d \"0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_2 \u003d \"-60\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_3 \u003d \"2 hours 30 minutes\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_4 \u003d \"30.5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_5 \u003d \"0.00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"2020-10-30 15:19\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final LocalDateTime EXPECTED_DATETIME \u003d LocalDateTime.of(2020, 10, 30, 15, 19);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_DURATION \u003d \"120\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Duration EXPECTED_DURATION \u003d Duration.ofMinutes(120);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseMessage_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMessage(null));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseMessage_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMessage(INVALID_NAME));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseMessage_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message expectedMessage \u003d new Message(VALID_NAME);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedMessage, ParserUtil.parseMessage(VALID_NAME));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseMessage_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String messageWithWhiteSpace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Message expectedMessage \u003d new Message(VALID_NAME);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedMessage, ParserUtil.parseMessage(messageWithWhiteSpace));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_1));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_2));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_3));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_4));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_5));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_6));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsLocalDateTime() throws Exception {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(EXPECTED_DATETIME, ParserUtil.parseDateTime(VALID_DATETIME));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsLocalDateTime() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String dateTimeWithWhitespace \u003d WHITESPACE + VALID_DATETIME + WHITESPACE;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(EXPECTED_DATETIME, ParserUtil.parseDateTime(dateTimeWithWhitespace));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDuration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration(null));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDuration_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_1));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_2));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_3));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_4));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_5));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDuration_validValueWithoutWhitespace_returnsDuration() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(EXPECTED_DURATION, ParserUtil.parseDuration(VALID_DURATION));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDuration_validValueWithWhitespace_returnsDuration() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String durationWithWhitespace \u003d WHITESPACE + VALID_DURATION + WHITESPACE;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(EXPECTED_DURATION, ParserUtil.parseDuration(durationWithWhitespace));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseMonth_validValue_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Month.AUGUST, ParserUtil.parseMonth(String.valueOf(8)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Month.DECEMBER, ParserUtil.parseMonth(String.valueOf(12)));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseMonth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseMonth(String.valueOf(0)));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseMonth(String.valueOf(13)));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseMonth(String.valueOf(-1)));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseYear_validValue_returnsYear() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Year.of(2020), ParserUtil.parseYear(\"2020\"));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Year.of(1990), ParserUtil.parseYear(\"1990\"));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseYear_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseYear(String.valueOf(-1)));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseYear(String.valueOf(1000000000)));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseNumberOfMonths_validValue_returnsInt() throws ParseException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(2, ParserUtil.parseNumberOfMonths(\"2\"));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(6, ParserUtil.parseNumberOfMonths(\"6\"));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(4, ParserUtil.parseNumberOfMonths(\"4\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parseNumberOfMonths_invalidValue_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"1\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"7\"));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"-1\"));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"12\"));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"abc\"));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfMonths(\"1.1\"));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 45,
      "-": 193,
      "sebastiantoh": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/archive/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains user input validation tests for {@code ArchiveCommandParser}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_validArgs_returnsArchiveCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AddCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/archive/ArchiveCommandsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ArchiveCommandsParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private final ArchiveCommandsParser archiveCommandsParser \u003d new ArchiveCommandsParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_listCommand_returnsListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertParseSuccess(archiveCommandsParser, \"archive list\", null, new ListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertTrue(archiveCommandsParser.parse(\"unknownCommand\", \"lol\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                instanceof UnknownCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/archive/RemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.logic.parser.archive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import seedu.address.logic.commands.archive.RemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains user input validation tests for {@code RemoveCommandParser}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_validArgs_returnsArchiveCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemoveCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_invaliedArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARSED_VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e singleTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e multipleTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        singleTagList.add(PARSED_VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        multipleTagList.add(PARSED_VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        multipleTagList.add(PARSED_VALID_TAG_HUSBAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, singleTagList, PARSED_VALID_REMARK_BOB);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommandMultipleTags \u003d new AddCommand(PARSED_VALID_NAME_BOB, PARSED_VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_BOB, PARSED_VALID_ADDRESS_BOB, multipleTagList, PARSED_VALID_REMARK_BOB);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + REMARK_DESC_BOB, expectedCommandMultipleTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // multiple remarks - last remark accepted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + TAG_DESC_FRIEND + REMARK_DESC_AMY + REMARK_DESC_BOB, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e emptyTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        tagList.add(PARSED_VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(PARSED_VALID_NAME_AMY, PARSED_VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_AMY, PARSED_VALID_ADDRESS_AMY, emptyTagList, PARSED_VALID_REMARK_AMY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommandWithoutRemark \u003d new AddCommand(PARSED_VALID_NAME_AMY, PARSED_VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                PARSED_VALID_EMAIL_AMY, PARSED_VALID_ADDRESS_AMY, tagList, new Remark(\"\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person expectedPersonWithoutTags \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + REMARK_DESC_AMY, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person expectedPersonWithoutRemark \u003d new PersonBuilder(AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + TAG_DESC_FRIEND, expectedCommandWithoutRemark);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "hakujitsu": 55,
      "sebastiantoh": 1,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/ContactCommandsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.contact.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class ContactCommandsParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final ContactCommandsParser contactCommandsParser \u003d new ContactCommandsParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_listCommand_returnsListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(contactCommandsParser, \"contact list\", null, new ListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(contactCommandsParser.parse(\"unknownCommand\", \"lol\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                instanceof UnknownCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 19,
      "sebastiantoh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "sebastiantoh": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String REMARK_EMPTY \u003d \" \" + PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + REMARK_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            + REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_resetRemark_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + REMARK_EMPTY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRemark(\"\").build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 2,
      "hakujitsu": 27,
      "sebastiantoh": 11,
      "-": 195
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(\"Alice Bob\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "sebastiantoh": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contact/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.contact.SortCommandParser.ORDER_KEYWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final SortCommandParser sortCommandParser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_nameOnly_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_NAME.getPrefix();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_CONTACT_NAME, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_emailOnly_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL.getPrefix();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_CONTACT_EMAIL, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_nameAndDesc_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_NAME.getPrefix() + \" \" + ORDER_KEYWORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_CONTACT_NAME, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_emailAndDesc_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL.getPrefix() + \" \" + ORDER_KEYWORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_CONTACT_EMAIL, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_totalSalesOnly_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_TOTAL_SALES.getPrefix();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_TOTAL_SALES, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_totalSalesAndDesc_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_TOTAL_SALES.getPrefix() + \" \" + ORDER_KEYWORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(PREFIX_TOTAL_SALES, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(sortCommandParser, args, expectedSortCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_noInputs_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_invalidAttribute_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_nonExistentAttribute_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_SALE_QUANTITY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_noAttributeAndDesc_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + ORDER_KEYWORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_moreThanOneAttribute_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // email and name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL + \" \" + PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // email and total sales"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        args \u003d \" \" + PREFIX_CONTACT_EMAIL + \" \" + PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // name and total sales"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        args \u003d \" \" + PREFIX_CONTACT_NAME + \" \" + PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // name and email and total sales"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        args \u003d \" \" + PREFIX_CONTACT_NAME + \" \" + PREFIX_CONTACT_EMAIL + \" \" + PREFIX_TOTAL_SALES;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_twoAttributesAndDesc_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL + \" \" + PREFIX_CONTACT_NAME"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                + \" \" + ORDER_KEYWORD;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_validAttributeAndNotDesc_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL + \" \" + \"lol\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_validAttributeAndDescUpperCase_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        String args \u003d \" \" + PREFIX_CONTACT_EMAIL + \" \" + ORDER_KEYWORD.toUpperCase();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(sortCommandParser, args,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTACT_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDurations.TYPICAL_DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1 + DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new AddCommand(INDEX_SECOND_ITEM, new Message(VALID_MESSAGE_CALL_AMY), TYPICAL_DATE_1,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        TYPICAL_DURATION_ONE_HOUR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing contact prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, INDEX_SECOND_ITEM.getOneBased() + MESSAGE_CALL_AMY + DATE_1, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing message prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + VALID_MESSAGE_CALL_AMY + DATE_1 + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + VALID_DATE_1 + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing duration prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1 + VALID_DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                INDEX_SECOND_ITEM.getOneBased() + VALID_MESSAGE_CALL_AMY + VALID_DATE_1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        + VALID_DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                INVALID_CONTACT_INDEX + MESSAGE_CALL_AMY + DATE_1 + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, INVALID_CONTACT_INDEX + \" \" + PREFIX_MESSAGE + \"\" + DATE_1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + INVALID_DATE + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + \" \" + PREFIX_DATETIME + \"\" + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1 + INVALID_DURATION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                PREAMBLE_NON_EMPTY + CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1 + DURATION_ONE_HOUR,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/MeetingCommandsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.meeting.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingCommandsParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final MeetingCommandsParser meetingCommandsParser \u003d new MeetingCommandsParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_listCommand_returnsListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(meetingCommandsParser, \"meeting list\", null, new ListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(meetingCommandsParser.parse(\"unknownCommand\", \"lol\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                instanceof UnknownCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "sebastiantoh": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/StatsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.SingleMeetingStatsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.meeting.StatsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    private final StatsCommandParser statsCommandParser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_noArguments_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(statsCommandParser, \"\", new SingleMeetingStatsCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_validArguments_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(statsCommandParser, \" m/10 y/2020\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new SingleMeetingStatsCommand(Month.of(10), Year.of(2020)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_monthOnly_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(statsCommandParser, \" m/10\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_yearOnly_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(statsCommandParser, \" y/10\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_invalidMonth_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(statsCommandParser, \" m/13 y/2020\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_invalidYear_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(statsCommandParser, \" m/10 y/-1\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/reminder/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTACT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalDates.TYPICAL_DATE_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(INDEX_SECOND_ITEM, new Message(VALID_MESSAGE_CALL_AMY),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                TYPICAL_DATE_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing contact prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, MESSAGE_CALL_AMY + DATE_1, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing message prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                CONTACT_INDEX_SECOND + VALID_MESSAGE_CALL_AMY + DATE_1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + VALID_DATE_1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, INDEX_SECOND_ITEM.getOneBased() + VALID_MESSAGE_CALL_AMY + VALID_DATE_1,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, INVALID_CONTACT_INDEX + MESSAGE_CALL_AMY + DATE_1,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, INVALID_CONTACT_INDEX + \" \" + PREFIX_MESSAGE + \"\" + DATE_1,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + INVALID_DATE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + \" \" + PREFIX_DATETIME + \"\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CONTACT_INDEX_SECOND + MESSAGE_CALL_AMY + DATE_1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/reminder/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/reminder/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_THIRD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTACT_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_CALL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_CALL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand.EditReminderDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.TypicalDates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.reminder.EditReminderDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, DATE_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DATE_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"0\" + DATE_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CONTACT_INDEX, MESSAGE_INVALID_INDEX); // invalid contact index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" \" + PREFIX_MESSAGE + \"\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Message.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE, MESSAGE_INVALID_DATETIME); // invalid date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + CONTACT_INDEX_SECOND + \" \" + PREFIX_DATETIME + \"\", MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CONTACT_INDEX + INVALID_DATE + MESSAGE_CALL_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                targetIndex.getOneBased() + CONTACT_INDEX_SECOND + DATE_1 + MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withContactIndex(INDEX_SECOND_ITEM)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                targetIndex.getOneBased() + DATE_1 + MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // contact index"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withContactIndex(INDEX_SECOND_ITEM)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // message"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // scheduledDate"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MESSAGE_CALL_AMY + CONTACT_INDEX_SECOND + MESSAGE_CALL_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                + CONTACT_INDEX_THIRD + DATE_1 + DATE_2;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withContactIndex(INDEX_THIRD_ITEM)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withMessage(VALID_MESSAGE_CALL_BOB)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .withScheduledDate(TypicalDates.TYPICAL_DATE_2)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE + DATE_1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditReminderDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DATE + DATE_1 + MESSAGE_CALL_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                new EditReminderDescriptorBuilder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withScheduledDate(TypicalDates.TYPICAL_DATE_1)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .withMessage(VALID_MESSAGE_CALL_AMY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/reminder/ReminderCommandsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.logic.parser.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderCommandsParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final ReminderCommandsParser reminderCommandsParser \u003d new ReminderCommandsParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_listCommand_returnsListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseSuccess(reminderCommandsParser, \"reminder list\", null, new ListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(reminderCommandsParser.parse(\"unknownCommand\", null) instanceof UnknownCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/sale/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALE_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_UNIT_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALE_DATE_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALE_TAG_FRUITS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.UNIT_PRICE_DESC_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALE_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALE_TAG_FRUITS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIT_PRICE_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String userInput \u003d CONTACT_INDEX_SECOND"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + ITEM_NAME_DESC_APPLE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + UNIT_PRICE_DESC_APPLE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + VALID_SALE_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        tags.add(new Tag(VALID_SALE_TAG_FRUITS));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddCommand expectedCommand \u003d new AddCommand(INDEX_SECOND_ITEM, new ItemName(VALID_ITEM_NAME_APPLE),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                LocalDateTime.parse(VALID_DATE_APPLE, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new Quantity(VALID_QUANTITY_APPLE), new UnitPrice(new BigDecimal(VALID_UNIT_PRICE_APPLE)), tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing contact prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, INDEX_SECOND_ITEM.getOneBased() + ITEM_NAME_DESC_APPLE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + SALE_DATE_DESC_APPLE + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + VALID_ITEM_NAME_APPLE + VALID_DATE_APPLE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + SALE_DATE_DESC_APPLE + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing item name prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + VALID_ITEM_NAME_APPLE + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + VALID_QUANTITY_APPLE + UNIT_PRICE_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing unit price prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + QUANTITY_DESC_APPLE + VALID_UNIT_PRICE_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, INDEX_SECOND_ITEM.getOneBased() + VALID_ITEM_NAME_APPLE + VALID_DATE_APPLE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        + VALID_QUANTITY_APPLE + VALID_UNIT_PRICE_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid item name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + INVALID_ITEM_NAME + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE + SALE_TAG_FRUITS, ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE + INVALID_SALE_DATE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE + SALE_TAG_FRUITS, MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + INVALID_QUANTITY + UNIT_PRICE_DESC_APPLE + SALE_TAG_FRUITS, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid unit price"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE + SALE_DATE_DESC_APPLE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + QUANTITY_DESC_APPLE + INVALID_UNIT_PRICE + SALE_TAG_FRUITS, UnitPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CONTACT_INDEX_SECOND + ITEM_NAME_DESC_APPLE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        + SALE_DATE_DESC_APPLE + QUANTITY_DESC_APPLE + UNIT_PRICE_DESC_APPLE + SALE_TAG_FRUITS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 12,
      "hakujitsu": 101,
      "sebastiantoh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/sale/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/sale/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.AllListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.sale.MonthlyListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_listAllSales_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ListCommand expectedCommand \u003d new AllListCommand(true, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_filterByContact_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String userInput \u003d CONTACT_INDEX_SECOND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        ListCommand expectedCommand \u003d new AllListCommand(false, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // missing contact prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertParseFailure(parser, Integer.toString(INDEX_SECOND_ITEM.getOneBased()), expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CONTACT_INDEX_SECOND,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_invalidMonthlyList_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(parser, ListCommand.COMMAND_WORD + \"m/10\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseFailure(parser, \"y/2020\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_validMonthlyAndYear_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertParseSuccess(parser, \" m/10 y/2020\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyListCommand(Month.OCTOBER, Year.of(2020)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 21,
      "hakujitsu": 44,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/sale/SaleCommandsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class SaleCommandsParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final SaleCommandsParser saleCommandsParser \u003d new SaleCommandsParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(saleCommandsParser.parse(\"unknownCommand\", \"lol\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                instanceof UnknownCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 5,
      "hakujitsu": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tag/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String BANANAS \u003d \"bananas\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String MINIONS \u003d \"minions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_validInput_returnsAddCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag contactTagToAdd \u003d new Tag(MINIONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Tag salesTagToAdd \u003d new Tag(BANANAS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // Parses input to add a contact tag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseSuccess(parser, String.format(\" %s %s%s\", PREFIX_CONTACT, PREFIX_TAG, MINIONS),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new AddCommand(contactTagToAdd, true));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        // Parses input to add a sales tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseSuccess(parser, String.format(\" %s %s%s\", PREFIX_SALE, PREFIX_TAG, BANANAS),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new AddCommand(salesTagToAdd, false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseFailure(parser, String.format(\" %s%s\", PREFIX_TAG, MINIONS),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tag/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TAG));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseFailure(parser, \"one\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tag/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String MINIONS \u003d \"minions\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_validInput_returnsEditCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        EditCommand.EditTagDescriptor descriptor \u003d new EditCommand.EditTagDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        descriptor.setTagName(MINIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseSuccess(parser, String.format(\"1 %s%s\", PREFIX_TAG, MINIONS),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new EditCommand(INDEX_FIRST_TAG, descriptor));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseFailure(parser, String.format(\"%d %s%s\", -1, PREFIX_TAG, MINIONS),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tag/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.logic.parser.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.logic.commands.tag.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_validIndex_returnsFindCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FindCommand(INDEX_FIRST_TAG));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertParseFailure(parser, \"one\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.CALL_ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.testutil.TypicalContactTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.testutil.TypicalSaleTags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.testutil.sale.TypicalSales;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, Collections.emptyList(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void hasContactTag_contactTagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addContactTag(TypicalContactTags.CLASSMATES);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(addressBook.hasContactTag(TypicalContactTags.CLASSMATES));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void hasSaleTag_saleTagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addSaleTag(TypicalSaleTags.IMPORTANT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(addressBook.hasSaleTag(TypicalSaleTags.IMPORTANT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void hasContactTag_contactTagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(addressBook.hasContactTag(TypicalContactTags.CLASSMATES));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void hasSaleTag_saleTagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(addressBook.hasSaleTag(TypicalSaleTags.IMPORTANT));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void findByContactTag_contactTagInAddressBook_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"Listing 3 contacts associated with: [friends]\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"1. Alice Pauline Phone: 94351253 Email: alice@example.com \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 123, Jurong West Ave 6, #08-111 Tags: [friends] Remark: Likes chocolates\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"2. Benson Meier Phone: 98765432 Email: johnd@example.com \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 311, Clementi Ave 2, #02-25 Tags: [owesMoney][friends] Remark: Owes me $10\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"3. Daniel Meier Phone: 87652533 Email: cornelia@example.com \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Address: 10th street Tags: [friends] Remark: \\n\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                addressBook.findByContactTag(TypicalContactTags.FRIENDS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void findByContactTag_contactTagNotInAddressBook_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddressBook addressBookCopy \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"No matching contact found for tag: [random]\\n\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                addressBookCopy.findByContactTag(new Tag(\"random\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void findSalesBySaleTag_saleTagInAddressBook_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddressBook addressBookCopy \u003d new AddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBookCopy.addPerson(BENSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBookCopy.addSale(TypicalSales.APPLE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"Listing 1 sales items associated with: [fruits]\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        + \"1. Apple (Date of Purchase: Fri, 30 Oct 2020, 15:00, Quantity: 10, Unit Price: 3.50, \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        + \"Tags: [[fruits]]) (Client: Benson Meier)\\n\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                addressBookCopy.findSalesBySaleTag(new Tag(\"fruits\")));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void findSalesBySaleTag_noMatchingSales_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"No matching sales found for tag: [random]\\n\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                addressBook.findSalesBySaleTag(new Tag(\"random\")));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void findContactsBySaleTag_saleTagInAddressBook_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddressBook addressBookCopy \u003d new AddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBookCopy.addPerson(BENSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBookCopy.addSale(TypicalSales.APPLE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"The following 1 contact(s) have purchased items in this category: [fruits]\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        + \"1. Benson Meier Phone: 98765432 Email: johnd@example.com \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        + \"Address: 311, Clementi Ave 2, #02-25 Tags: [owesMoney][friends] Remark: Owes me $10\\n\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                addressBookCopy.findContactsBySaleTag(new Tag(\"fruits\")));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void listTags_noSaleTags_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(\"No sale tags found! Listing contact tags:\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"1. [friends]\\n\", addressBook.listTags());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void listTags_withBothTags_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBook.addPerson(CARL);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        addressBook.addSale(TypicalSales.CAMERA);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"Listing contact tags:\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"1. [friends]\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                + \"Listing sale tags:\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"2. [electronics]\\n\", addressBook.listTags());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void resetData_withDuplicateReminder_throwsDuplicateReminderException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e newReminders \u003d Arrays.asList(CALL_ALICE, CALL_ALICE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(Collections.emptyList(), Collections.emptyList(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                newReminders, Collections.emptyList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateReminderException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasReminder(null));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_reminderNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(addressBook.hasReminder(CALL_ALICE));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_reminderInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        addressBook.addReminder(CALL_ALICE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(addressBook.hasReminder(CALL_ALICE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void getReminderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getReminderList().remove(0));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthMeetingsCount_valid_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertTrue(addressBook.getMonthMeetingsCount(Month.APRIL, Year.now()) \u003e\u003d 0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthlySaleList_valid_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(Objects.isNull(addressBook.getMonthlySaleList(Month.NOVEMBER, Year.of(2020))));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        private final ObservableList\u003cTag\u003e contactTags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        private final ObservableList\u003cTag\u003e saleTags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        private final ObservableList\u003cMeeting\u003e meetings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        private final ObservableList\u003cSale\u003e sales \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cMeeting\u003e meetings,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        Collection\u003cReminder\u003e reminders, Collection\u003cSale\u003e sales) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.meetings.setAll(meetings);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.reminders.setAll(reminders);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.sales.setAll(sales);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public ObservableList\u003cTag\u003e getContactTagList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return contactTags;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return meetings;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return reminders;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        public ObservableList\u003cSale\u003e getSaleList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return sales;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        public ObservableList\u003cTag\u003e getSaleTagList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return saleTags;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 14,
      "Asthenosphere": 90,
      "hakujitsu": 29,
      "-": 101,
      "sebastiantoh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MessageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MessageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Message(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_invalidMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String invalidMessage \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Message(invalidMessage));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void isValidMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // null message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Message.isValidMessage(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // invalid message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(Message.isValidMessage(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(Message.isValidMessage(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(Message.isValidMessage(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(Message.isValidMessage(\"call peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(Message.isValidMessage(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(Message.isValidMessage(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(Message.isValidMessage(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(Message.isValidMessage(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(Message.isValidMessage(\"David Roger Jackson Ray Jr 2nd\")); // long messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String msgWithMixedCase \u003d \"nLDSfdkfas\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(new Message(msgWithMixedCase).equals(new Message(msgWithMixedCase.toLowerCase())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.MEET_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.PRESENT_PROPOSAL_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.CALL_ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.EMAIL_BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.GUITAR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthAndYear;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void setAddressBook_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBook(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void deletePerson_invalidPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deletePerson(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void deletePerson_invalidPerson_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e modelManager.deletePerson(IDA));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void setPerson_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(null, null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(null, IDA));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(IDA, null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // different sortedList -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        modelManager.updateSortedPersonList((x, y) -\u003e y.getName().fullName.compareTo(x.getName().fullName));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        modelManager.updateSortedPersonList(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasMeeting_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasMeeting(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasMeeting_meetingNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(modelManager.hasMeeting(MEET_ALICE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasMeeting_meetingInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addMeeting(MEET_ALICE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(modelManager.hasMeeting(MEET_ALICE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteMeeting_invalidMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteMeeting(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteMeeting_invalidMeeting_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e modelManager.deleteMeeting(MEET_ALICE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasReminder(null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_reminderNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(modelManager.hasReminder(CALL_ALICE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void hasReminder_reminderInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addReminder(CALL_ALICE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(modelManager.hasReminder(CALL_ALICE));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteReminder_invalidReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteReminder(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteReminder_invalidReminder_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e modelManager.deleteReminder(CALL_ALICE));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setReminder(null, null));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setReminder(null, CALL_ALICE));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setReminder(CALL_ALICE, null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void getSortedReminderList_reminderWithEarlierDateAdded_meetingInSortedOrder() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addReminder(CALL_ALICE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addReminder(EMAIL_BENSON);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ObservableList\u003cReminder\u003e reminderList \u003d modelManager.getSortedReminderList();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(reminderList.get(0), EMAIL_BENSON);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(reminderList.get(1), CALL_ALICE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void getSortedMeetingList_meetingWithEarlierDateAdded_meetingInSortedOrder() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addMeeting(MEET_ALICE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        modelManager.addMeeting(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ObservableList\u003cMeeting\u003e meetingList \u003d modelManager.getSortedMeetingList();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(meetingList.get(0), PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(meetingList.get(1), MEET_ALICE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthMeetingsCount_valid_success() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        modelManager.addMeeting(MEET_ALICE);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, modelManager.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMultipleMonthMeetingsCount_valid_success() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        modelManager.addMeeting(MEET_ALICE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        MonthlyCountDataSet expectedResult \u003d new MonthlyCountDataSet(Collections.singletonList("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                new MonthlyCountData(new MonthAndYear(month, year), 1)));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(expectedResult, modelManager.getMultipleMonthMeetingsCount(month, year, 1));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public void getMonthlySaleList_valid_success() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        modelManager.addSale(GUITAR);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Collections.singletonList(GUITAR),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                modelManager.getMonthlySaleList(GUITAR.getMonth(), GUITAR.getYear()));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 63,
      "hakujitsu": 2,
      "-": 130,
      "sebastiantoh": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.commons.MonthlyCountDataSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasContactTag(Tag tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addContactTag(Tag tag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addSaleTag(Tag tag) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void editContactTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void editSaleTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteContactTag(Tag target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteSaleTag(Tag target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String findByContactTag(Tag target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String findSalesBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String findContactsBySaleTag(Tag target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String listTags() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean saleTagsExist(Sale sale) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean contactTagsExist(Person person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cTag\u003e getContactTagList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cTag\u003e getSaleTagList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAllPersons() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new UniquePersonList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new UniquePersonList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e getFilteredSaleList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void updateFilteredSaleList(Predicate\u003cSale\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ObservableList\u003cSale\u003e getSortedSaleList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void updateSortedSaleList(Comparator\u003cSale\u003e comparator) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getSortedMeetingList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean hasSale(Sale sale) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void addSale(Sale sale) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void removeSale(Sale sale) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public int getMonthMeetingsCount(Month month, Year year) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthMeetingsCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public MonthlyCountDataSet getMultipleMonthSaleCount(Month month, Year year, int numberOfMonths) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void initialiseLatestContactId() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int getLatestContactId() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public List\u003cSale\u003e getMonthlySaleList(Month month, Year year) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 22,
      "jmleong666": 5,
      "hakujitsu": 45,
      "sebastiantoh": 229
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelStubWithSortedPersonList.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A Model stub that has a sortedPersonList containing {@code TypicalPerson#BOB} at the first index (one-based), and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * {@code TypicalPerson#ALICE} at the second index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ModelStubWithSortedPersonList extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ObservableList\u003cPerson\u003e sortedPersonList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        sortedPersonList.add(BOB);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        sortedPersonList.add(ALICE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return sortedPersonList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Message VALID_MESSAGE \u003d new Message(\"Some dummy message\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final LocalDateTime VALID_DATETIME \u003d LocalDateTime.of(2020, 10, 30, 15, 19);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Duration VALID_DURATION \u003d Duration.ofMinutes(30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null, null, null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(ALICE, null, null, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null, VALID_MESSAGE, null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null, null, VALID_DATETIME, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null, null, null, VALID_DURATION));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameReference_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting \u003d new Meeting(ALICE, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(meeting, meeting);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameFields_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting1 \u003d new Meeting(ALICE, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting2 \u003d new Meeting(ALICE, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(meeting1, meeting2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameFieldsWithDifferentCasing_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting1 \u003d new Meeting(ALICE, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting2 \u003d new Meeting(ALICE, new Message(VALID_MESSAGE.message.toLowerCase()), VALID_DATETIME,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                VALID_DURATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(meeting1, meeting2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_differentFields_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting1 \u003d new Meeting(ALICE, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Meeting meeting2 \u003d new Meeting(BOB, VALID_MESSAGE, VALID_DATETIME, VALID_DURATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(meeting1, meeting2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.MEET_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.PRESENT_PROPOSAL_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class UniqueMeetingListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_meetingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(uniqueMeetingList.contains(MEET_ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_meetingInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int oldMonthMeetingsCount \u003d uniqueMeetingList.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(MEET_ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthMeetingsCount + 1, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add_duplicateMeeting_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int oldMonthMeetingsCount \u003d uniqueMeetingList.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(MEET_ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthMeetingsCount, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_meetingDoesNotExist_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int oldMonthMeetingsCount \u003d uniqueMeetingList.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(MEET_ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthMeetingsCount, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_existingMeeting_removesMeeting() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        int oldMonthMeetingsCount \u003d uniqueMeetingList.getMonthMeetingsCount(month, year);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthMeetingsCount + 1, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.remove(MEET_ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthMeetingsCount, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeMeetingsWithContact_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.removeMeetingsWithContact(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeMeetingsWithContact_noMeetingsWithContact_noChange() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.removeMeetingsWithContact(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeMeetingsWithContact_contactWithMultipleMeetings_associatedMeetingsRemoved() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(new Meeting(ALICE, new Message(\"Second meeting with Alice\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2021, 10, 30, 10, 19),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Duration.ofMinutes(60)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.removeMeetingsWithContact(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueMeetingList.add(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings_nullUniqueMeetingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvidedUniqueMeetingList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month1 \u003d PRESENT_PROPOSAL_BENSON.getStartDate().getMonth();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year1 \u003d Year.of(PRESENT_PROPOSAL_BENSON.getStartDate().getYear());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueMeetingList.add(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.setMeetings(expectedUniqueMeetingList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, uniqueMeetingList.getMonthMeetingsCount(month1, year1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d MEET_ALICE.getStartDate().getMonth();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d Year.of(MEET_ALICE.getStartDate().getYear());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month1 \u003d PRESENT_PROPOSAL_BENSON.getStartDate().getMonth();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year1 \u003d Year.of(PRESENT_PROPOSAL_BENSON.getStartDate().getYear());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.add(MEET_ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cMeeting\u003e meetingsList \u003d Collections.singletonList(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueMeetingList.setMeetings(meetingsList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueMeetingList.add(PRESENT_PROPOSAL_BENSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(0, uniqueMeetingList.getMonthMeetingsCount(month, year));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(1, uniqueMeetingList.getMonthMeetingsCount(month1, year1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setMeetings_listWithDuplicateMeetings_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cMeeting\u003e listWithDuplicateMeetings \u003d Arrays.asList(MEET_ALICE, MEET_ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e uniqueMeetingList.setMeetings(listWithDuplicateMeetings));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e uniqueMeetingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 35,
      "sebastiantoh": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Person aliceWithDifferentId \u003d new PersonBuilder(ALICE).withId(2).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(ALICE.equals(aliceWithDifferentId));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/ReminderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final LocalDateTime VALID_DATETIME \u003d LocalDateTime.of(2020, 10, 30, 15, 19);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Message VALID_MESSAGE \u003d new Message(\"Some dummy message\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null, null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(ALICE, null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null, VALID_MESSAGE, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null, null, VALID_DATETIME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(ALICE, VALID_MESSAGE, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(ALICE, null, VALID_DATETIME));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null, VALID_MESSAGE, VALID_DATETIME));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameReference_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(reminder, reminder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameFields_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder1 \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder2 \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(reminder1, reminder2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_sameFieldsWithDifferentCasing_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder1 \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder2 \u003d new Reminder(ALICE, new Message(VALID_MESSAGE.message.toLowerCase()), VALID_DATETIME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(reminder1, reminder2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void equals_differentFields_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder1 \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Reminder reminder2 \u003d new Reminder(BOB, VALID_MESSAGE, VALID_DATETIME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertNotEquals(reminder1, reminder2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void equals_differentStatus_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Reminder completedReminder \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Reminder pendingReminder \u003d new Reminder(ALICE, VALID_MESSAGE, VALID_DATETIME, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertNotEquals(completedReminder, pendingReminder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 7,
      "sebastiantoh": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/UniqueReminderListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.CALL_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.EMAIL_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class UniqueReminderListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final UniqueReminderList uniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_reminderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertFalse(uniqueReminderList.contains(CALL_ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void contains_reminderInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(uniqueReminderList.contains(CALL_ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void add_duplicateReminder_throwsDuplicateReminderException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateReminderException.class, () -\u003e uniqueReminderList.add(CALL_ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.remove(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_reminderDoesNotExist_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e uniqueReminderList.remove(CALL_ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void remove_existingReminder_removesReminder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.remove(CALL_ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeRemindersWithContact_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.removeRemindersWithContact(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeRemindersWithContact_noRemindersWithContact_noChange() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.removeRemindersWithContact(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void removeRemindersWithContact_contactWithMultipleReminders_associatedRemindersRemoved() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(new Reminder(ALICE, new Message(\"Second reminder with Alice\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                LocalDateTime.of(2021, 10, 30, 10, 19)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.removeRemindersWithContact(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_nullTargetReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.setReminder(null, CALL_ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_nullEditedReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.setReminder(CALL_ALICE, null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_targetReminderNotInList_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e uniqueReminderList.setReminder(CALL_ALICE, CALL_ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_editedReminderIsSameReminder_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.setReminder(CALL_ALICE, CALL_ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_editedReminderIsDifferent_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.setReminder(CALL_ALICE, EMAIL_BENSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminder_editedReminderExists_throwsDuplicateReminderException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateReminderException.class, () -\u003e uniqueReminderList.setReminder(CALL_ALICE, EMAIL_BENSON));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders_nullUniqueReminderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.setReminders((UniqueReminderList) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders_uniqueReminderList_replacesOwnListWithProvidedUniqueReminderList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.setReminders(expectedUniqueReminderList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReminderList.setReminders((List\u003cReminder\u003e) null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.add(CALL_ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e reminderList \u003d Collections.singletonList(EMAIL_BENSON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        uniqueReminderList.setReminders(reminderList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        UniqueReminderList expectedUniqueReminderList \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        expectedUniqueReminderList.add(EMAIL_BENSON);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(expectedUniqueReminderList, uniqueReminderList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void setReminders_listWithDuplicateReminders_throwsDuplicateReminderException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cReminder\u003e listWithDuplicateReminders \u003d Arrays.asList(CALL_ALICE, CALL_ALICE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DuplicateReminderException.class, ()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e uniqueReminderList.setReminders(listWithDuplicateReminders));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e uniqueReminderList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/sale/ItemNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ItemNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_invalidItemName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void isValidItemName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemName.isValidItemName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(ItemName.isValidItemName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(ItemName.isValidItemName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(ItemName.isValidItemName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(ItemName.isValidItemName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(ItemName.isValidItemName(\"pencilcase\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(ItemName.isValidItemName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(ItemName.isValidItemName(\"2b pencil\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(ItemName.isValidItemName(\"Notebook\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(ItemName.isValidItemName("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \"Gussi Classic Dotted Grid Bullet Notebook Journal Hard Cover A5\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(new ItemName(\"Apple\").equals(new ItemName(\"Apple\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(new ItemName(\"APPLE\").equals(new ItemName(\"apple\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(new ItemName(\"APPLE\").equals(new ItemName(\"ball\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/sale/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"1.1\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(Name.isValidName(\"0\")); // zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/sale/SaleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIT_PRICE_BALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.BALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.SaleBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class SaleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void isSameSale() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(APPLE.isSameSale(APPLE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.isSameSale(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different quantity and unit price -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedApple \u003d new SaleBuilder(APPLE).withItemName(VALID_ITEM_NAME_BALL).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.isSameSale(editedApple));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale appleCopy \u003d new SaleBuilder(APPLE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different sale -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(BALL));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedApple \u003d new SaleBuilder(APPLE).withItemName(VALID_ITEM_NAME_BALL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new SaleBuilder(APPLE).withQuantity(VALID_QUANTITY_BALL).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // different unit price -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        editedApple \u003d new SaleBuilder(APPLE).withUnitPrice(new BigDecimal(VALID_UNIT_PRICE_BALL)).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/sale/UniqueSaleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.BALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.exceptions.DuplicateSaleException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.exceptions.SaleNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.sale.SaleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class UniqueSaleListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final UniqueSaleList uniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void contains_nullSale_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void contains_saleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(uniqueSaleList.contains(APPLE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void contains_saleInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(uniqueSaleList.contains(APPLE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void add_nullSale_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.add(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void add_duplicateSale_throwsDuplicateSaleException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d APPLE.getMonth();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d APPLE.getYear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e oldMonthlySaleList \u003d new ArrayList\u003c\u003e(uniqueSaleList.getMonthlySaleList(month, year));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        oldMonthlySaleList.add(APPLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthlySaleList, uniqueSaleList.getMonthlySaleList(month, year));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(DuplicateSaleException.class, () -\u003e uniqueSaleList.add(APPLE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_nullTargetSale_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.setSale(null, APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_nullEditedSale_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.setSale(APPLE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_targetSaleNotInList_throwsSaleNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(SaleNotFoundException.class, () -\u003e uniqueSaleList.setSale(APPLE, APPLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_editedSaleIsSameSale_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d APPLE.getMonth();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d APPLE.getYear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e oldMonthlySaleList \u003d new ArrayList\u003c\u003e(uniqueSaleList.getMonthlySaleList(month, year));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.setSale(APPLE, APPLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedUniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(oldMonthlySaleList, uniqueSaleList.getMonthlySaleList(month, year));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_editedSaleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Sale editedApple \u003d new SaleBuilder(APPLE).withUnitPrice(new BigDecimal(\"5.6\")).withQuantity(\"20\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.setSale(APPLE, editedApple);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedUniqueSaleList.add(editedApple);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_editedSaleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.setSale(APPLE, BALL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedUniqueSaleList.add(BALL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSale_editedSaleHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(BALL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(DuplicateSaleException.class, () -\u003e uniqueSaleList.setSale(APPLE, BALL));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void remove_nullSale_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void remove_saleDoesNotExist_throwsSaleNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(SaleNotFoundException.class, () -\u003e uniqueSaleList.remove(APPLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void remove_existingSale_removesSale() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Month month \u003d APPLE.getMonth();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Year year \u003d APPLE.getYear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.remove(APPLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        assertEquals(Collections.emptyList(), uniqueSaleList.getMonthlySaleList(month, year));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales_nullUniqueSaleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.setSales((UniqueSaleList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales_uniqueSaleList_replacesOwnListWithProvidedUniqueSaleList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedUniqueSaleList.add(BALL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.setSales(expectedUniqueSaleList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleList.setSales((List\u003cSale\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.add(APPLE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cSale\u003e saleList \u003d Collections.singletonList(BALL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        uniqueSaleList.setSales(saleList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        UniqueSaleList expectedUniqueSaleList \u003d new UniqueSaleList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        expectedUniqueSaleList.add(BALL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(expectedUniqueSaleList, uniqueSaleList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setSales_listWithDuplicateSales_throwsDuplicateSaleException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        List\u003cSale\u003e listWithDuplicateSales \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(DuplicateSaleException.class, () -\u003e uniqueSaleList.setSales(listWithDuplicateSales));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            -\u003e uniqueSaleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 16,
      "hakujitsu": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/model/sale/UnitPriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class UnitPriceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnitPrice(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new UnitPrice(new BigDecimal(\"-1.43\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void isValidUnitPriceString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e UnitPrice.isValidUnitPriceString(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\"11\")); // without . character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\"11.1\")); // missing one decimal place"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPriceString(\"11.1\")); // missing one decimal place"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(UnitPrice.isValidUnitPriceString(\"1.00\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(UnitPrice.isValidUnitPriceString(\"543.21\")); // zero"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void isValidUnitPrice() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e UnitPrice.isValidUnitPrice(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPrice(new BigDecimal(\"0\"))); // sums to zero"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPrice(new BigDecimal(\"1.999\"))); // cents is greater than 99"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertFalse(UnitPrice.isValidUnitPrice(new BigDecimal(\"-1.00\"))); // dollars is negative"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(UnitPrice.isValidUnitPrice(new BigDecimal(\"1.30\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertTrue(UnitPrice.isValidUnitPrice(new BigDecimal(\"2.53\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueContactTagListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalContactTags.CLASSMATES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalContactTags.COLLEAGUES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalContactTags.FRIENDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class UniqueContactTagListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final UniqueContactTagList uniqueContactTagList \u003d new UniqueContactTagList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactTagList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_contactTagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(uniqueContactTagList.contains(FRIENDS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_contactTagList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(uniqueContactTagList.contains(FRIENDS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void add_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactTagList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void add_duplicateContactTag_doesNotChangeState() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(1, uniqueContactTagList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_duplicateContactTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(FRIENDS, FRIENDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueContactTagList.setTags(listWithDuplicateTags));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_nullUniqueContactTagList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactTagList.setTags((UniqueContactTagList) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_uniqueContactTagList_replacesOwnListWithProvidedUniqueContactTagList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        UniqueContactTagList newUniqueContactTagList \u003d new UniqueContactTagList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        newUniqueContactTagList.add(CLASSMATES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.setTags(newUniqueContactTagList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(newUniqueContactTagList, uniqueContactTagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_uniqueContactTagList_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e tagList \u003d Collections.singletonList(COLLEAGUES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.setTags(tagList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        UniqueContactTagList newUniqueContactTagList \u003d new UniqueContactTagList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        newUniqueContactTagList.add(COLLEAGUES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(uniqueContactTagList, newUniqueContactTagList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactTagList.remove(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_contactTagDoesNotExist_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueContactTagList.remove(CLASSMATES));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_existingContactTag_removesContactTag() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.remove(FRIENDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(0, uniqueContactTagList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueContactTagList.add(FRIENDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            -\u003e uniqueContactTagList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueSaleTagListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalSaleTags.FOLLOW_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalSaleTags.IMPORTANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static seedu.address.testutil.TypicalSaleTags.PENDING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class UniqueSaleTagListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final UniqueSaleTagList uniqueSaleTagList \u003d new UniqueSaleTagList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleTagList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_contactTagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(uniqueSaleTagList.contains(IMPORTANT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void contains_contactTagList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertTrue(uniqueSaleTagList.contains(IMPORTANT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void add_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleTagList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void add_duplicateContactTag_doesNotChangeState() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(1, uniqueSaleTagList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_duplicateContactTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(IMPORTANT, IMPORTANT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueSaleTagList.setTags(listWithDuplicateTags));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_nullUniqueSaleTagList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleTagList.setTags((UniqueSaleTagList) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_uniqueSaleTagList_replacesOwnListWithProvidedUniqueSaleTagList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        UniqueSaleTagList newUniqueSaleTagList \u003d new UniqueSaleTagList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        newUniqueSaleTagList.add(FOLLOW_UP);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.setTags(newUniqueSaleTagList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(newUniqueSaleTagList, uniqueSaleTagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void setTags_uniqueSaleTagList_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTag\u003e tagList \u003d Collections.singletonList(PENDING);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.setTags(tagList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        UniqueSaleTagList newUniqueSaleTagList \u003d new UniqueSaleTagList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        newUniqueSaleTagList.add(PENDING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(uniqueSaleTagList, newUniqueSaleTagList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_nullContactTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSaleTagList.remove(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_contactTagDoesNotExist_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueSaleTagList.remove(FOLLOW_UP));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void remove_existingContactTag_removesContactTag() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.remove(IMPORTANT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(0, uniqueSaleTagList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        uniqueSaleTagList.add(IMPORTANT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            -\u003e uniqueSaleTagList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedMeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedMeeting.DESERIALIZING_DURATION_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.MEET_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class JsonAdaptedMeetingTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"2020/10/10 10AM\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"30/10/2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"30 minutes\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DURATION_DECIMAL \u003d \"PT30.5M\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final JsonAdaptedPerson VALID_PERSON \u003d new JsonAdaptedPerson(ALICE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_MESSAGE \u003d \"Lunch\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-10-30T15:19\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_DURATION_MINUTE \u003d \"PT1H40M\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_validMeetingDetails_returnsMeeting() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting \u003d new JsonAdaptedMeeting(MEET_ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(MEET_ALICE, meeting.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullPerson_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new JsonAdaptedMeeting(null, VALID_MESSAGE, VALID_DATE, VALID_DURATION_MINUTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullMessage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting \u003d new JsonAdaptedMeeting(VALID_PERSON, null, VALID_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            VALID_DURATION_MINUTE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Message\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting \u003d new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            VALID_DURATION_MINUTE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Date\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting1 \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, INVALID_DATE_1, VALID_DURATION_MINUTE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting2 \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, INVALID_DATE_2, VALID_DURATION_MINUTE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting1::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting2::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting \u003d new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, VALID_DATE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Duration\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting1 \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, VALID_DATE, INVALID_DURATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedMeeting meeting2 \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new JsonAdaptedMeeting(VALID_PERSON, VALID_MESSAGE, VALID_DATE, INVALID_DURATION_DECIMAL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d DESERIALIZING_DURATION_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting1::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meeting2::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.testutil.person.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_TOTAL_SALES_AMOUNT_1 \u003d \"str\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_TOTAL_SALES_AMOUNT_2 \u003d \"-1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_TOTAL_SALES_AMOUNT_3 \u003d \"-1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Integer VALID_ID \u003d BENSON.getId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_TOTAL_SALES_AMOUNT \u003d BENSON.getTotalSalesAmountString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String ZERO_TOTAL_SALES_AMOUNT_1 \u003d \"0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String ZERO_TOTAL_SALES_AMOUNT_2 \u003d \"0.00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                INVALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                invalidTags, VALID_REMARK, false, VALID_TOTAL_SALES_AMOUNT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_invalidTotalSalesAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person1 \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, INVALID_TOTAL_SALES_AMOUNT_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person2 \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, INVALID_TOTAL_SALES_AMOUNT_2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person3 \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_REMARK, false, INVALID_TOTAL_SALES_AMOUNT_3);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d \"Total Sales Amount should be a positive decimal number, \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \"with at most 2 decimal places.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person1::toModelType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person2::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person3::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullTotalSalesAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Total Sales Amount\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_zeroTotalSalesAmount_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person1 \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, ZERO_TOTAL_SALES_AMOUNT_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedPerson person2 \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                VALID_TAGS, VALID_REMARK, false, ZERO_TOTAL_SALES_AMOUNT_2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(new PersonBuilder(BENSON).withTotalSalesAmount(new BigDecimal(\"0\")).build(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                person1.toModelType());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(new PersonBuilder(BENSON).withTotalSalesAmount(new BigDecimal(\"0\")).build(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                person2.toModelType());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 15,
      "hakujitsu": 49,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedReminderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedReminder.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.CALL_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class JsonAdaptedReminderTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"2020/10/10 10AM\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"30/10/2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final JsonAdaptedPerson VALID_PERSON \u003d new JsonAdaptedPerson(ALICE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_MESSAGE \u003d \"Call Alice\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-10-30T15:19\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_validReminderDetails_returnsReminder() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder \u003d new JsonAdaptedReminder(CALL_ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(CALL_ALICE, reminder.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullPerson_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            new JsonAdaptedReminder(null, VALID_MESSAGE, VALID_DATE, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullMessage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            new JsonAdaptedReminder(VALID_PERSON, null, VALID_DATE, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Message\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            new JsonAdaptedReminder(VALID_PERSON, VALID_MESSAGE, null, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DateTime\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void toModelType_nullStatus_defaultsToPending() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedReminder(VALID_PERSON, VALID_MESSAGE, VALID_DATE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertFalse(reminder.toModelType().isCompleted());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder1 \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            new JsonAdaptedReminder(VALID_PERSON, VALID_MESSAGE, INVALID_DATE_1, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonAdaptedReminder reminder2 \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            new JsonAdaptedReminder(VALID_PERSON, VALID_MESSAGE, INVALID_DATE_2, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder1::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder2::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 13,
      "sebastiantoh": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedSaleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSale.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.BALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class JsonAdaptedSaleTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_ITEM_NAME \u003d \"@pple\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_DATETIME_1 \u003d \"2020/10/10 10AM\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_DATETIME_2 \u003d \"30/10/2020 12:12\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+6\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String INVALID_UNIT_PRICE \u003d \"1.493\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_ITEM_NAME \u003d BALL.getItemName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final Integer VALID_BUYER \u003d ALICE.getId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"2020-10-30T15:19\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_QUANTITY \u003d BALL.getQuantity().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final String VALID_UNIT_PRICE \u003d BALL.getUnitPrice().getAmount().setScale(2).toPlainString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BALL.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_validSaleDetails_returnsSale() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d new JsonAdaptedSale(BALL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(BALL, sale.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_invalidItemName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(INVALID_ITEM_NAME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d ItemName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullItemName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(null,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItemName.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullBuyer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale1 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        INVALID_DATETIME_1,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale2 \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        INVALID_DATETIME_2,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATETIME;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale1::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale2::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Datetime of Purchase\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        INVALID_QUANTITY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_invalidUnitPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        INVALID_UNIT_PRICE,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d UnitPrice.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void toModelType_nullUnitPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        JsonAdaptedSale sale \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                new JsonAdaptedSale(VALID_ITEM_NAME,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_BUYER,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        VALID_DATETIME,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_QUANTITY,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UnitPrice.class.getSimpleName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sale::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 25,
      "hakujitsu": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "class JsonAdaptedTagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String FRIENDS \u003d \"friends\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final String CLASSMATES \u003d \"classmates\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(FRIENDS);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void toModelType_validTagDetails_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        JsonAdaptedTag tag \u003d new JsonAdaptedTag(FRIENDS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(VALID_TAG, tag.toModelType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidDateInReminderAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidDateInReminderAddressBook.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidPersonInReminderAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonInReminderAddressBook.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidAndValidReminderAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidReminderAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidDateInMeetingAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidDateInMeetingAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidPersonInMeetingAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e readAddressBook(\"invalidPersonInMeetingAddressBook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void readAddressBook_invalidAndValidMeetingAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            -\u003e readAddressBook(\"invalidAndValidMeetingAddressBook.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        AddressBook tmp \u003d new AddressBook(readBack);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(original, tmp);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 2,
      "hakujitsu": 3,
      "-": 105,
      "sebastiantoh": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path TYPICAL_ADDRESSBOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path INVALID_PERSON_MEETING_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidPersonInMeetingAddressBook.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path INVALID_DURATION_MEETING_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidDurationInMeetingAddressBook.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path INVALID_DATE_MEETING_FILE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidDateInMeetingAddressBook.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path DUPLICATE_MEETING_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMeetingsAddressBook.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path INVALID_REMINDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidReminderAddressBook.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path DUPLICATE_REMINDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateReminderAddressBook.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_typicalAddressBookFile_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ADDRESSBOOK_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddressBook typicalAddressBook \u003d TypicalAddressBook.getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(addressBookFromFile, typicalAddressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidReminderFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_REMINDER_FILE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_duplicateReminders_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_REMINDER_FILE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_REMINDER,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidPersonInMeeting_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_MEETING_FILE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidDurationInMeeting_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DURATION_MEETING_FILE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_invalidDateInMeeting_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DATE_MEETING_FILE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toModelType_duplicateMeetings_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEETING_FILE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_MEETING,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "sebastiantoh": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "sebastiantoh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.meeting.TypicalMeetings.getTypicalMeetings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.getTypicalPersonsInReverse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.reminder.TypicalReminders.getTypicalReminders;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.getTypicalSales;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.sale.TypicalSales.getTypicalSalesInReverse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical entries."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Reminder reminder : getTypicalReminders()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Meeting meeting : getTypicalMeetings()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ab.addMeeting(meeting);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Sale sale : getTypicalSales()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            ab.addSale(sale);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical entries in reverse order."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static AddressBook getTypicalAddressBookInReverse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (Person person : getTypicalPersonsInReverse()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        for (Reminder reminder : getTypicalReminders()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (Meeting meeting : getTypicalMeetings()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ab.addMeeting(meeting);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Sale sale : getTypicalSalesInReverse()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            ab.addSale(sale);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 16,
      "hakujitsu": 9,
      "sebastiantoh": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalContactTags.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TypicalContactTags {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag FRIENDS \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag COLLEAGUES \u003d new Tag(\"colleagues\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag CLASSMATES \u003d new Tag(\"classmates\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDates.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A utility class containing a list of {@code LocalDateTime} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TypicalDates {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern((\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final LocalDateTime TYPICAL_DATE_1 \u003d LocalDateTime.parse(VALID_DATE_1, FORMATTER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final LocalDateTime TYPICAL_DATE_2 \u003d LocalDateTime.parse(VALID_DATE_2, FORMATTER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final LocalDateTime TYPICAL_DATE_3 \u003d LocalDateTime.parse(VALID_DATE_3, FORMATTER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDurations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TypicalDurations {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Duration TYPICAL_DURATION_ONE_HOUR \u003d Duration.ofMinutes(60);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Duration TYPICAL_DURATION_HALF_HOUR \u003d Duration.ofMinutes(30);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Duration TYPICAL_DURATION_TWO_DAYS \u003d Duration.ofMinutes(2880);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "sebastiantoh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSaleTags.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TypicalSaleTags {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag IMPORTANT \u003d new Tag(\"important\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag FOLLOW_UP \u003d new Tag(\"followUp\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag PENDING \u003d new Tag(\"pending\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static final Tag SPORTS \u003d new Tag(\"sports\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/meeting/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A utility class containing a list of {@code Meeting} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Meeting MEET_ALICE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(ALICE, new Message(\"Meet Alice to discuss pricing\"), LocalDateTime.of(2020, 10, 30, 15, 19),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    Duration.ofMinutes(60));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Meeting PRESENT_PROPOSAL_BENSON \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(BENSON, new Message(\"Present proposal to Benson\"), LocalDateTime.of(2018, 12, 20, 12, 0),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    Duration.ofMinutes(90));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Meeting LUNCH_CARL \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(CARL, new Message(\"Lunch with Carl\"), LocalDateTime.of(2020, 12, 20, 12, 12),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    Duration.ofMinutes(45));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Meeting LUNCH_FIONA \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(FIONA, new Message(\"Lunch with Fiona\"), LocalDateTime.of(2020, 8, 20, 12, 12),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    Duration.ofMinutes(45));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Meeting LUNCH_DANIEL \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(DANIEL, new Message(\"Lunch with Daniel\"), LocalDateTime.of(2020, 1, 20, 12, 12),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    Duration.ofMinutes(45));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Meeting LUNCH_ELLE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Meeting(ELLE, new Message(\"Lunch with Elle\"), LocalDateTime.of(2020, 2, 20, 12, 12),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "                    Duration.ofMinutes(45));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private TypicalMeetings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEET_ALICE, PRESENT_PROPOSAL_BENSON, LUNCH_CARL));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 11,
      "sebastiantoh": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/person/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setId(person.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setRemark(person.getRemark());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code id} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditPersonDescriptorBuilder withId(int id) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setId(id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditPersonDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 1,
      "hakujitsu": 18,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/person/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final BigDecimal DEFAULT_TOTAL_SALES_AMOUNT \u003d new BigDecimal(\"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final int DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(\"Alice Pauline\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Phone DEFAULT_PHONE \u003d new Phone(\"85355255\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Email DEFAULT_EMAIL \u003d new Email(\"alice@gmail.com\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Address DEFAULT_ADDRESS \u003d new Address(\"123, Jurong West Ave 6, #08-111\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Remark DEFAULT_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private boolean archived;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private BigDecimal totalSalesAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        phone \u003d DEFAULT_PHONE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        email \u003d DEFAULT_EMAIL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        address \u003d DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        remark \u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        archived \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        totalSalesAmount \u003d DEFAULT_TOTAL_SALES_AMOUNT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        id \u003d personToCopy.getId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        archived \u003d personToCopy.isArchived();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        totalSalesAmount \u003d personToCopy.getTotalSalesAmount();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code id} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public PersonBuilder withId(int id) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Sets the {@code Archived} of the {@code Person} that we are building to {@code true}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public PersonBuilder withArchived() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.archived \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds the {@code sales} into a {@code UniqueSaleList} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public PersonBuilder withTotalSalesAmount(BigDecimal totalSalesAmount) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.totalSalesAmount \u003d totalSalesAmount;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new Person(id, name, phone, email, address, tags, remark, archived, totalSalesAmount);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 15,
      "hakujitsu": 47,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/person/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import seedu.address.logic.commands.contact.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sb.append(PREFIX_CONTACT_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sb.append(PREFIX_CONTACT_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sb.append(PREFIX_CONTACT_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sb.append(PREFIX_CONTACT_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        sb.append(PREFIX_CONTACT_REMARK + person.getRemark().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_CONTACT_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_CONTACT_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_CONTACT_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                sb.append(PREFIX_CONTACT_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                sb.append(PREFIX_TAG + \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_CONTACT_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 2,
      "Asthenosphere": 1,
      "hakujitsu": 17,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/person/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withId(1).withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withTags(\"friends\").withRemark(\"Likes chocolates\").withTotalSalesAmount(new BigDecimal(\"0.8\")).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withId(2).withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").withRemark(\"Owes me $10\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withTotalSalesAmount(new BigDecimal(\"35.00\")).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withId(3).withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withTotalSalesAmount(new BigDecimal(\"2001.00\")).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withId(4).withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withId(5).withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withId(6).withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withId(7).withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    // Archived persons"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final Person HUGH \u003d new PersonBuilder().withId(8).withName(\"Hugh Jackson\").withPhone(\"98874356\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            .withEmail(\"hugh@example.com\").withAddress(\"Sydney\").withRemark(\"Loves Deadpool\").withArchived().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final Person JEFF \u003d new PersonBuilder().withId(9).withName(\"Jeff Jefferson\").withPhone(\"88290947\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            .withEmail(\"jeff@example.com\").withAddress(\"United Kingdom\").withArchived().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withId(10).withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withId(11).withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withId(1).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withId(2).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        .withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, HUGH, JEFF));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsInReverse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        List\u003cPerson\u003e typicalPersons \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, HUGH, JEFF));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        Collections.reverse(typicalPersons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return typicalPersons;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 6,
      "jmleong666": 15,
      "hakujitsu": 33,
      "-": 39,
      "sebastiantoh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/reminder/EditReminderDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.logic.commands.reminder.EditCommand.EditReminderDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A utility class to help with building EditReminderDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EditReminderDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private EditReminderDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor \u003d new EditReminderDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptorBuilder(EditReminderDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.descriptor \u003d new EditReminderDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Sets the {@code contactIndex} of the {@code EditReminderDescriptor} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptorBuilder withContactIndex(Index contactIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor.setContactIndex(contactIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Sets the {@code message} of the {@code EditReminderDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptorBuilder withMessage(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor.setMessage(new Message(message));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Sets the {@code Email} of the {@code EditReminderDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptorBuilder withScheduledDate(LocalDateTime scheduledDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        descriptor.setScheduledDate(scheduledDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Sets the {@code status} of the {@code EditReminderDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public EditReminderDescriptorBuilder withStatus(Boolean status) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        descriptor.setCompleted(status);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public EditReminderDescriptor build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 7,
      "sebastiantoh": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/reminder/TypicalReminders.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package seedu.address.testutil.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Reminder CALL_ALICE \u003d new Reminder(ALICE, new Message(\"Call Alice\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            LocalDateTime.of(2020, 10, 30, 15, 19));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Reminder EMAIL_BENSON \u003d new Reminder(BENSON, new Message(\"Email Benson\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            LocalDateTime.of(2018, 12, 20, 12, 0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static final Reminder SET_MEETING_CARL \u003d new Reminder(CARL, new Message(\"Set meeting with Carl\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            LocalDateTime.of(2020, 12, 20, 12, 12));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private TypicalReminders() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CALL_ALICE, EMAIL_BENSON, SET_MEETING_CARL));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/sale/EditSaleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.commands.sale.EditCommand.EditSaleDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A utility class to help with building EditSaleDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class EditSaleDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private EditSaleDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor \u003d new EditSaleDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder(EditSaleDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.descriptor \u003d new EditSaleDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Returns an {@code EditSaleDescriptor} with fields containing {@code sale}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder(Sale sale) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor \u003d new EditSaleDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setItemName(sale.getItemName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setBuyerId(sale.getBuyerId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setDatetimeOfPurchase(sale.getDatetimeOfPurchase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setUnitPrice(sale.getUnitPrice());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setQuantity(sale.getQuantity());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setTags(sale.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code itemName} of the {@code EditSaleDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withItemName(String itemName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setItemName(new ItemName(itemName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code buyerId} of the {@code EditSaleDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withBuyer(int buyerId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setBuyerId(buyerId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code localDateTime} of the {@code EditSaleDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withDatetimeOfPurchase(String localDateTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setDatetimeOfPurchase(LocalDateTime.parse(localDateTime, ParserUtil.DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code unitPrice} of the {@code EditSaleDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withUnitPrice(String unitPrice) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setUnitPrice(new UnitPrice(new BigDecimal(unitPrice)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Address} of the {@code EditSaleDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditSaleDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public EditSaleDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/sale/SaleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.ItemName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.UnitPrice;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A utility class to help with building Sale objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class SaleBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final int DEFAULT_BUYER_ID \u003d BOB.getId();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final BigDecimal DEFAULT_UNIT_PRICE \u003d new BigDecimal(\"20.50\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String DEFAULT_ITEM_NAME \u003d \"Pizza\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"50\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static final LocalDateTime DEFAULT_DATETIME \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            LocalDateTime.of(2020, 10, 17, 15, 20);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private ItemName name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Integer buyerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private LocalDateTime datetimeOfPurchase;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private UnitPrice unitPrice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a {@code SaleBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        name \u003d new ItemName(DEFAULT_ITEM_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        buyerId \u003d DEFAULT_BUYER_ID;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        datetimeOfPurchase \u003d DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        unitPrice \u003d new UnitPrice(DEFAULT_UNIT_PRICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Initializes the SaleBuilder with the data of {@code saleToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder(Sale saleToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        name \u003d saleToCopy.getItemName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        buyerId \u003d saleToCopy.getBuyerId();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        datetimeOfPurchase \u003d saleToCopy.getDatetimeOfPurchase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        quantity \u003d saleToCopy.getQuantity();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        unitPrice \u003d saleToCopy.getUnitPrice();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tags \u003d saleToCopy.getTags();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code ItemName} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder withItemName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.name \u003d new ItemName(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Buyer} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder withBuyerId(int buyerId) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.buyerId \u003d buyerId;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code datetimeOfPurchase} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder withDatetimeOfPurchase(LocalDateTime datetime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.datetimeOfPurchase \u003d datetime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the {@code UnitPrice} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public SaleBuilder withUnitPrice(BigDecimal unitPrice) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.unitPrice \u003d new UnitPrice(unitPrice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Sets the {@code Tags} of the {@code Sale} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public SaleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Sale build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Sale(name, buyerId, datetimeOfPurchase, quantity, unitPrice, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 16,
      "hakujitsu": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/sale/TypicalSales.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package seedu.address.testutil.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static seedu.address.testutil.person.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import seedu.address.model.sale.Sale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A utility class containing a list of {@code Sale} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class TypicalSales {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Sale APPLE \u003d new SaleBuilder().withItemName(\"Apple\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withBuyerId(BENSON.getId()).withQuantity(\"10\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withDatetimeOfPurchase(LocalDateTime.of(2020, 10, 30, 15, 0))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withUnitPrice(new BigDecimal(\"3.5\")).withTags(\"fruits\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Sale BALL \u003d new SaleBuilder().withItemName(\"Ball\").withBuyerId(ALICE.getId()).withQuantity(\"1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withDatetimeOfPurchase(LocalDateTime.of(2020, 9, 22, 12, 40))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withUnitPrice(new BigDecimal(\"0.8\")).withTags(\"sports\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static final Sale CAMERA \u003d new SaleBuilder().withItemName(\"Camera\").withBuyerId(CARL.getId())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withQuantity(\"2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withDatetimeOfPurchase(LocalDateTime.of(2020, 11, 1, 9, 5))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            .withUnitPrice(new BigDecimal(\"1000.5\")).withTags(\"electronics\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Sale GUITAR \u003d new SaleBuilder().withItemName(\"Fender guitar\").withBuyerId(BENSON.getId())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withQuantity(\"5\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withDatetimeOfPurchase(LocalDateTime.of(2020, 11, 1, 9, 5))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withUnitPrice(new BigDecimal(\"7000.0\")).withTags(\"electronics\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "    public static final Sale DRUMS \u003d new SaleBuilder().withItemName(\"Yamaha Drum set\").withBuyerId(BENSON.getId())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withQuantity(\"1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withDatetimeOfPurchase(LocalDateTime.of(2020, 11, 1, 9, 5))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "            .withUnitPrice(new BigDecimal(\"20000.0\")).withTags(\"electronics\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private TypicalSales() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static List\u003cSale\u003e getTypicalSales() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BALL, CAMERA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static List\u003cSale\u003e getTypicalSalesInReverse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronnSeah"
        },
        "content": "        List\u003cSale\u003e typicalSales \u003d new ArrayList\u003c\u003e(Arrays.asList(APPLE, BALL, CAMERA));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Collections.reverse(typicalSales);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return typicalSales;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronnSeah": 10,
      "hakujitsu": 30,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UserInputHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Contains unit tests for {@code UserInputHistory}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class UserInputHistoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void addToHistory_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"test input\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        UserInputHistory inputHistoryUnit \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryUnit.addToHistory(testInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        LinkedList\u003cString\u003e expectedHistoryList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        expectedHistoryList.add(testInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(inputHistoryUnit.getHistoryList(), expectedHistoryList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void getPreviousInput_noPreviousInput_returnsEmptyString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        UserInputHistory inputHistoryUnit \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(inputHistoryUnit.getPreviousInput(), \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void getPreviousInput_hasPreviousInput_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"test input\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        UserInputHistory inputHistoryUnit \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryUnit.addToHistory(testInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(inputHistoryUnit.getPreviousInput(), testInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void getNextInput_noNextInput_returnsEmptyString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        UserInputHistory inputHistoryUnit \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(inputHistoryUnit.getNextInput(), \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void getNextInput_hasNextInput_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"test input\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        UserInputHistory inputHistoryUnit \u003d new UserInputHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryUnit.addToHistory(testInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        inputHistoryUnit.getListIterator().previous();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(inputHistoryUnit.getNextInput(), testInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 57
    }
  }
]
